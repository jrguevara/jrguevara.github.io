[ { "title": "Electron - Recordatorios App | Parte 2 - Datos y Almacenamiento", "url": "/posts/electron-recordatorios-app-parte-02-datos-almacenamiento/", "categories": "Electron", "tags": "javascript, electron, desktop-app, tutorial", "date": "2025-10-28 23:00:00 -0600", "snippet": "Parte 2: Sistema de Datos y AlmacenamientoObjetivoImplementar el sistema de almacenamiento de datos con comunicación IPC entre proceso principal y renderer.Paso 1: Actualizar main.js con funciones ...", "content": "Parte 2: Sistema de Datos y AlmacenamientoObjetivoImplementar el sistema de almacenamiento de datos con comunicación IPC entre proceso principal y renderer.Paso 1: Actualizar main.js con funciones IPCReemplaza el contenido de main.js:const { app, BrowserWindow, ipcMain, Menu, dialog } = require('electron');const path = require('path');const fs = require('fs').promises;let mainWindow;const DATA_FILE = path.join(__dirname, 'renderer', 'data', 'reminders.json');const PREFERENCES_FILE = path.join(__dirname, 'preferences.json');function createWindow() { mainWindow = new BrowserWindow({ width: 1200, height: 900, minWidth: 1200, minHeight: 900, webPreferences: { nodeIntegration: false, contextIsolation: true, preload: path.join(__dirname, 'preload.js') }, show: false }); mainWindow.loadFile('renderer/views/index.html'); mainWindow.once('ready-to-show', () =&gt; { mainWindow.show(); });}// IPC Handlers para recordatoriosipcMain.handle('get-reminders', async () =&gt; { try { const data = await fs.readFile(DATA_FILE, 'utf-8'); return JSON.parse(data); } catch (error) { return []; }});ipcMain.handle('save-reminders', async (event, reminders) =&gt; { try { await fs.writeFile(DATA_FILE, JSON.stringify(reminders, null, 2)); return { success: true }; } catch (error) { return { success: false, error: error.message }; }});// IPC Handlers para preferenciasipcMain.handle('get-preference', async (event, key) =&gt; { try { const data = await fs.readFile(PREFERENCES_FILE, 'utf-8'); const preferences = JSON.parse(data); return preferences[key]; } catch (error) { return null; }});ipcMain.handle('set-preference', async (event, key, value) =&gt; { try { let preferences = {}; try { const data = await fs.readFile(PREFERENCES_FILE, 'utf-8'); preferences = JSON.parse(data); } catch (error) {} preferences[key] = value; await fs.writeFile(PREFERENCES_FILE, JSON.stringify(preferences, null, 2)); return { success: true }; } catch (error) { return { success: false, error: error.message }; }});app.whenReady().then(createWindow);app.on('window-all-closed', () =&gt; { if (process.platform !== 'darwin') { app.quit(); }});app.on('activate', () =&gt; { if (BrowserWindow.getAllWindows().length === 0) { createWindow(); }});Paso 2: Actualizar preload.jsReemplaza preload.js:const { contextBridge, ipcRenderer } = require('electron');contextBridge.exposeInMainWorld('electronAPI', { getReminders: () =&gt; ipcRenderer.invoke('get-reminders'), saveReminders: (reminders) =&gt; ipcRenderer.invoke('save-reminders', reminders), getPreference: (key) =&gt; ipcRenderer.invoke('get-preference', key), setPreference: (key, value) =&gt; ipcRenderer.invoke('set-preference', key, value)});Paso 3: Crear archivo de variables globalesCrea renderer/js/variables.js:// Variables globaleslet reminders = [];let editingId = null;let currentTheme = 'light';let sidebarCollapsed = false;// Claves para preferenciasconst THEME_KEY = 'theme';const SIDEBAR_KEY = 'sidebarCollapsed';// Elementos del DOMlet reminderForm, remindersList, emptyState, searchInput, clearSearchBtn;let darkModeToggle, submitBtn, cancelBtn, sidebar;let deleteModal, confirmDeleteBtn, cancelDeleteBtn, modalClose, modalReminderTitle;let reminderToDelete = null;Paso 4: Crear sistema de almacenamientoCrea renderer/js/storage.js:// Cargar preferenciasasync function loadPreferences() { try { currentTheme = await window.electronAPI.getPreference(THEME_KEY) || 'light'; const sidebarPref = await window.electronAPI.getPreference(SIDEBAR_KEY); sidebarCollapsed = sidebarPref === true || sidebarPref === 'true'; } catch (error) { currentTheme = 'light'; sidebarCollapsed = false; }}// Guardar preferenciaasync function savePreference(key, value) { try { await window.electronAPI.setPreference(key, value); } catch (error) { console.error('Error guardando preferencia:', error); }}// Cargar recordatoriosasync function loadReminders() { try { reminders = await window.electronAPI.getReminders(); renderReminders(); } catch (error) { console.error('Error al cargar recordatorios:', error); reminders = []; }}// Guardar recordatoriosasync function saveReminders() { try { const result = await window.electronAPI.saveReminders(reminders); return result.success; } catch (error) { console.error('Error al guardar recordatorios:', error); return false; }}Paso 5: Crear archivo de datos inicialCrea renderer/data/reminders.json:[]Paso 6: Crear archivo de inicializaciónCrea renderer/js/init.js:// Inicializar aplicaciónasync function initApp() { console.log('Iniciando aplicación...'); // Cargar preferencias await loadPreferences(); // Aplicar tema applyTheme(); // Cargar recordatorios await loadReminders(); console.log('Aplicación iniciada correctamente');}// Aplicar temafunction applyTheme() { if (currentTheme === 'dark') { document.body.classList.add('dark-mode'); } else { document.body.classList.remove('dark-mode'); }}// Inicializar cuando el DOM esté listodocument.addEventListener('DOMContentLoaded', initApp);Paso 7: Actualizar index.htmlActualiza renderer/views/index.html:&lt;!DOCTYPE html&gt;&lt;html lang=\"es\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Recordatorios App&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"../assets/css/styles.css\"&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"main-container\"&gt; &lt;h1&gt;Aplicación de Recordatorios&lt;/h1&gt; &lt;div id=\"app\"&gt; &lt;div id=\"remindersList\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=\"../js/variables.js\"&gt;&lt;/script&gt; &lt;script src=\"../js/storage.js\"&gt;&lt;/script&gt; &lt;script src=\"../js/init.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;Paso 8: Crear función temporal de renderizadoAgrega al final de renderer/js/storage.js:// Función temporal de renderizado (se mejorará en Parte 3)function renderReminders() { const container = document.getElementById('remindersList'); if (!container) return; if (reminders.length === 0) { container.innerHTML = '&lt;p&gt;No hay recordatorios todavía.&lt;/p&gt;'; } else { container.innerHTML = `&lt;p&gt;Tienes ${reminders.length} recordatorio(s)&lt;/p&gt;`; }}Paso 9: Probarnpm startAbre la consola de desarrollador (F12) y ejecuta:// Crear un recordatorio de pruebareminders.push({ id: Date.now(), title: 'Recordatorio de prueba', description: 'Esto es una prueba', category: 'personal', priority: 'media', completed: false, createdAt: new Date().toISOString()});// Guardarawait saveReminders();// Recargarawait loadReminders();Resultado esperado✅ Sistema de almacenamiento IPC funcionando✅ Datos persistentes en JSON✅ Sistema de preferencias operativo✅ Carga y guardado de recordatoriosSiguiente pasoEn la Parte 3, crearemos la interfaz de usuario principal con el formulario de recordatorios." }, { "title": "Electron - Recordatorios App | Parte 1 - Configuración Inicial del Proyecto", "url": "/posts/electron-recordatorios-app-parte-01-configuracion-inicial/", "categories": "Electron", "tags": "javascript, electron, desktop-app, tutorial", "date": "2025-10-26 23:00:00 -0600", "snippet": "Parte 1: Configuración Inicial del ProyectoObjetivoConfigurar la estructura básica del proyecto Electron con todos los archivos necesarios.Paso 1: Crear estructura de carpetasmkdir reminders-appcd ...", "content": "Parte 1: Configuración Inicial del ProyectoObjetivoConfigurar la estructura básica del proyecto Electron con todos los archivos necesarios.Paso 1: Crear estructura de carpetasmkdir reminders-appcd reminders-appmkdir renderermkdir renderer/viewsmkdir renderer/assetsmkdir renderer/assets/cssmkdir renderer/assets/imagesmkdir renderer/jsmkdir renderer/datamkdir renderer/componentsPaso 2: Inicializar proyecto Node.jsCrea package.json:{ \"name\": \"reminders-app\", \"version\": \"3.2.1\", \"description\": \"Una aplicación simple de recordatorios con Electron\", \"main\": \"main.js\", \"scripts\": { \"start\": \"electron .\", \"dev\": \"electron . --enable-logging\" }, \"keywords\": [\"electron\", \"recordatorios\", \"reminders\"], \"author\": \"Tu nombre\", \"license\": \"MIT\", \"devDependencies\": { \"electron\": \"^27.0.0\" }}Paso 3: Instalar Electronnpm installPaso 4: Crear archivo principal de ElectronCrea main.js:const { app, BrowserWindow } = require('electron');const path = require('path');let mainWindow;function createWindow() { mainWindow = new BrowserWindow({ width: 1200, height: 900, minWidth: 1200, minHeight: 900, webPreferences: { nodeIntegration: false, contextIsolation: true, preload: path.join(__dirname, 'preload.js') }, icon: path.join(__dirname, 'renderer', 'assets', 'images', 'icon.png'), show: false }); mainWindow.loadFile('renderer/views/index.html'); mainWindow.once('ready-to-show', () =&gt; { mainWindow.show(); });}app.whenReady().then(createWindow);app.on('window-all-closed', () =&gt; { if (process.platform !== 'darwin') { app.quit(); }});app.on('activate', () =&gt; { if (BrowserWindow.getAllWindows().length === 0) { createWindow(); }});Paso 5: Crear preload scriptCrea preload.js:const { contextBridge, ipcRenderer } = require('electron');contextBridge.exposeInMainWorld('electronAPI', { saveData: (data) =&gt; ipcRenderer.invoke('save-data', data), loadData: () =&gt; ipcRenderer.invoke('load-data'), exportData: () =&gt; ipcRenderer.invoke('export-data'), importData: () =&gt; ipcRenderer.invoke('import-data')});Paso 6: Crear HTML básicoCrea renderer/views/index.html:&lt;!DOCTYPE html&gt;&lt;html lang=\"es\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Recordatorios App&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"../assets/css/styles.css\"&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"main-container\"&gt; &lt;h1&gt;Aplicación de Recordatorios&lt;/h1&gt; &lt;div id=\"app\"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;Paso 7: Crear CSS básicoCrea renderer/assets/css/styles.css:* { margin: 0; padding: 0; box-sizing: border-box;}body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px;}.main-container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 20px; padding: 30px; box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);}h1 { color: #333; margin-bottom: 20px; text-align: center;}Paso 8: Probar la aplicaciónnpm startDeberías ver una ventana de Electron con el título “Recordatorios App” y un fondo degradado.Resultado esperado✅ Proyecto Electron configurado y ejecutándose✅ Estructura de carpetas creada✅ Ventana principal mostrándose correctamenteSiguiente pasoEn la Parte 2, crearemos el sistema de almacenamiento de datos y las variables globales." }, { "title": "Electron - RecordatoriosApp| Parte 0 - Introducción al Tutorial", "url": "/posts/electron-recordatorios-app-parte-00-introduccion/", "categories": "Electron", "tags": "javascript, electron, desktop-app, tutorial", "date": "2025-10-26 23:00:00 -0600", "snippet": "Parte 0: Introducción al Tutorial⚡ ¿Qué es Electron?ElectronElectron es un framework de código abierto desarrollado por GitHub que permite crear aplicaciones de escritorio multiplataforma usando te...", "content": "Parte 0: Introducción al Tutorial⚡ ¿Qué es Electron?ElectronElectron es un framework de código abierto desarrollado por GitHub que permite crear aplicaciones de escritorio multiplataforma usando tecnologías web (HTML, CSS y JavaScript).Características Principales🌍 Multiplataforma Escribe una vez, ejecuta en Windows, macOS y Linux Sin necesidad de aprender lenguajes nativos diferentes para cada plataforma Mismo código base para todas las plataformas🔧 Tecnologías Web Usa HTML, CSS y JavaScript que ya conoces Aprovecha todo el ecosistema de npm Mismas herramientas de desarrollo web (DevTools, debuggers)⚙️ Acceso al Sistema APIs de Node.js para acceso al sistema de archivos Comunicación con el sistema operativo Integración con características nativas (notificaciones, menús)Arquitectura de ElectronElectron combina Chromium (navegador) y Node.js en dos tipos de procesos:1. Proceso Principal (Main Process) Un solo proceso por aplicación Ejecuta Node.js con acceso completo al sistema Gestiona ventanas y ciclo de vida de la aplicación Maneja operaciones del sistema (archivos, menús, notificaciones) Archivo: main.js2. Proceso Renderizador (Renderer Process) Múltiples procesos (uno por ventana) Ejecuta en entorno de navegador (Chromium) Renderiza la interfaz de usuario (HTML/CSS/JS) Aislado del sistema por seguridad Archivos: HTML, CSS, JavaScript del frontend┌─────────────────────────────────────────┐│ PROCESO PRINCIPAL ││ (main.js - Node.js) ││ ││ ┌─────────────────────────────────┐ ││ │ - Gestión de ventanas │ ││ │ - Sistema de archivos │ ││ │ - APIs del sistema operativo │ ││ │ - Menús y notificaciones │ ││ └─────────────────────────────────┘ ││ ▲ ││ │ IPC ││ ▼ ││ ┌─────────────────────────────────┐ ││ │ PROCESO RENDERIZADOR │ ││ │ (HTML/CSS/JS - Chromium) │ ││ │ │ ││ │ ┌───────────────────────────┐ │ ││ │ │ Interfaz de Usuario │ │ ││ │ │ (HTML, CSS) │ │ ││ │ └───────────────────────────┘ │ ││ │ ┌───────────────────────────┐ │ ││ │ │ Lógica de la aplicación │ │ ││ │ │ (JavaScript) │ │ ││ │ └───────────────────────────┘ │ ││ └─────────────────────────────────┘ │└─────────────────────────────────────────┘Comunicación IPC (Inter-Process Communication)Los procesos se comunican de forma segura usando IPC:// Main Process (main.js)ipcMain.handle('get-data', async () =&gt; { return await loadData();});// Renderer Process (renderer.js)const data = await window.electronAPI.getData();Context Bridge - SeguridadEl preload script expone APIs de forma segura al renderer:// preload.jscontextBridge.exposeInMainWorld('electronAPI', { getData: () =&gt; ipcRenderer.invoke('get-data')});Esto protege tu aplicación al: ✅ Aislar Node.js del código de la interfaz ✅ Exponer solo APIs específicas y controladas ✅ Prevenir acceso directo al sistema desde el navegadorAplicaciones Famosas con Electron Visual Studio Code - Editor de código de Microsoft Slack - Plataforma de comunicación Discord - Chat para gamers y comunidades WhatsApp Desktop - Mensajería Figma - Diseño colaborativo Notion - Gestión de notas y proyectos Spotify - Streaming de música (versión anterior)¿Por qué Electron para este Tutorial?✅ Curva de aprendizaje suave - Si sabes web, ya sabes Electron✅ Desarrollo rápido - Prototipa e itera rápidamente✅ Ecosistema rico - Miles de paquetes npm disponibles✅ Multiplataforma real - Un código, tres sistemas operativos✅ Comunidad activa - Amplia documentación y soporte✅ Herramientas familiares - Usa las mismas que en desarrollo web🎯 Objetivo del TutorialConstruir desde cero una aplicación de escritorio profesional de recordatorios utilizando Electron, siguiendo un enfoque práctico y progresivo que culmina en una réplica exacta de la aplicación proporcionada.📱 Aplicación FinalAppFinalAl completar este tutorial habrás creado una aplicación completa con:Funcionalidades Principales ✅ Gestión de Recordatorios: Crear, editar, eliminar y completar recordatorios ✅ Categorización: Organización por categorías (Personal, Trabajo, Estudio, Salud, Otro) ✅ Prioridades: Sistema de prioridades (Alta, Media, Baja) con indicadores visuales ✅ Fechas Límite: Calendario personalizado con selector de hora ✅ Búsqueda Inteligente: Búsqueda en tiempo real por título, descripción o categoría ✅ Filtros Avanzados: Filtrar por categoría, estado y ordenar de múltiples formasCaracterísticas Técnicas 🎨 Modo Claro/Oscuro: Sistema de temas con persistencia de preferencia 💾 Persistencia Local: Almacenamiento en JSON sin dependencias externas 📊 Estadísticas: Contador en tiempo real de recordatorios totales, pendientes y completados 🔔 Notificaciones: Sistema visual de notificaciones para feedback inmediato ⌨️ Atajos de Teclado: Navegación rápida (Ctrl/Cmd+K, Ctrl/Cmd+B, Ctrl/Cmd+N, Escape) 🎭 Animaciones: Transiciones suaves y efectos visuales profesionalesArquitectura 🏗️ Proceso Principal: Node.js con acceso al sistema de archivos 🌐 Proceso Renderizador: HTML, CSS y JavaScript modular 🔒 IPC Seguro: Comunicación entre procesos usando contextBridge 📦 Modular: Código organizado en módulos independientes 🎯 Sin Frameworks: JavaScript vanilla para aprendizaje fundamental🗺️ Roadmap del TutorialFase 1: Fundamentos (Partes 1-2)Configurar Electron y establecer la arquitectura básica con comunicación IPC y persistencia de datos.Parte 1: Configuración Inicial Instalación de Electron Estructura del proyecto Primera ventana funcionandoParte 2: Sistema de Datos Comunicación IPC Almacenamiento en JSON Handlers de datos y preferenciasFase 2: Interfaz y CRUD (Partes 3-4)Construir la interfaz completa y las operaciones fundamentales.Parte 3: Interfaz de Usuario HTML completo con sidebar Formulario de recordatorios Componentes visualesParte 4: Operaciones CRUD Crear recordatorios Editar recordatorios Eliminar con confirmación Marcar como completadoFase 3: Funcionalidades Avanzadas (Partes 5-6)Agregar búsqueda, filtros y selector de fechas.Parte 5: Búsqueda y Filtros Búsqueda en tiempo real Filtros por categoría y estado Ordenamiento múltipleParte 6: Calendario Calendario personalizado Selector de fecha y hora Formato dd/mm/yyyy hh:mmFase 4: Experiencia de Usuario (Partes 7-9)Mejorar la UX con temas, navegación y notificaciones.Parte 7: Sistema de Temas Modo claro y oscuro Variables CSS Persistencia de preferenciaParte 8: Sidebar y Navegación Mostrar/ocultar sidebar Atajos de teclado Estado persistenteParte 9: Notificaciones y UX Sistema de notificaciones visuales Animaciones mejoradas Validación de formulariosFase 5: Distribución (Parte 10)Empaquetar la aplicación para distribución.Parte 10: Empaquetado Configuración de electron-builder Compilación multiplataforma Optimizaciones de producción📚 Metodología de AprendizajeEnfoque Práctico Código Real: Cada línea de código es funcional y probada Sin Teoría Excesiva: Explicaciones concisas enfocadas en implementación Construcción Incremental: Cada parte agrega funcionalidad visible Verificación Continua: Pruebas después de cada parteProgresión Lógica Configurar → Electron funcionando Almacenar → Datos persistentes Visualizar → Interfaz completa Operar → CRUD funcional Filtrar → Búsqueda y filtros Seleccionar → Calendario Personalizar → Temas Navegar → Sidebar Notificar → UX mejorada Distribuir → Aplicación empaquetada🎓 Conocimientos PreviosRequeridos JavaScript básico (variables, funciones, arrays, objetos) HTML y CSS fundamentales Manejo de línea de comandos básica Node.js y npm (instalación de paquetes)Opcionales Eventos del DOM Promesas y async/await CSS variables JSONAprenderás en el Tutorial ✅ Arquitectura de Electron (main/renderer processes) ✅ Comunicación IPC (Inter-Process Communication) ✅ Context Bridge para seguridad ✅ Manejo de sistema de archivos con Node.js ✅ Gestión de estado en aplicaciones de escritorio ✅ Desarrollo de interfaces complejas ✅ Implementación de calendarios personalizados ✅ Sistema de temas con CSS variables ✅ Empaquetado con electron-builder💻 Requisitos del SistemaSoftware Necesario Node.js: versión 16 o superior npm o yarn: gestor de paquetes Editor de código: VS Code recomendado Terminal: bash, zsh o PowerShellEspacio en Disco ~500 MB para node_modules ~200 MB para aplicación empaquetadaCompatibilidad ✅ macOS 10.13 o superior ✅ Windows 10/11 ✅ Linux (Ubuntu 18.04+, Fedora 32+)⏱️ Duración Estimada Tutorial Completo: 4-6 horas Por Parte: 20-40 minutos Configuración Inicial: 15 minutos Empaquetado Final: 30 minutosRecomendación: Toma descansos entre partes y experimenta con el código.📂 Estructura Final del Proyectoreminders-app/├── main.js # Proceso principal de Electron├── preload.js # Script de preload (seguridad)├── package.json # Configuración y dependencias├── package-lock.json # Dependencias bloqueadas├── README.md # Documentación del proyecto├── .gitignore # Archivos ignorados por git│├── renderer/ # Frontend (proceso renderizador)│ ├── views/│ │ ├── index.html # HTML principal│ │ └── components/ # Componentes HTML modulares│ │ ├── navbar.html # Barra de navegación superior│ │ ├── sidebar.html # Formulario de recordatorios│ │ ├── stats-filters.html # Estadísticas y filtros│ │ ├── reminders-list.html # Lista de recordatorios│ │ ├── floating-button.html# Botón flotante│ │ ├── delete-modal.html # Modal de confirmación│ │ ├── about-modal.html # Modal acerca de│ │ └── footer.html # Pie de página│ ││ ├── js/ # Scripts JavaScript modulares│ │ ├── component-loader.js # Cargador de componentes HTML│ │ ├── variables.js # Variables globales│ │ ├── storage.js # Persistencia de datos│ │ ├── core.js # Funciones principales│ │ ├── calendar.js # Sistema de calendario│ │ ├── formHandlers.js # Manejo de formularios│ │ ├── eventListeners.js # Event listeners│ │ ├── init.js # Inicialización de la app│ │ └── script.js # Coordinador principal│ ││ ├── assets/│ │ ├── css/│ │ │ └── styles.css # Estilos (modo claro/oscuro)│ │ └── images/│ │ └── icon.png # Icono de la aplicación│ ││ └── data/ # Datos persistentes (auto-generado)│ ├── reminders.json # Recordatorios guardados│ └── preferences.json # Preferencias de usuario│└── node_modules/ # Dependencias de npmDescripción de Archivos ClaveProceso Principal main.js - Gestiona ventanas, IPC handlers, menús del sistema preload.js - Expone APIs seguras al renderer mediante contextBridgeComponentes HTML (Arquitectura modular) navbar.html - Barra superior con búsqueda y toggle de tema sidebar.html - Formulario para crear/editar con calendario integrado stats-filters.html - Tarjetas de estadísticas y controles de filtrado reminders-list.html - Área principal para mostrar recordatoriosScripts JavaScript (Separación de responsabilidades) component-loader.js - Carga dinámica de componentes HTML variables.js - Estado global de la aplicación storage.js - Funciones de persistencia (IPC) core.js - Lógica de recordatorios, filtros, renderizado calendar.js - Selector de fechas personalizado formHandlers.js - Validación y envío de formularios eventListeners.js - Todos los event listeners init.js - Inicialización y carga inicial script.js - Verificación de módulos y coordinaciónDatos reminders.json - Array de objetos de recordatorios preferences.json - Configuración de usuario (tema, sidebar)🚀 ComenzarPaso 1: Preparación Instala Node.js desde nodejs.org Verifica la instalación: node --version y npm --version Instala un editor de código (VS Code recomendado)Paso 2: Crear Proyecto# Crear carpetamkdir reminders-appcd reminders-app# Inicializar proyectonpm init -y# Instalar Electronnpm install electron --save-devPaso 3: Seguir el TutorialVe a Parte 1: Configuración Inicial para comenzar con la configuración de tu aplicación Electron.💡 Consejos para el Éxito Lee primero, código después: Entiende qué hace cada sección antes de copiar Prueba frecuentemente: Ejecuta npm start después de cada cambio importante Usa DevTools: Presiona F12 para ver errores y hacer debugging Experimenta: Cambia colores, textos y funcionalidades para aprender Toma notas: Documenta lo que aprendes con tus propias palabras No te frustres: Es normal tener errores, usa la consola para identificarlos🐛 Recursos de Ayuda Documentación de Electron: https://www.electronjs.org/docs MDN Web Docs: https://developer.mozilla.org/ Node.js Docs: https://nodejs.org/docs/📝 Convenciones del TutorialBloques de Código// Código JavaScriptfunction ejemplo() { console.log('Esto es un ejemplo');}Comandos de Terminalnpm install paquetenpm startNotas Importantes ⚠️ Importante: Información crítica que debes tener en cuentaVerificaciones✅ Marca cuando completes cada verificación🎯 Resultado FinalAl finalizar el tutorial tendrás: ✅ Una aplicación de escritorio completamente funcional ✅ Conocimiento profundo de Electron ✅ Experiencia en arquitectura de aplicaciones de escritorio ✅ Base sólida para crear tus propias aplicaciones ✅ Aplicación lista para empaquetar y distribuir🚦 ¡Listo para Empezar!Ahora que conoces el panorama completo, estás listo para comenzar tu viaje en el desarrollo con Electron.Sigue a la Parte 1: Configuración Inicial para dar el primer paso hacia la creación de tu aplicación de recordatorios.¡Mucho éxito en tu aprendizaje! 🎉Si tienes preguntas o encuentras problemas, revisa la documentación oficial de Electron o la sección de solución de problemas en cada parte del tutorial." }, { "title": "CRUD con Serverless, Lambda y DynamoDB como IaC", "url": "/posts/iac-serverless-lambda-dynamodb-crud/", "categories": "aws", "tags": "javascript, aws, serverless, lambda, iac, dynamodb", "date": "2024-07-12 23:00:00 -0600", "snippet": "IaC serverless v4 Ejecutar en terminal serverless y seleccionar plantilla ❯ AWS / Node.js / HTTP API npm initserverless.ymlorg: jrcodingservice: iac-serverlessprovider: name: aws runtime: nodej...", "content": "IaC serverless v4 Ejecutar en terminal serverless y seleccionar plantilla ❯ AWS / Node.js / HTTP API npm initserverless.ymlorg: jrcodingservice: iac-serverlessprovider: name: aws runtime: nodejs20.x region: us-east-1 memorySize: 128 stage: ${opt:stage, 'dev'}functions: hello: handler: handler.hello events: - httpApi: path: / method: get sls deploy --verbose probar endpoint sls remove --verboseCambiar la ubicación de la función inicialsrc/handlers/postProduct.mjsexports.handler = async (event) =&gt; { return { statusCode: 200, body: JSON.stringify({ message: \"Lambda Post Product!\", }), };};serverless.ymlorg: jrcodingservice: iac-serverlessprovider: name: aws runtime: nodejs20.x region: us-east-1 memorySize: 128 stage: ${opt:stage, 'dev'}functions: postProduct: handler: src/handlers/postProduct.handler events: - httpApi: path: /product method: GET sls deploy --verbose probar endpointDynamoDBorg: jrcodingservice: iac-serverlessprovider: name: aws runtime: nodejs20.x region: us-east-1 memorySize: 128 stage: ${opt:stage, 'dev'}resources: Resources: InventoryTable: Type: AWS::DynamoDB::Table Properties: TableName: inventory AttributeDefinitions: - AttributeName: id AttributeType: S KeySchema: - AttributeName: id KeyType: HASH BillingMode: PAY_PER_REQUESTfunctions: postProduct: handler: src/handlers/postProduct.handler events: - httpApi: path: /producto method: POST sls deploy --verbose verificar que la tabla fue creadaCrear producto npm i uuid  npm install @aws-sdk/client-dynamodb npm install @aws-sdk/lib-dynamodb Modificar src/handlers/postProduct.mjs import { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";import { DynamoDBDocumentClient, PutCommand } from \"@aws-sdk/lib-dynamodb\";import { v4 as uuid } from \"uuid\";const dynamo = DynamoDBDocumentClient.from(new DynamoDBClient({}));export const handler = async (event, context) =&gt; { try { const product = JSON.parse(event.body); const newProduct = { ...product, id: uuid(), created_at: new Date().toLocaleString('es-SV'), }; const headers = { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }; await dynamo.send(new PutCommand({ TableName: \"inventory\", Item: newProduct, })); return { statusCode: 201, headers: headers, body: JSON.stringify(newProduct), }; } catch (error) { console.log(error); return { statusCode: 500, body: JSON.stringify({ message: error.message }), }; }}; Modificar serverless.ymlorg: jrcodingservice: iac-serverlessprovider: name: aws runtime: nodejs20.x region: us-east-1 memorySize: 128 stage: ${opt:stage, 'dev'} iamRoleStatements: - Effect: Allow Action: - dynamodb:PutItem Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/inventory\"resources: Resources: InventoryTable: Type: AWS::DynamoDB::Table Properties: TableName: inventory AttributeDefinitions: - AttributeName: id AttributeType: S KeySchema: - AttributeName: id KeyType: HASH BillingMode: PAY_PER_REQUESTfunctions: postProduct: handler: src/handlers/postProduct.handler events: - httpApi: path: /product method: POST sls deploy --verbose probar endpoint en postman e ingresar los datos:{ \"name\" :\"PS5\", \"brand\" : \"SONY\", \"price\" : 699.99, \"comments\" : \"Consola de videojuegos\", \"stock\" : 45}Listar Productos Crear src/handlers/getProducts.mjs import { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";import { DynamoDBDocumentClient, ScanCommand } from \"@aws-sdk/lib-dynamodb\";const dynamo = DynamoDBDocumentClient.from(new DynamoDBClient({}));export const handler = async (event, context) =&gt; { try { let products; const result = await dynamo.send(new ScanCommand({ TableName: \"inventory\", })); products = result.Items; const headers = { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }; return { statusCode: 200, headers: headers, body: JSON.stringify(products), }; } catch (error) { console.log(error); return { statusCode: 500, body: JSON.stringify({ message: error.message }), }; }}; Modificar serverless.yml⁠⁠org: jrcodingservice: iac-serverlessprovider: name: aws runtime: nodejs20.x region: us-east-1 memorySize: 128 stage: ${opt:stage, 'dev'} iamRoleStatements: - Effect: Allow Action: - dynamodb:PutItem - dynamodb:Scan Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/inventory\"resources: Resources: InventoryTable: Type: AWS::DynamoDB::Table Properties: TableName: inventory AttributeDefinitions: - AttributeName: id AttributeType: S KeySchema: - AttributeName: id KeyType: HASH BillingMode: PAY_PER_REQUESTfunctions: postProduct: handler: src/handlers/postProduct.handler events: - httpApi: path: /product method: POST getProducts: handler: src/handlers/getProducts.handler events: - httpApi: path: /products method: GET sls deploy --verbose Probar endpoint en PostmanObtener Producto Crear src/handlers/getProduct.mjs import { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";import { DynamoDBDocumentClient, GetCommand } from \"@aws-sdk/lib-dynamodb\";const dynamo = DynamoDBDocumentClient.from(new DynamoDBClient({}));export const handler = async (event, context) =&gt; { let product; const { id } = event.pathParameters; const headers = { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }; try { const result = await dynamo.send(new GetCommand({ TableName: \"inventory\", Key: { id } })); product = result.Item; } catch (error) { console.log(error); return { statusCode: 500, body: JSON.stringify({ message: error.message }), }; } if (!product) { return { statusCode: 404, headers: headers, body: JSON.stringify({ message: \"Producto no encontrado\" }), }; } return { statusCode: 200, headers: headers, body: JSON.stringify(product), };}; Modificar serverless.ymlorg: jrcodingservice: iac-serverlessprovider: name: aws runtime: nodejs20.x region: us-east-1 memorySize: 128 stage: ${opt:stage, 'dev'} iamRoleStatements: - Effect: Allow Action: - dynamodb:PutItem - dynamodb:Scan - dynamodb:GetItem Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/inventory\"resources: Resources: InventoryTable: Type: AWS::DynamoDB::Table Properties: TableName: inventory AttributeDefinitions: - AttributeName: id AttributeType: S KeySchema: - AttributeName: id KeyType: HASH BillingMode: PAY_PER_REQUESTfunctions: postProduct: handler: src/handlers/postProduct.handler events: - httpApi: path: /product method: POST getProducts: handler: src/handlers/getProducts.handler events: - httpApi: path: /products method: GET getProduct: handler: src/handlers/getProduct.handler events: - httpApi: path: /product/{id} method: GET sls deploy --verbose Probar endpoint en PostmanModificar Producto Crear src/handlers/putProduct.mjs import { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";import { DynamoDBDocumentClient, GetCommand, UpdateCommand } from \"@aws-sdk/lib-dynamodb\";const dynamo = DynamoDBDocumentClient.from(new DynamoDBClient({}));export const handler = async (event, context) =&gt; { try { const id = event.pathParameters?.id; const { name, brand, price, comments, stock } = JSON.parse(event.body); // Verificar si el registro existe antes de actualizarlo const result = await dynamo.send(new GetCommand({ TableName: \"inventory\", Key: { id: id }, })); if (!result.Item) { return { statusCode: 404, body: JSON.stringify({ message: \"Registro no encontrado\" }), }; } const headers = { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }; // Actualizar el registro existente await dynamo.send(new UpdateCommand({ TableName: \"inventory\", Key: { id: id }, UpdateExpression: \"SET #name = :name, brand = :brand, price = :price, comments = :comments, stock = :stock\", ExpressionAttributeNames: { \"#name\": \"name\", }, ExpressionAttributeValues: { \":name\": name, \":brand\": brand, \":price\": price, \":comments\": comments, \":stock\": stock, }, ReturnValues: \"ALL_NEW\", })); } catch (error) { console.log(error); return { statusCode: 500, body: JSON.stringify({ message: error.message }), }; } return { statusCode: 200, body: JSON.stringify({ message: \"Registro actualizado exitosamente\" }), };}; Modificar serverless.ymlorg: jrcodingservice: iac-serverlessprovider: name: aws runtime: nodejs20.x region: us-east-1 memorySize: 128 stage: ${opt:stage, 'dev'} iamRoleStatements: - Effect: Allow Action: - dynamodb:PutItem - dynamodb:Scan - dynamodb:GetItem - dynamodb:UpdateItem Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/inventory\"resources: Resources: InventoryTable: Type: AWS::DynamoDB::Table Properties: TableName: inventory AttributeDefinitions: - AttributeName: id AttributeType: S KeySchema: - AttributeName: id KeyType: HASH BillingMode: PAY_PER_REQUESTfunctions: postProduct: handler: src/handlers/postProduct.handler events: - httpApi: path: /product method: POST getProducts: handler: src/handlers/getProducts.handler events: - httpApi: path: /products method: GET getProduct: handler: src/handlers/getProduct.handler events: - httpApi: path: /product/{id} method: GET putProduct: handler: src/handlers/putProduct.handler events: - httpApi: path: /product/{id} method: PUT sls deploy --verbose Probar endpoint en PostmanElmininar Producto Crear src/handlers/deleteProduct.mjs import { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";import { DynamoDBDocumentClient, DeleteCommand, GetCommand } from \"@aws-sdk/lib-dynamodb\";const dynamo = DynamoDBDocumentClient.from(new DynamoDBClient({}));export const handler = async (event) =&gt; { try { const id = event.pathParameters?.id; // Verificar si el registro existe antes de eliminarlo const result = await dynamo.send(new GetCommand({ TableName: \"inventory\", Key: { id: id }, })); if (!result.Item) { return { statusCode: 404, body: JSON.stringify({ message: \"Registro no encontrado\" }), }; } const headers = { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }; // Eliminar el registro si existe await dynamo.send(new DeleteCommand({ TableName: \"inventory\", Key: { id: id }, })); return { statusCode: 200, headers: headers, body: JSON.stringify({ message: \"Registro eliminado exitosamente\" }), }; } catch (error) { console.log(error); return { statusCode: 500, body: JSON.stringify({ message: error.message }), }; }}; Modificar serverless.yml org: jrcodingservice: iac-serverlessprovider: name: aws runtime: nodejs20.x region: us-east-1 memorySize: 128 stage: ${opt:stage, 'dev'} iamRoleStatements: - Effect: Allow Action: - dynamodb:PutItem - dynamodb:Scan - dynamodb:GetItem - dynamodb:UpdateItem - dynamodb:DeleteItem Resource: \"arn:aws:dynamodb:${self:provider.region}:*:table/inventory\"resources: Resources: InventoryTable: Type: AWS::DynamoDB::Table Properties: TableName: inventory AttributeDefinitions: - AttributeName: id AttributeType: S KeySchema: - AttributeName: id KeyType: HASH BillingMode: PAY_PER_REQUESTfunctions: postProduct: handler: src/handlers/postProduct.handler events: - httpApi: path: /product method: POST getProducts: handler: src/handlers/getProducts.handler events: - httpApi: path: /products method: GET getProduct: handler: src/handlers/getProduct.handler events: - httpApi: path: /product/{id} method: GET putProduct: handler: src/handlers/putProduct.handler events: - httpApi: path: /product/{id} method: PUT deleteProduct: handler: src/handlers/deleteProduct.handler events: - httpApi: path: /product/{id} method: DELETE sls deploy --verbose Probar endpoint en Postman Remover stack de aws con sls remove --verbose" }, { "title": "NextJS + S3", "url": "/posts/next-s3/", "categories": "aws", "tags": "javascript, reactjs, nextjs, aws, s3, programacion", "date": "2024-05-24 23:00:00 -0600", "snippet": "IAM Crear un grupo de usuarios en IAM Crear grupo Adjuntar la politica AmazonS3FullAccessPolitica S3 Crear un usuario en IAMUsuario IAM Agregar el usuario al grupo creado anteriormenteAgregar u...", "content": "IAM Crear un grupo de usuarios en IAM Crear grupo Adjuntar la politica AmazonS3FullAccessPolitica S3 Crear un usuario en IAMUsuario IAM Agregar el usuario al grupo creado anteriormenteAgregar usuario al grupo Una vez creado el usuario seleccionarlo y ver su perfil. Seleccionar Credenciales de seguridadCredenciales de seguridad Seleccionar la opcion de Crear llaves de accesoCrear llaves de acceso En caso de uso seleccionar CLISeleccionar CLI Una vez generadas copiar ambas llaves de acceso o descargar archivo csvCopiar llaves de accesoCrear S3 Bucket Crear un bucket con un nombre unico, copiar el nombre del bucket y la region donde se creoCrear bucket Asegurarse que la opciones de ACLs desabilitado y Bloquear acceso publico esten seleccionadasConfiguracion de bucket Una vez creado seleccionar el bucket y dirigirse a la pestaña de permisos En la seccion de CORS pegar lo siguiente[ { \"AllowedHeaders\": [ \"*\" ], \"AllowedMethods\": [ \"PUT\", \"POST\", \"GET\" ], \"AllowedOrigins\": [ \"*\" ], \"ExposeHeaders\": [ \"ETag\" ] }] Crear una politica para el bucket. Puede utilizarse https://awspolicygen.s3.amazonaws.com/policygen.html para generarla. Se debera de colocar en Principal el ARN del Usuario,  en Acciones seleccionar GetObject y PutObject y en el ARN el arn del bucket añadiendo /* al final para conder acceso completo{ \"Id\": \"Policy1716700011680\", \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"Stm699991779\", \"Action\": [ \"s3:GetObject\", \"s3:PutObject\" ], \"Effect\": \"Allow\", \"Resource\": \"arn:aws:s3:::nombre-bucket/*\", \"Principal\": { \"AWS\": [ \"arn:aws:iam::103650:user/nombre-de-usuario\" ] } } ]}NEXT Crear proyecto de Next con npx create-next-app@latest s3-app-dev  Instalar las siguientes paquetes: npm i @aws-sdk/client-s3  npm i @aws-sdk/s3-request-presignernpm i axiosnpx shadcn-ui@latest initnpx shadcn-ui@latest add inputnpx shadcn-ui@latest add button ocumentacion del sdk para javascript https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/client/s3/ Crear archivo .env con las siguientes variables (colocar las varianles apropiadas)AWS_ACCESS_KEY =AWS_SECRET_KEY =AWS_BUCKET_NAME =AWS_BUCKET_REGION = Crear app/api/s3/route.tsconst { S3Client } = require(\"@aws-sdk/client-s3\");import { NextRequest, NextResponse } from \"next/server\";import { GetObjectCommand, PutObjectCommand } from \"@aws-sdk/client-s3\";import { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";// crea un cliente de S3 con las credenciales especificadas en las variables de entorno de AWS y el nombre de la region del bucket de S3const client = new S3Client({ region: process.env.AWS_BUCKET_REGION, credentials: { accessKeyId: process.env.AWS_ACCESS_KEY, secretAccessKey: process.env.AWS_SECRET_KEY, },});// nombre del bucket de S3const bucketName = process.env.AWS_BUCKET_NAME;// POST /api/s3// API para subir archivos a S3// Se espera que el archivo sea enviado como un form-data con el nombre \"image\". Retorna un JSON con la url del archivo subido o un mensaje de errorexport async function POST(req: NextRequest) { const formData = await req.formData(); const image = formData.get(\"image\"); const random = new Date().getTime(); // verifica que el archivo sea valido y que sea un objeto con el nombre del archivo y que sea un archivo valido if (image &amp;&amp; typeof image === \"object\" &amp;&amp; image.name) { const Body = (await image.arrayBuffer()) as Buffer; const params = { Bucket: bucketName, //Key: image.name, Key: `${random}-${image.name}`, Body, ContentType: image.type, }; // sube el archivo a S3 con los parametros especificados en la variable \"params\" y espera a que se complete la subida del archivo const command = new PutObjectCommand(params); await client.send(command); const getObjectParams = { Bucket: bucketName, Key: `${random}-${image.name}`, ACL: \"private\" }; // obtiene la url firmada del archivo subido para poder ser accedido publicamente por un tiempo limitado const getCommand = new GetObjectCommand(getObjectParams); const url = await getSignedUrl(client, getCommand, { expiresIn: 3600 }); // retorna un mensaje de exito en formato JSON con la url del archivo subido y la url firmada del archivo subido para ser accedido publicamente return NextResponse.json({ success: true, message: \"La imagen se subio correctamente!\", data: { url }, }); // si no se pudo subir la imagen retorna un mensaje de error en formato JSON return NextResponse.json({ success: false, message: \"No se pudo subir la imagen\", data: null, }); }} Modificar app/page.tsx⁠\"use client\"import { ChangeEvent, FormEvent, useEffect, useState } from \"react\";import { Button } from \"@/components/ui/button\";import { Input } from \"@/components/ui/input\";import axios from \"axios\";import Image from \"next/image\";// Home page// Esta pagina permite subir una imagen a un servidor de S3 y muestra la imagen subidaexport default function Home() { // estado para guardar la url de la imagen subida const [image, setImage] = useState&lt;string&gt;(); // estado para guardar la imagen seleccionada const [selectedImage, setSelectedImage] = useState&lt;File&gt;(); // funcion para subir una imagen a un servidor de S3 const onSubmit = async (event: FormEvent&lt;HTMLFormElement&gt;) =&gt; { // previene el comportamiento por defecto del formulario event.preventDefault(); // verifica que la imagen seleccionada exista y que sea un objeto valido de tipo File try { if (selectedImage) { const formData = new FormData(); formData.append(\"image\", selectedImage) const headers = { \"Content-Type\": \"multipart/form-data\" } // envia la imagen seleccionada al servidor de S3 y espera a que se suba la imagen const { data } = await axios.post(\"/api/s3\", formData, { headers }) if (data.success) setImage(data.data.url) } } catch (error) { console.error(error) } } // funcion para manejar el cambio de la imagen seleccionada const handleFileChange = (ev: ChangeEvent&lt;HTMLInputElement&gt;) =&gt; { const file = ev.target.files &amp;&amp; ev.target.files[0]; if (file) setSelectedImage(file) } // retorna el componente principal de la pagina Home con un formulario para subir una imagen y mostrar la imagen subida return ( &lt;main className=\"flex w-screen h-screen flex-col gap-3 items-center justify-center\"&gt; &lt;h1 className=\"text-3xl font-bold\"&gt;Subir imagen a S3&lt;/h1&gt; { image &amp;&amp; &lt;Image alt={image} src={image} height={400} width={400} className=\"rounded-md\" /&gt; } &lt;form onSubmit={onSubmit} className=\"flex flex-col gap-3 w-50\"&gt; &lt;label htmlFor=\"image\" className=\"font-medium\"&gt;Selecciona tu imagen&lt;/label &gt; &lt;Input id=\"image\" type=\"file\" onChange={handleFileChange} /&gt; &lt;Button type=\"submit\" className=\"w-100\"&gt;Submit&lt;/Button&gt; &lt;/form&gt; &lt;/main&gt; );} Modificar app/layout.tsximport type { Metadata } from \"next\";import { Inter } from \"next/font/google\";import \"./globals.css\";const inter = Inter({ subsets: [\"latin\"] });export const metadata: Metadata = { title: \"Create Next App\", description: \"Generated by create next app\",};export default function RootLayout({ children,}: Readonly&lt;{ children: React.ReactNode;}&gt;) { return ( &lt;html lang=\"en\" className=\"dark\"&gt; &lt;body className={inter.className}&gt;{children}&lt;/body&gt; &lt;/html&gt; );} Modificar next.config.mjs/** @type {import('next').NextConfig} */const nextConfig = { // permite que o Next.js optimize as imagens automaticamente images: { // habilita o uso de formatos de imagem modernos (AVIF e WebP) formats: [\"image/avif\", \"image/webp\"], // habilita o uso de imagens responsivas remotePatterns: [ { // Permite a NextJS optimizar imagens de un bucket S3 protocol: \"https\", hostname: \"nombre-bucket.s3.us-west-1.amazonaws.com\", port: \"\", pathname: \"/**\", }, ], },};export default nextConfig;" }, { "title": "Ubuntu LEMP Stack", "url": "/posts/ubuntu-nginx/", "categories": "aws", "tags": "LEMP, nube, aws, Ubuntu", "date": "2024-04-03 23:00:00 -0600", "snippet": "¿Qué es LEMP?LEMP es una variación de la omnipresente pila LAMP utilizada para desarrollar e implementar aplicaciones web. Tradicionalmente, LAMP consta de Linux, Apache, MySQL y PHP. Debido a su...", "content": "¿Qué es LEMP?LEMP es una variación de la omnipresente pila LAMP utilizada para desarrollar e implementar aplicaciones web. Tradicionalmente, LAMP consta de Linux, Apache, MySQL y PHP. Debido a su naturaleza modular, los componentes se pueden intercambiar fácilmente. Con LEMP, Apache se reemplaza con el Nginx ligero pero potente.¿Por qué LEMP en lugar de LNMP?Elegimos LEMP debido a la pronunciación de Nginx: Engine-X (en-juhn-ecks). Piense en cómo en inglés, el artículo an se usa en lugar de a por hora a pesar de que comienza con una consonante. La importancia es el sonido de la primera letra más que su representación escrita. Además, LEMP es en realidad pronunciable y no suena como recitar el alfabeto.LINUXUn sistema operativo similar a Unix de código abierto proporciona la base para los componentes de la pila. Muchas distribuciones incluyen sistemas de gestión de paquetes que facilitan la instalación de las aplicaciones deseadas. Sin embargo, estas versiones del repositorio generalmente no serán las más actuales. Dos de las distribuciones de Linux más utilizadas en pilas LEMP son Debian y Ubuntu.NginxNginx es un servidor proxy inverso de código abierto para los protocolos HTTP, HTTPS, SMTP, POP3 e IMAP. También funciona como equilibrador de carga, caché HTTP y servidor web (servidor de origen). Tiene un fuerte enfoque en alta concurrencia, alto rendimiento y bajo uso de memoria. El proyecto HTML5 Boilerplate tiene archivos de configuración de servidor de muestra para mejorar el rendimiento y la seguridad.MYSQLMySQL es el segundo sistema de gestión de bases de datos relacionales de código abierto más utilizado. Una bifurcación desarrollada por la comunidad, MariaDB, está dirigida por los desarrolladores originales. Su objetivo es ser un reemplazo directo.PHPPHP es un lenguaje de secuencias de comandos del lado del servidor diseñado para el desarrollo web. La función de secuencias de comandos también se puede cumplir con Python o Perl. Los servidores como Gunicorn o uWSGI se pueden usar junto con Nginx para servir estas aplicaciones. Verificar actualizacionessudo apt updatesudo apt upgradesudo rebootPersonalizar Terminal el comando echo $SHELL muestra la shell que actualmente se esta utilizando Instalar Shel ZSHsudo apt install zsh Cambiar shell con el comando:sudo chsh -s /bin/zsh ubuntu Alternativamente ejecutar nano /etc/passwd  y editar el usuario ubuntu cambiando /bin/bash a /bin/zsh  verificar existencia del archivo .zshrc con el comando ls -a Instalar Oh My ZSH https://github.com/ohmyzsh/ohmyzshsh -c \"$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" Instalar autosugerencias para ZSH https://github.com/zsh-users/zsh-autosuggestionsgit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions Instalar Syntax Highlinghting para ZSH https://github.com/zsh-users/zsh-syntax-highlightinggit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting Editar archivo .zshrc nano .zshrc Editar linea en el archivo plugins=(git zsh-autosuggestions zsh-syntax-highlighting)  Instalar font awesome sudo apt install -y fonts-font-awesome Instalar Powerlevel10k https://github.com/romkatv/powerlevel10k#oh-my-zshgit clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k Editar archivo .zshrc modificar la linea ZSH_THEME=\"powerlevel10k/powerlevel10k\"  Al reiniciar la terminal se nos mostrara la configuración paso a paso, en caso de no aparecer escribir el comando p10k configureNGINX/PHP/PHP-FPM/MYSQLsudo apt install nginxnginx -vsudo apt install php-fpm php-mysqlphp -vphp-fpm8.1 -vsudo apt install mysql-serversudo mysqlALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password by 'JR_w3b51t35';exitsudo mysql_secure_installationSitio WebCrear directorio para sitio web con: sudo mkdir /var/www/site1.devCambiar el propietario de la carpeta con:sudo chown -R www-data:www-data /var/www/html/site1.devsudo chown -R $USER:$USER /var/www/site1.devCrear archivo de configuración de virtual host;sudo nano /etc/nginx/sites-available/site1.devContenido del archivo:server {    listen 80;    server_name site2.dev www.site2.dev;    root /var/www/site2.dev;    index index.html index.htm index.php;    location / {        try_files $uri $uri/ =404;    }    location ~ \\.php$ {        include snippets/fastcgi-php.conf;        fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;     }    location ~ /\\.ht {        deny all;    }}Deshabilitar el virtual host por defecto:sudo unlink /etc/nginx/sites-enabled/defaultHabilitar el virtual host:sudo ln -s /etc/nginx/sites-available/site1.dev /etc/nginx/sites-enabled/Comprobar que la configuración de nginx esta correcta y recargar nginxsudo nginx -tsudo systemctl reload nginxCrear archivo index.html en la carpeta del sitiosudo nano /var/www/site1.dev/index.htmlContenido de index.html&lt;html&gt;  &lt;head&gt;    &lt;title&gt;Sitio Web&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;h1&gt;Hello World!&lt;/h1&gt;    &lt;p&gt;Esta es la pagina de inicio &lt;strong&gt;Sitio Web&lt;/strong&gt;.&lt;/p&gt;  &lt;/body&gt;&lt;/html&gt; Crear archivo info.php en la carpeta del sitiosudo nano /var/www/site1.dev/info.phpContenido de info.php&lt;?phpphpinfo();Instalación de otras versiones de phpPrimero instalar software-properties-common, el cual permite gestion de diferentes repositorios de softwaresudo apt install software-properties-commonInstalar el repositorio ppa:ondrej/php, el cual dará acceso a las diferentes versiones de phpsudo add-apt-repository ppa:ondrej/phpActualizar apt-get para poder ver los nuevos paquetes:sudo apt-get updateInstalar las extenciones que se necesite de PHPsudo apt-get install php7.4-cli php7.4-json php7.4-common php7.4-mysql php7.4-zip php7.4-gd php7.4-mbstring php7.4-curl php7.4-xml php7.4-bcmath php7.4-pspell  php7.4-intl  php7.4-xmlrpc php7.4-ldap php7.4-soap php7.4-fpm php7.4-cli - command interpreter, useful for testing PHP scripts from a shell or performing general shell scripting tasks php7.4-json - for working with JSON data php7.4-common - documentation, examples, and common modules for PHP php7.4-mysql - for working with MySQL databases php7.4-zip - for working with compressed files php7.4-gd - for working with images php7.4-mbstring - used to manage non-ASCII strings php7.4-curl - lets you make HTTP requests in PHP php7.4-xml - for working with XML data php7.4-bcmath - used when working with precision floatsHabilitar e instalar certificado SSLsudo apt-get install python3-certbot-nginxsudo certbot --nginx -d site1.dev -d www.site1.devHabilitar SSHsudo apt-get install python3-certbot-nginxsudo certbot --nginx -d site1.dev -d www.site1.devInstalar phpmyadmin Actualizar de ser necesario sudo apt update Instalar libreriasudo apt-get install php8.1-mbstring Desabilitar componente de validacion de passwordmysql -u root -pmysql&gt; UNINSTALL COMPONENT \"file://component_validate_password\";mysql&gt; exit instalar phpmyadmin sudo apt install phpmyadmin  Durante el proceso de instalación, se le pedirá que elija un servidor web (ya sea Apache o Lighttpd) para configurar. phpMyAdmin puede realizar automáticamente una serie de cambios de configuración para garantizar que funcione correctamente con cualquiera de estos servidores web durante la instalación. Sin embargo, debido a que está utilizando Nginx como servidor web, no debe elegir ninguna de estas opciones. En su lugar, presione TAB para resaltar y luego presione ENTER para continuar con el proceso de instalación. A continuación, se le preguntará si desea utilizar dbconfig-common para configurar la base de datos de la aplicación. Seleccione . Esto configurará la base de datos interna y el usuario administrativo de phpMyAdmin. Se le pedirá que defina una nueva contraseña para el usuario MySQL de phpmyadmin, pero como no es una contraseña que necesita recordar, puede dejarla en blanco y dejar que phpMyAdmin cree una contraseña aleatoriamente. Una vez que se complete el comando apt install, phpMyAdmin estará completamente instalado. Sin embargo, para que el servidor web Nginx encuentre y proporcione los archivos phpMyAdmin correctamente, deberá crear un enlace simbólico desde los archivos de instalación al directorio raíz de documentos de Nginx. sudo ln -s /usr/share/phpmyadmin /var/www/site1.dev/phpmyadmin  Crear usuario admin con todos los privilegiosmysql -u root -pmysql&gt; CREATE USER 'admin'@'localhost' IDENTIFIED BY 'JR_d4t4b453';mysql&gt; GRANT ALL PRIVILEGES ON * . * TO 'admin'@'localhost';mysql&gt; FLUSH PRIVILEGES;mysql&gt; exit Para restaurar la verificacion de password en mysql utilizar:mysql -u root -pmysql&gt; INSTALL COMPONENT \"file://component_validate_password\";mysql&gt; exit Acceder a phpmyadmin desde: https://site1.dev/phpmyadminInstalar Node Version Manager Instalar NVM siguiendo instrucciones de la pagina oficialhttps://github.com/nvm-sh/nvmcurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bashsource ~/.zshrc Instalaa la version de node que se necesite, en este caso la mas recientenvm install nodenode -vnpm -vInstalar PM2 Instalar PM2 globalmentenpm install pm2 -g Iniciar PM2pm2 start app.js– Iniciar aplicacion con nombrepm2 start app.js --name=\"app_name\" Listar aplicaciones en PM2pm2 listpm2 status Detener aplicacion en PM2pm2 stop app_name_or_id Eliminar aplicacion de PM2pm2 delete app_name_or_id Reiniciar aplicacion en PM2pm2 restart app_name_or_id Habilitar PM2 para iniciar en el arranquepm2 startuppm2 saveConfigurar Nginx para proxy con PM2 Crear archivo de configuracion en /etc/nginx/sites-available/app_namesudo nano /etc/nginx/sites-available/app_name Contenido del archivoserver {     listen 80;     server_name app_name.dev www.app_name.dev;     location / { proxy_pass http://localhost:3000; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection 'upgrade'; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; }} Habilitar el virtual hostsudo ln -s /etc/nginx/sites-available/app_name /etc/nginx/sites-enabled/ Comprobar que la configuración de nginx esta correcta y recargar nginxsudo nginx -tsudo systemctl reload nginxConfigurar PhpMyAdmin para conectarse a servidor AWS RDS Editar archivo de configuracion de phpmyadminsudo nano /etc/phpmyadmin/config.inc.php Agregar las siguientes lineas al archivo$i++;$cfg['Servers'][$i]['host'] = 'RDS Hostname';$cfg['Servers'][$i]['port'] = '3306';$cfg['Servers'][$i]['user'] = 'RDS Username';$cfg['Servers'][$i]['password'] = 'RDS Password';$cfg['Servers'][$i]['socket'] = '';$cfg['Servers'][$i]['connect_type'] = 'tcp';$cfg['Servers'][$i]['extension'] = 'mysqli';$cfg['Servers'][$i]['auth_type'] = 'cookie';" }, { "title": "NextJS 13 - eCommerce App - parte 12", "url": "/posts/NextJS-13-eCommerce-app-parte-12/", "categories": "NextJS", "tags": "javascript, reactjs, nextjs, ecommerce, programacion", "date": "2023-12-01 23:00:00 -0600", "snippet": "Finalizando Esquema en Prisma Instalar npx shadcn-ui@latest add separator Modificar prisma/schema.prisma// This is your Prisma schema file,// learn more about it in the docs: https://pris.ly/d/pr...", "content": "Finalizando Esquema en Prisma Instalar npx shadcn-ui@latest add separator Modificar prisma/schema.prisma// This is your Prisma schema file,// learn more about it in the docs: https://pris.ly/d/prisma-schemagenerator client { provider = \"prisma-client-js\" previewFeatures = [\"fullTextSearch\", \"fullTextIndex\"]}datasource db { provider = \"mysql\" url = env(\"DATABASE_URL\") relationMode = \"foreignKeys\"}model tbl_cursos { id_curso Int @id @default(autoincrement()) uuid String @default(uuid()) id_usuario String titulo String @db.Text descripcion String? @db.Text imagen_url String? @db.Text precio Float? publicado Boolean @default(false) id_categoria Int? categoria tbl_categorias? @relation(fields: [id_categoria], references: [id_categoria]) adjuntos tbl_adjuntos[] compras tbl_compras[] createdAt DateTime @default(now()) updatedAt DateTime @updatedAt @@index([id_categoria]) @@fulltext([titulo])}model tbl_categorias { id_categoria Int @id @default(autoincrement()) uuid String @default(uuid()) nombre String @unique courses tbl_cursos[]}model tbl_adjuntos { id_adjunto Int @id @default(autoincrement()) uuid String @default(uuid()) nombre String url String @db.Text id_curso Int curso tbl_cursos @relation(fields: [id_curso], references: [id_curso], onDelete: Cascade) createdAt DateTime @default(now()) updatedAt DateTime @updatedAt @@index([id_curso])}model tbl_compras { id_compra String @id @default(uuid()) userId String id_curso Int curso tbl_cursos @relation(fields: [id_curso], references: [id_curso], onDelete: Cascade) curso_uuid String createdAt DateTime @default(now()) updatedAt DateTime @updatedAt() @@unique([userId, curso_uuid]) @@index([id_curso])}model tbl_stripe_clientes { id String @id @default(uuid()) userId String @unique stripeCustomerId String @unique createdAt DateTime @default(now()) updatedAt DateTime @updatedAt}Detalle de curso Ejecutar npx prisma generate Ejecutar npx prisma db push Crear app/(dashboard)/(routes)/courses/[uuid]/page.tsximport { Separator } from \"@/components/ui/separator\";import { db } from \"@/lib/db\";import Image from \"next/image\";import { redirect } from \"next/navigation\";import { auth } from \"@clerk/nextjs\";import { CourseEnrollButton } from \"../_components/CourseEnrollButton\";import { File } from \"lucide-react\";import { Button } from \"@/components/ui/button\";const CourseIdPage = async ({ params}: { params: { uuid: string; }}) =&gt; { const course = await db.tbl_cursos.findFirst({ where: { uuid: params.uuid, }, include: { adjuntos: true } }); if (!course) { return redirect(\"/\"); } const purchase = await db.tbl_compras.findUnique({ where: { userId_curso_uuid: { userId: auth().userId!, curso_uuid: course.uuid, } } }); return ( &lt;div&gt; &lt;div className=\"flex flex-col max-w-4xl mx-auto pb-20 m-2\"&gt; &lt;div className=\"relative aspect-video pb-2\"&gt; &lt;Image alt=\"Cover\" fill className=\"object-cover rounded-md\" src={course.imagen_url!} /&gt; &lt;/div&gt; &lt;div&gt; &lt;div className=\"p-4 flex flex-col md:flex-row items-center justify-between\"&gt; &lt;h2 className=\"text-2xl font-semibold mb-2\"&gt; {course.titulo} &lt;/h2&gt; {purchase ? ( &lt;Button disabled={true} size=\"sm\" className=\"w-full md:w-auto\" &gt; Inscrito &lt;/Button&gt; ) : ( &lt;CourseEnrollButton id_curso={course.id_curso} price={course.precio!} /&gt; )} &lt;/div&gt; &lt;Separator /&gt; &lt;div className=\"p-6\"&gt; &lt;p&gt;{course.descripcion!}&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; {purchase &amp;&amp; ( &lt;&gt; {!!course.adjuntos.length &amp;&amp; ( &lt;&gt; &lt;Separator /&gt; &lt;div className=\"p-4 md:flex-row\"&gt; &lt;h2 className=\"text-xl font-semibold mb-2\"&gt; Material extra para el curso &lt;/h2&gt; &lt;div className=\"p-4\"&gt; {course.adjuntos.map((adjunto) =&gt; ( &lt;a href={adjunto.url} target=\"_blank\" key={adjunto.id_adjunto} className=\"flex items-center p-3 w-full bg-sky-100 dark:bg-[#313138] border-sky-200 dark:border-white border dark:text-teal-400 text-sky-700 rounded-md mt-2\" &gt; &lt;File className=\"h-4 w-4 mr-2 flex-shrink-0\" /&gt; &lt;p className=\"text-sm line-clamp-1\"&gt; {adjunto.nombre} &lt;/p&gt; &lt;/a&gt; ))} &lt;/div&gt; &lt;/div&gt; &lt;/&gt; )} &lt;/&gt; )} &lt;/div&gt; &lt;/div&gt; );}export default CourseIdPage; Crear app/(dashboard)/(routes)/courses/_components/CourseEnrollButton.tsx\"use client\";import axios from \"axios\";import { useState } from \"react\";import toast from \"react-hot-toast\";import { Button } from \"@/components/ui/button\";import { formatPrice } from \"@/lib/format\";interface CourseEnrollButtonProps { price: number; id_curso: number;}export const CourseEnrollButton = ({ price, id_curso,}: CourseEnrollButtonProps) =&gt; { const [isLoading, setIsLoading] = useState(false); const onClick = async () =&gt; { try { setIsLoading(true); const response = await axios.post(`/api/courses/${id_curso}/checkout`) window.location.assign(response.data.url); } catch { toast.error(\"Sucedio un error al procesar el pago\"); } finally { setIsLoading(false); } } return ( &lt;Button onClick={onClick} disabled={isLoading} size=\"sm\" className=\"w-full md:w-auto\" &gt; Inscribete por {formatPrice(price)} &lt;/Button&gt; )}Integración con Stripe Crear cuenta en https://stripe.com/ Crear nueva cuenta o Tienda en dashboard de Stripe Acceder a API KEYS FOR DEVELOPERS https://dashboard.stripe.com/test/apikeys Editar archivo .env y pegar Secret api keySTRIPE_API_KEY=sk_test_51OJI1ELlyOAqRjT0cpeFtui2gzhXmi4iSFXo1oemkI0MEpY5MUfwXutYvr38OAEew5146MceIc9qwq00rCfXiO1hNEXT_PUBLIC_APP_URL=http://localhost:3000 Ejecutar npm i stripe Crear lib/stripe.tsimport Stripe from \"stripe\";export const stripe = new Stripe(process.env.STRIPE_API_KEY!, { apiVersion: \"2023-10-16\", typescript: true,}); Crear ruta de cobro en app/api/courses/[courseUuid]/checkout/route.tsimport Stripe from \"stripe\";import { currentUser } from \"@clerk/nextjs\";import { NextResponse } from \"next/server\";import { db } from \"@/lib/db\";import { stripe } from \"@/lib/stripe\";export async function POST( req: Request, { params }: { params: { id_curso: string } }) { try { const user = await currentUser(); if (!user || !user.id || !user.emailAddresses?.[0]?.emailAddress) { return new NextResponse(\"No autorizado\", { status: 401 }); } const course = await db.tbl_cursos.findUnique({ where: { id_curso: parseInt(params.id_curso), publicado: true, } }); const purchase = await db.tbl_compras.findUnique({ where: { userId_curso_uuid: { userId: user.id, curso_uuid: course?.uuid!, } } }); if (purchase) { return new NextResponse(\"Curso adquirido anteriormente\", { status: 400 }); } if (!course) { return new NextResponse(\"No fue encontrado\", { status: 404 }); } const line_items: Stripe.Checkout.SessionCreateParams.LineItem[] = [ { quantity: 1, price_data: { currency: \"USD\", product_data: { name: course.titulo, description: course.descripcion!, }, unit_amount: Math.round(course.precio! * 100), } } ]; let stripeCustomer = await db.tbl_stripe_clientes.findUnique({ where: { userId: user.id, }, select: { stripeCustomerId: true, } }); if (!stripeCustomer) { const customer = await stripe.customers.create({ email: user.emailAddresses[0].emailAddress, }); stripeCustomer = await db.tbl_stripe_clientes.create({ data: { userId: user.id, stripeCustomerId: customer.id, } }); } const session = await stripe.checkout.sessions.create({ customer: stripeCustomer.stripeCustomerId, line_items, mode: 'payment', success_url: `${process.env.NEXT_PUBLIC_APP_URL}/courses/${course.uuid}?success=1`, cancel_url: `${process.env.NEXT_PUBLIC_APP_URL}/courses/${course.uuid}?canceled=1`, metadata: { courseId: course.id_curso, courseUuid: course.uuid, userId: user.id, } }); return NextResponse.json({ url: session.url }); } catch (error) { console.log(\"[COURSE_ID_CHECKOUT]\", error); return new NextResponse(\"Error Interno\", { status: 500 }) }}Stripe Weebhook Habilitar Stripe WeebHook https://dashboard.stripe.com/test/webhooks/create?endpoint_location=local Descargar e instalar CLI https://stripe.com/docs/stripe-cli Iniciar sesión por medio de la cli con stripe login Ejecutar stripe listen --forward-to localhost:3000/api/webhook    Copiar codigo secreto generado y colocarlo en archivo .envSTRIPE_WEBHOOK_SECRET=whsec_9132392357e5e69d9a80a65f187d89448c5efcbe60aa2c9b51e Crear app/api/webhook/route.ts import Stripe from \"stripe\";import { headers } from \"next/headers\";import { NextResponse } from \"next/server\";import { stripe } from \"@/lib/stripe\";import { db } from \"@/lib/db\";export async function POST(req: Request) { const body = await req.text(); const signature = headers().get(\"Stripe-Signature\") as string; let event: Stripe.Event; try { event = stripe.webhooks.constructEvent( body, signature, process.env.STRIPE_WEBHOOK_SECRET! ) } catch (error: any) { return new NextResponse(`Webhook Error: ${error.message}`, { status: 400 }) } const session = event.data.object as Stripe.Checkout.Session; const userId = session?.metadata?.userId; const courseId = session?.metadata?.courseId; const courseUuid = session?.metadata?.courseUuid; if (event.type === \"checkout.session.completed\") { if (!userId || !courseId || !courseUuid ) { return new NextResponse(`Webhook Error: Missing metadata`, { status: 400 }); } await db.tbl_compras.create({ data: { id_curso: parseInt(courseId), curso_uuid: courseUuid, userId: userId, } }); } else { return new NextResponse(`Webhook Error: Unhandled event type ${event.type}`, { status: 200 }) } return new NextResponse(null, { status: 200 });} Editar middleware.tsimport { authMiddleware } from \"@clerk/nextjs\";export default authMiddleware({ publicRoutes: ['/','/api/webhook'],});export const config = { matcher: ['/((?!.+\\\\.[\\\\w]+$|_next).*)', '/', '/(api|trpc)(.*)'],};" }, { "title": "NextJS 13 - eCommerce App - parte 11", "url": "/posts/NextJS-13-eCommerce-app-parte-11/", "categories": "NextJS", "tags": "javascript, reactjs, nextjs, ecommerce, programacion", "date": "2023-11-24 23:00:00 -0600", "snippet": "Landing Page Ejecutar npm i react-type-animation y npm i framer-motion Modificar archivo .envNEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-inNEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-upNEXT_PUBLIC_CLERK_AFTER_SI...", "content": "Landing Page Ejecutar npm i react-type-animation y npm i framer-motion Modificar archivo .envNEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-inNEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-upNEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/studentNEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/student Modificar middleware.tsimport { authMiddleware } from \"@clerk/nextjs\";export default authMiddleware({ publicRoutes: ['/'],});export const config = { matcher: ['/((?!.+\\\\.[\\\\w]+$|_next).*)', '/', '/(api|trpc)(.*)'],}; Crear app/(dashboard)/(routes)/student/page.tsximport {auth, currentUser } from \"@clerk/nextjs\";const StudentPage = async () =&gt; { const user = await currentUser(); return ( &lt;div&gt; &lt;h1&gt;Bienvenido, { user?.firstName + ' ' + user?.lastName}&lt;/h1&gt; &lt;/div&gt; );}export default StudentPage; Editar app/(dashboard)/_components/SidebarRoutes.tsx \"use client\";import { Layout, Compass, List, BarChart } from \"lucide-react\";import { SidebarItem } from \"./SidebarItem\";import { usePathname } from \"next/navigation\";const guestRoutes = [ { icon: Layout, label: \"Dashboard\", href: \"/student\", }, { icon: Compass, label: \"Navegar\", href: \"/search\", }];const teacherRoutes = [ { icon: List, label: \"Cursos\", href: \"/teacher/courses\", }, { icon: BarChart, label: \"Estadisticas\", href: \"/teacher/stadistics\", }];export const SidebarRoutes = () =&gt; { const pathname = usePathname(); const isTeacherPage = pathname?.includes(\"/teacher\"); const routes = isTeacherPage ? teacherRoutes : guestRoutes; return ( &lt;div className=\"flex flex-col w-full\"&gt; {routes.map((route) =&gt; ( &lt;SidebarItem key={route.href} icon={route.icon} label={route.label} href={route.href} /&gt; ))} &lt;/div&gt; )}; Eliminar app/(dashboard)/(routes)/page.tsx Crear components/Logo.tsximport Link from \"next/link\";import Image from \"next/image\";import localFont from \"next/font/local\";import { cn } from \"@/lib/utils\";const headingFont = localFont({ src: \"../public/fonts/font.woff2\",});export const Logo = () =&gt; { return ( &lt;Link href=\"/\"&gt; &lt;div className=\"hover:opacity-75 transition items-center gap-x-2 hidden md:flex\"&gt; &lt;Image src=\"/logo.png\" alt=\"Logo\" height={30} width={30} /&gt; &lt;p className={cn( \"text-lg text-neutral-700 dark:text-white pb-1\", headingFont.className, )}&gt; Academia &lt;/p&gt; &lt;/div&gt; &lt;/Link&gt; );}; Crear app/(landing)/_components/Navbar.tsximport Link from \"next/link\";import { Logo } from \"@/components/Logo\";import { Button } from \"@/components/ui/button\";import { ModeToggle } from \"@/components/mode-toggle\";export const Navbar = () =&gt; { return ( &lt;div className=\"fixed top-0 w-full h-14 px-4 border-b shadow-sm bg-[#ededed] dark:bg-[#1f1f1f] flex items-center\"&gt; &lt;div className=\"md:max-w-screen-2xl mx-auto flex items-center w-full justify-between\"&gt; &lt;Logo /&gt; &lt;div className=\"flex gap-x-8 ml-auto\"&gt; &lt;Button size=\"sm\" variant=\"customghost\" asChild&gt; &lt;Link href=\"/sign-in\"&gt; Iniciar sesión &lt;/Link&gt; &lt;/Button&gt; &lt;Button size=\"sm\" asChild&gt; &lt;Link href=\"/sign-up\"&gt; Registrate gratis &lt;/Link&gt; &lt;/Button&gt; &lt;ModeToggle /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; );}; Crear app/(landing)/_components/Footer.tsximport { Logo } from \"@/components/Logo\";import { Button } from \"@/components/ui/button\";export const Footer = () =&gt; { return ( &lt;div className=\"fixed bottom-0 w-full p-4 border-t bg-[#ededed] dark:bg-[#1f1f1f]\"&gt; &lt;div className=\"md:max-w-screen-2xl mx-auto flex items-center w-full justify-between\"&gt; &lt;Logo /&gt; &lt;div className=\"space-x-4 md:block md:w-auto flex items-center justify-between w-full\"&gt; &lt;Button size=\"sm\" variant=\"ghost\"&gt; Politica de privacidad &lt;/Button&gt; &lt;Button size=\"sm\" variant=\"ghost\"&gt; Terminos de servicio &lt;/Button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; );}; Crear app/(landing)/layout.tsximport { Footer } from \"./_components/Footer\";import { Navbar } from \"./_components/Navbar\";const HomeLayout = ({ children}: { children: React.ReactNode;}) =&gt; { return ( &lt;div className=\"h-full bg-[#eae5e5] dark:bg-[#313138]\"&gt; &lt;Navbar /&gt; &lt;main className=\"pt-40 pb-20\"&gt; {children} &lt;/main&gt; &lt;Footer /&gt; &lt;/div&gt; );};export default HomeLayout; Crear public/fonts descargar en carpeta archivo font.woff2 desde https://github.com/jrguevara/ecommerce-nextjs/tree/main/public/fonts  Crear app/(landing)/page.tsx\"use client\"import Link from \"next/link\";import localFont from \"next/font/local\";import { Poppins } from \"next/font/google\";import { Medal } from \"lucide-react\";import { cn } from \"@/lib/utils\";import { Button } from \"@/components/ui/button\";import Image from \"next/image\";const headingFont = localFont({ src: \"../../public/fonts/font.woff2\"});import { TypeAnimation } from \"react-type-animation\";import { motion } from \"framer-motion\";import { Client } from \"@clerk/nextjs/server\";import { Logo } from \"@/components/Logo\";const textFont = Poppins({ subsets: [\"latin\"], weight: [ \"100\", \"200\", \"300\", \"400\", \"500\", \"600\", \"700\", \"800\", \"900\" ],});const HomePage = () =&gt; { return ( &lt;div className=\"flex items-center justify-center flex-col\"&gt; &lt;div className={cn( \"flex items-center justify-center flex-col\", headingFont.className, )}&gt; &lt;div className=\"flex items-center justify-center p-10\"&gt; &lt;Image src=\"/logo.png\" alt=\"Logo\" height={100} width={100} /&gt; &lt;p className={cn( \"text-6xl text-neutral-700 dark:text-white pb-1\", headingFont.className, )}&gt; Academia &lt;/p&gt; &lt;/div&gt; &lt;div className=\"mb-10 flex items-center border shadow-sm p-4 bg-teal-500 text-sky-700 rounded-full\"&gt; &lt;Medal className=\"h-6 w-6 mr-2\" /&gt; La plataforma de aprendizaje # 1 &lt;/div&gt; &lt;h1 className=\"text-3xl md:text-6xl text-center text-neutral-800 dark:text-white mb-6\"&gt; Hoy quiero aprender a... &lt;/h1&gt; &lt;motion.div initial={ { opacity: 0, scale: 0.5 } } animate={ { opacity: 1, scale: 1 } } transition={ { duration: 0.5 } } className=\"col-span-8 place-self-center text-center sm:text-left justify-self-start\" &gt; &lt;h1 className=\"text-teal-800 dark:text-yellow-500 mb-4 text-4xl sm:text-5xl lg:text-8xl lg:leading-normal font-extrabold\"&gt; &lt;TypeAnimation sequence={[ \"Programar la web\", 1000, \"Crear diseños asombrosos\", 1000, \"Tocar la guitarra\", 1000, \"Aplicar matematicas\", 1000, ]} wrapper=\"span\" speed={50} repeat={Infinity} /&gt; &lt;/h1&gt; &lt;/motion.div&gt; &lt;/div&gt; &lt;div className={cn( \"text-sm md:text-xl text-neutral-600 dark:text-neutral-400 mt-4 max-w-xs md:max-w-2xl text-center mx-auto\", textFont.className, )}&gt; Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. &lt;/div&gt; &lt;Button className=\"mt-6\" size=\"lg\" asChild&gt; &lt;Link href=\"/sign-up\"&gt; Registrarse &lt;/Link&gt; &lt;/Button&gt; &lt;/div&gt; );};export default HomePage; Modificar app/(landing)/_components/Navbar.tsximport Link from \"next/link\";import { Logo } from \"@/components/Logo\";import { Button } from \"@/components/ui/button\";import { ModeToggle } from \"@/components/mode-toggle\";import { auth, UserButton } from \"@clerk/nextjs\";export const Navbar = () =&gt; { const { userId } = auth(); return ( &lt;div className=\"fixed top-0 w-full h-14 px-4 border-b shadow-sm bg-[#ededed] dark:bg-[#1f1f1f] flex items-center\"&gt; &lt;div className=\"md:max-w-screen-2xl mx-auto flex items-center w-full justify-between\"&gt; &lt;Logo /&gt; &lt;div className=\"flex gap-x-8 ml-auto\"&gt; {!userId &amp;&amp; ( &lt;&gt; &lt;Button size=\"sm\" variant=\"customghost\" asChild&gt; &lt;Link href=\"/sign-in\"&gt; Iniciar sesión &lt;/Link&gt; &lt;/Button&gt; &lt;Button size=\"sm\" asChild&gt; &lt;Link href=\"/sign-up\"&gt; Registrate gratis &lt;/Link&gt; &lt;/Button&gt; &lt;/&gt; )} {userId &amp;&amp; ( &lt;Button size=\"sm\" variant=\"customghost\" asChild&gt; &lt;Link href=\"/student\"&gt; Dashboard &lt;/Link&gt; &lt;/Button&gt; )} &lt;UserButton afterSignOutUrl=\"/\" /&gt; &lt;ModeToggle /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; );};" }, { "title": "NextJS 13 - eCommerce App - parte 10", "url": "/posts/NextJS-13-eCommerce-app-parte-10/", "categories": "NextJS", "tags": "javascript, reactjs, nextjs, ecommerce, programacion", "date": "2023-11-19 23:00:00 -0600", "snippet": "Filtro de Categorías Instalar npm i react-icons  y  npm i query-string https://react-icons.github.io/react-icons/icons/fc/ Crear app/(dashboard)/(routes)/search/_components/Categories.tsx \"use c...", "content": "Filtro de Categorías Instalar npm i react-icons  y  npm i query-string https://react-icons.github.io/react-icons/icons/fc/ Crear app/(dashboard)/(routes)/search/_components/Categories.tsx \"use client\";import { tbl_categorias } from \"@prisma/client\";import { FcDepartment, FcMultipleDevices, FcMusic, FcCalculator,} from \"react-icons/fc\";import { IconType } from \"react-icons\";import { CategoryItem } from \"./Category-item\";interface CategoriesProps { items: tbl_categorias[];}const iconMap: Record&lt;tbl_categorias[\"nombre\"], IconType&gt; = { \"Artes y musica\": FcMusic, \"Matematicas y Fisica\": FcCalculator, \"Programacion y TI\": FcMultipleDevices, \"Arquitectura y diseño\": FcDepartment,};export const Categories = ({ items,}: CategoriesProps) =&gt; { return ( &lt;div className=\"flex items-center gap-x-2 overflow-x-auto pb-2 content-between justify-center\"&gt; {items.map((item) =&gt; ( &lt;CategoryItem key={item.uuid} label={item.nombre} icon={iconMap[item.nombre]} value={item.uuid} /&gt; ))} &lt;/div&gt; )} Crear app/(dashboard)/(routes)/search/_components/Category-item.tsx \"use client\";import qs from \"query-string\";import { IconType } from \"react-icons\";import { usePathname, useRouter, useSearchParams} from \"next/navigation\";import { cn } from \"@/lib/utils\";interface CategoryItemProps { label: string; value?: string; icon?: IconType;};export const CategoryItem = ({ label, value, icon: Icon,}: CategoryItemProps) =&gt; { const pathname = usePathname(); const router = useRouter(); const searchParams = useSearchParams(); const currentCategoryId = searchParams.get(\"category\"); const currentTitle = searchParams.get(\"title\"); const isSelected = currentCategoryId === value; const onClick = () =&gt; { const url = qs.stringifyUrl({ url: pathname, query: { title: currentTitle, category: isSelected ? null : value, } }, { skipNull: true, skipEmptyString: true }); router.push(url); }; return ( &lt;button onClick={onClick} className={cn( \"py-2 px-3 text-sm border border-slate-200 rounded-full flex items-center gap-x-1 hover:border-sky-500 transition\", isSelected &amp;&amp; \"border-sky-600 bg-teal-600 text-white dark:bg-yellow-500 dark:text-black dark:border-red-900\" )} type=\"button\" &gt; {Icon &amp;&amp; &lt;Icon size={20} /&gt;} &lt;div className=\"truncate\"&gt; {label} &lt;/div&gt; &lt;/button&gt; )} Editar app/(dashboard)/(routes)/search/page.tsximport { db } from \"@/lib/db\";import { Categories } from \"./_components/Categories\";interface SearchPageProps { searchParams: { title: string; categoryId: string; }};const SearchPage = async () =&gt; { const categories = await db.tbl_categorias.findMany({ orderBy: { nombre: \"asc\" } }); return ( &lt;&gt; &lt;div className=\"p-6 space-y-4\"&gt; &lt;Categories items={categories} /&gt; &lt;/div&gt; &lt;/&gt; );}export default SearchPage;Búsqueda Crear hooks/use-debounce.tsimport { useEffect, useState } from \"react\";export function useDebounce&lt;T&gt;(value: T, delay?: number): T { const [debouncedValue, setDebouncedValue] = useState&lt;T&gt;(value); useEffect(() =&gt; { const timer = setTimeout(() =&gt; { setDebouncedValue(value) }, delay || 500); return () =&gt; { clearTimeout(timer); } }, [value, delay]); return debouncedValue;}; Crear components/SearchInput.tsx\"use client\";import qs from \"query-string\";import { Search } from \"lucide-react\";import { useEffect, useState } from \"react\";import { useSearchParams, useRouter, usePathname } from \"next/navigation\";import { Input } from \"@/components/ui/input\";import { useDebounce } from \"@/hooks/use-debounce\";export const SearchInput = () =&gt; { const [value, setValue] = useState(\"\") const debouncedValue = useDebounce(value); const searchParams = useSearchParams(); const router = useRouter(); const pathname = usePathname(); const currentCategoryId = searchParams.get(\"categoryId\"); useEffect(() =&gt; { const url = qs.stringifyUrl({ url: pathname, query: { categoryId: currentCategoryId, title: debouncedValue, } }, { skipEmptyString: true, skipNull: true }); router.push(url); }, [debouncedValue, currentCategoryId, router, pathname]) return ( &lt;div className=\"relative\"&gt; &lt;Search className=\"h-4 w-4 absolute top-3 left-3 text-slate-600\" /&gt; &lt;Input onChange={(e) =&gt; setValue(e.target.value)} value={value} className=\"w-full md:w-[300px] pl-9 rounded-full\" placeholder=\"Buscar cursos...\" /&gt; &lt;/div&gt; )} Editar components/NavbarRoutes.tsx\"use client\";import { UserButton } from \"@clerk/nextjs\";import { ModeToggle } from \"@/components/mode-toggle\";import { Button } from \"@/components/ui/button\";import { LogOut, Search } from \"lucide-react\";import { usePathname } from \"next/navigation\";import Link from \"next/link\";import { SearchInput } from \"@/components/SearchInput\";export const NavbarRoutes = () =&gt; { const pathname = usePathname(); const isTeacherPage = pathname?.startsWith(\"/teacher\"); const isPlayerPage = pathname?.includes(\"/chapter\"); const isSearchPage = pathname === \"/search\"; return ( &lt;&gt; {isSearchPage &amp;&amp; ( &lt;div className=\"hidden md:block\"&gt; &lt;SearchInput /&gt; &lt;/div&gt; )} &lt;div className=\"flex gap-x-8 ml-auto\"&gt; {isTeacherPage || isPlayerPage ? ( &lt;Link href=\"/\"&gt; &lt;Button size=\"sm\" variant='customghost'&gt; &lt;LogOut className=\"h-4 w-4 mr-2\" /&gt; Salir &lt;/Button&gt; &lt;/Link&gt; ) : ( &lt;Link href=\"/teacher/courses\"&gt; &lt;Button size=\"sm\" variant='customghost'&gt; Modo Profesor &lt;/Button&gt; &lt;/Link&gt; )} &lt;UserButton afterSignOutUrl=\"/\" /&gt; &lt;ModeToggle /&gt; &lt;/div&gt; &lt;/&gt; );} Editar app/(dashboard)/(routes)/search/page.tsx para mostrar en vista movílimport { db } from \"@/lib/db\";import { Categories } from \"./_components/Categories\";import { SearchInput } from \"@/components/SearchInput\";interface SearchPageProps { searchParams: { title: string; categoryId: string; }};const SearchPage = async () =&gt; { const categories = await db.tbl_categorias.findMany({ orderBy: { nombre: \"asc\" } }); return ( &lt;&gt; &lt;div className=\"px-6 pt-6 md:hidden md:mb-0 block\"&gt; &lt;SearchInput /&gt; &lt;/div&gt; &lt;div className=\"p-6 space-y-4\"&gt; &lt;Categories items={categories} /&gt; &lt;/div&gt; &lt;/&gt; );}export default SearchPage;Listado de Cursos Modificar prisma/schema.prisma// This is your Prisma schema file,// learn more about it in the docs: https://pris.ly/d/prisma-schemagenerator client { provider = \"prisma-client-js\" previewFeatures = [\"fullTextSearch\", \"fullTextIndex\"]}datasource db { provider = \"mysql\" url = env(\"DATABASE_URL\") relationMode = \"foreignKeys\"}model tbl_cursos { id_curso Int @id @default(autoincrement()) uuid String @default(uuid()) id_usuario String titulo String @db.Text descripcion String? @db.Text imagen_url String? @db.Text precio Float? publicado Boolean @default(false) id_categoria Int? categoria tbl_categorias? @relation(fields: [id_categoria], references: [id_categoria]) adjuntos tbl_adjuntos[] createdAt DateTime @default(now()) updatedAt DateTime @updatedAt @@index([id_categoria]) @@fulltext([titulo])}model tbl_categorias { id_categoria Int @id @default(autoincrement()) uuid String @default(uuid()) nombre String @unique courses tbl_cursos[]}model tbl_adjuntos { id_adjunto Int @id @default(autoincrement()) uuid String @default(uuid()) nombre String url String @db.Text id_curso Int curso tbl_cursos @relation(fields: [id_curso], references: [id_curso], onDelete: Cascade) createdAt DateTime @default(now()) updatedAt DateTime @updatedAt @@index([id_curso])} Ejecutar npx prisma generate Ejecutar npx prisma db push Crear actions/get-courses.tsximport { tbl_categorias, tbl_cursos } from \"@prisma/client\";import { db } from \"@/lib/db\";type CourseWithCategory = tbl_cursos &amp; { categoria: tbl_categorias | null;};type GetCourses = { userId: string; title?: string; category?: string;};export const getCourses = async ({ userId, title, category}: GetCourses): Promise&lt;CourseWithCategory[]&gt; =&gt; { try { const categoria = await db.tbl_categorias.findFirst({ where: { uuid: category, }, }); const courses = await db.tbl_cursos.findMany({ where: { publicado: true, titulo: { contains: title, }, id_categoria: category ? categoria?.id_categoria : undefined, }, include: { categoria: true, }, orderBy: { createdAt: \"desc\", } }); const coursesList: CourseWithCategory[] = await Promise.all( courses.map(async course =&gt; { return { ...course } }) ); return coursesList; } catch (error) { console.log(\"[GET_COURSES]\", error); return []; }} Crear components/CourseCard.tsximport Image from \"next/image\";import Link from \"next/link\";import { formatPrice } from \"@/lib/format\";interface CourseCardProps { id: string; title: string; imageUrl: string; price: number; category: string;};export const CourseCard = ({ id, title, imageUrl, price, category}: CourseCardProps) =&gt; { return ( &lt;Link href={`/courses/${id}`}&gt; &lt;div className=\"group hover:shadow-sm transition overflow-hidden border rounded-lg p-3 h-full bg-white dark:bg-black\"&gt; &lt;div className=\"relative w-full aspect-video rounded-md overflow-hidden\"&gt; &lt;Image fill className=\"object-cover\" alt={title} src={imageUrl} /&gt; &lt;/div&gt; &lt;div className=\"flex flex-col pt-2\"&gt; &lt;div className=\"text-lg md:text-base font-medium group-hover:text-sky-700 dark:group-hover:text-yellow-500 transition line-clamp-2\"&gt; {title} &lt;/div&gt; &lt;p className=\"text-xs text-muted-foreground\"&gt; {category} &lt;/p&gt; &lt;p className=\"text-md md:text-sm font-medium text-slate-700\"&gt; {formatPrice(price)} &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/Link&gt; )} Crear components/CoursesList.tsximport { tbl_categorias, tbl_cursos } from \"@prisma/client\";import { CourseCard } from \"./CourseCard\";type CourseWithCategory = tbl_cursos &amp; { categoria: tbl_categorias | null;};interface CoursesListProps { items: CourseWithCategory[];}export const CoursesList = ({ items}: CoursesListProps) =&gt; { return ( &lt;div&gt; &lt;div className=\"grid sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-4 gap-4\"&gt; {items.map((item) =&gt; ( &lt;CourseCard key={item.uuid} id={item.uuid} title={item.titulo!} imageUrl={item.imagen_url!} price={item.precio!} category={item?.categoria?.nombre!} /&gt; ))} &lt;/div&gt; {items.length === 0 &amp;&amp; ( &lt;div className=\"text-center text-sm text-muted-foreground mt-10\"&gt; No courses found &lt;/div&gt; )} &lt;/div&gt; )} Modificar app/(dashboard)/(routes)/search/page.tsximport { db } from \"@/lib/db\";import { Categories } from \"./_components/Categories\";import { SearchInput } from \"@/components/SearchInput\";import { getCourses } from \"@/actions/get-courses\";import { auth } from \"@clerk/nextjs\";import { redirect } from \"next/navigation\";import { CoursesList } from \"@/components/CoursesList\";interface SearchPageProps { searchParams: { title: string; categoryId: string; }};const SearchPage = async ({ searchParams}: SearchPageProps) =&gt; { const { userId } = auth(); if (!userId) { return redirect(\"/\"); } const categories = await db.tbl_categorias.findMany({ orderBy: { nombre: \"asc\" } }); const courses = await getCourses({ userId, ...searchParams, }); return ( &lt;&gt; &lt;div className=\"px-6 pt-6 md:hidden md:mb-0 block\"&gt; &lt;SearchInput /&gt; &lt;/div&gt; &lt;div className=\"p-6 space-y-4\"&gt; &lt;Categories items={categories} /&gt; &lt;CoursesList items={courses} /&gt; &lt;/div&gt; &lt;/&gt; );}export default SearchPage;" }, { "title": "NextJS 13 - eCommerce App - parte 9", "url": "/posts/NextJS-13-eCommerce-app-parte-9/", "categories": "NextJS", "tags": "javascript, reactjs, nextjs, ecommerce, programacion", "date": "2023-11-09 23:00:00 -0600", "snippet": "DataTable https://ui.shadcn.com/docs/components/data-table Ejecutar npx shadcn-ui@latest add table , npm install @tanstack/react-table y npx shadcn-ui@latest add badge Crear app/(dashboard...", "content": "DataTable https://ui.shadcn.com/docs/components/data-table Ejecutar npx shadcn-ui@latest add table , npm install @tanstack/react-table y npx shadcn-ui@latest add badge Crear app/(dashboard)/(routes)/teacher/courses/_components/columns.tsx\"use client\"import { ColumnDef } from \"@tanstack/react-table\"// This type is used to define the shape of our data.// You can use a Zod schema here if you want.export type Payment = { id: string amount: number status: \"pending\" | \"processing\" | \"success\" | \"failed\" email: string}export const columns: ColumnDef&lt;Payment&gt;[] = [ { accessorKey: \"status\", header: \"Status\", }, { accessorKey: \"email\", header: \"Email\", }, { accessorKey: \"amount\", header: \"Amount\", },] Crear app/(dashboard)/(routes)/teacher/courses/_components/data-table.tsx\"use client\"import { ColumnDef, flexRender, getCoreRowModel, useReactTable,} from \"@tanstack/react-table\"import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow,} from \"@/components/ui/table\"interface DataTableProps&lt;TData, TValue&gt; { columns: ColumnDef&lt;TData, TValue&gt;[] data: TData[]}export function DataTable&lt;TData, TValue&gt;({ columns, data,}: DataTableProps&lt;TData, TValue&gt;) { const table = useReactTable({ data, columns, getCoreRowModel: getCoreRowModel(), }) return ( &lt;div className=\"rounded-md border-2 border-t-black border-b-black dark:border-t-white dark:border-b-white bg-white dark:bg-black\"&gt; &lt;Table&gt; &lt;TableHeader&gt; {table.getHeaderGroups().map((headerGroup) =&gt; ( &lt;TableRow key={headerGroup.id}&gt; {headerGroup.headers.map((header) =&gt; { return ( &lt;TableHead key={header.id}&gt; {header.isPlaceholder ? null : flexRender( header.column.columnDef.header, header.getContext() )} &lt;/TableHead&gt; ) })} &lt;/TableRow&gt; ))} &lt;/TableHeader&gt; &lt;TableBody&gt; {table.getRowModel().rows?.length ? ( table.getRowModel().rows.map((row) =&gt; ( &lt;TableRow key={row.id} data-state={row.getIsSelected() &amp;&amp; \"selected\"} &gt; {row.getVisibleCells().map((cell) =&gt; ( &lt;TableCell key={cell.id}&gt; {flexRender(cell.column.columnDef.cell, cell.getContext())} &lt;/TableCell&gt; ))} &lt;/TableRow&gt; )) ) : ( &lt;TableRow&gt; &lt;TableCell colSpan={columns.length} className=\"h-24 text-center\"&gt; No results. &lt;/TableCell&gt; &lt;/TableRow&gt; )} &lt;/TableBody&gt; &lt;/Table&gt; &lt;/div&gt; )} Editar app/(dashboard)/(routes)/teacher/courses/page.tsx import { Button } from \"@/components/ui/button\";import Link from \"next/link\";import { DataTable } from \"./_components/data-table\";import { columns } from \"./_components/columns\";async function getData(): Promise&lt;any[]&gt; { // Fetch data from your API here. return [ { id: \"728ed52f\", amount: 100, status: \"pending\", email: \"m@example.com\", }, // ... ]}const CoursesPage = async () =&gt; { const data = await getData(); return ( &lt;div className=\"p-6\"&gt; &lt;Link href=\"/teacher/create\"&gt; &lt;Button&gt; Crear curso &lt;/Button&gt; &lt;/Link&gt; &lt;DataTable columns={columns} data={data} /&gt; &lt;/div&gt; );}export default CoursesPage; Ejecutar la aplicación para ver los datos en la datatable Editar app/(dashboard)/(routes)/teacher/courses/_components/columns.tsx\"use client\"import { tbl_cursos } from \"@prisma/client\"import { ColumnDef } from \"@tanstack/react-table\"export const columns: ColumnDef&lt;tbl_cursos&gt;[] = [ { accessorKey: \"titulo\", header: \"Titulo\", }, { accessorKey: \"categoria.nombre\", header: \"Categoria\", }, { accessorKey: \"precio\", header: \"Precio\", }, { accessorKey: \"publicado\", header: \"Publicado\", },] Editar app/(dashboard)/(routes)/teacher/courses/page.tsx import { DataTable } from \"./_components/data-table\";import { columns } from \"./_components/columns\";import { auth } from \"@clerk/nextjs\";import { redirect } from \"next/navigation\";import { db } from \"@/lib/db\";const CoursesPage = async () =&gt; { const { userId } = auth(); if (!userId) { return redirect(\"/\"); } const courses = await db.tbl_cursos.findMany({ where: { id_usuario: userId }, orderBy: { createdAt: \"desc\", }, include: { categoria: true } }); return ( &lt;div className=\"p-6\"&gt; &lt;div className=\"mt-6 border-2 bg-[#cfcfcf] dark:bg-[#1f1f1f] rounded-md p-4 border-solid\"&gt; &lt;DataTable columns={columns} data={courses} /&gt; &lt;/div&gt; &lt;/div&gt; );}export default CoursesPage; Agregar paginación, editar app/(dashboard)/(routes)/teacher/courses/_components/data-table.tsx \"use client\"import { Button } from \"@/components/ui/button\"import { ColumnDef, flexRender, getCoreRowModel, getPaginationRowModel, useReactTable,} from \"@tanstack/react-table\"import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow,} from \"@/components/ui/table\"interface DataTableProps&lt;TData, TValue&gt; { columns: ColumnDef&lt;TData, TValue&gt;[] data: TData[]}export function DataTable&lt;TData, TValue&gt;({ columns, data,}: DataTableProps&lt;TData, TValue&gt;) { const table = useReactTable({ data, columns, getCoreRowModel: getCoreRowModel(), getPaginationRowModel: getPaginationRowModel(), }) return ( &lt;div&gt; &lt;div className=\"rounded-md border\"&gt; &lt;Table&gt; &lt;TableHeader&gt; {table.getHeaderGroups().map((headerGroup) =&gt; ( &lt;TableRow key={headerGroup.id}&gt; {headerGroup.headers.map((header) =&gt; { return ( &lt;TableHead key={header.id}&gt; {header.isPlaceholder ? null : flexRender( header.column.columnDef.header, header.getContext() )} &lt;/TableHead&gt; ) })} &lt;/TableRow&gt; ))} &lt;/TableHeader&gt; &lt;TableBody&gt; {table.getRowModel().rows?.length ? ( table.getRowModel().rows.map((row) =&gt; ( &lt;TableRow key={row.id} data-state={row.getIsSelected() &amp;&amp; \"selected\"} &gt; {row.getVisibleCells().map((cell) =&gt; ( &lt;TableCell key={cell.id}&gt; {flexRender(cell.column.columnDef.cell, cell.getContext())} &lt;/TableCell&gt; ))} &lt;/TableRow&gt; )) ) : ( &lt;TableRow&gt; &lt;TableCell colSpan={columns.length} className=\"h-24 text-center\"&gt; No results. &lt;/TableCell&gt; &lt;/TableRow&gt; )} &lt;/TableBody&gt; &lt;/Table&gt; &lt;/div&gt; &lt;div className=\"flex items-center justify-end space-x-2 py-4\"&gt; &lt;Button variant=\"outline\" size=\"sm\" onClick={() =&gt; table.previousPage()} disabled={!table.getCanPreviousPage()} &gt; Previous &lt;/Button&gt; &lt;Button variant=\"outline\" size=\"sm\" onClick={() =&gt; table.nextPage()} disabled={!table.getCanNextPage()} &gt; Next &lt;/Button&gt; &lt;/div&gt; &lt;/div&gt; )} Agregar re-ordenamiento en cabeceras de las columnas, editar app/(dashboard)/(routes)/teacher/courses/_components/data-table.tsx \"use client\"import { Button } from \"@/components/ui/button\";import * as React from \"react\";import { ColumnDef, SortingState, flexRender, getCoreRowModel, getPaginationRowModel, getSortedRowModel, useReactTable,} from \"@tanstack/react-table\"import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow,} from \"@/components/ui/table\"interface DataTableProps&lt;TData, TValue&gt; { columns: ColumnDef&lt;TData, TValue&gt;[] data: TData[]}export function DataTable&lt;TData, TValue&gt;({ columns, data,}: DataTableProps&lt;TData, TValue&gt;) { const [sorting, setSorting] = React.useState&lt;SortingState&gt;([]) const table = useReactTable({ data, columns, getCoreRowModel: getCoreRowModel(), getPaginationRowModel: getPaginationRowModel(), onSortingChange: setSorting, getSortedRowModel: getSortedRowModel(), state: { sorting, }, }) return ( &lt;div&gt; &lt;div className=\"rounded-md border-2 border-t-black border-b-black dark:border-t-white dark:border-b-white bg-white dark:bg-black\"&gt; &lt;Table&gt; &lt;TableHeader&gt; {table.getHeaderGroups().map((headerGroup) =&gt; ( &lt;TableRow key={headerGroup.id}&gt; {headerGroup.headers.map((header) =&gt; { return ( &lt;TableHead key={header.id}&gt; {header.isPlaceholder ? null : flexRender( header.column.columnDef.header, header.getContext() )} &lt;/TableHead&gt; ) })} &lt;/TableRow&gt; ))} &lt;/TableHeader&gt; &lt;TableBody&gt; {table.getRowModel().rows?.length ? ( table.getRowModel().rows.map((row) =&gt; ( &lt;TableRow key={row.id} data-state={row.getIsSelected() &amp;&amp; \"selected\"} &gt; {row.getVisibleCells().map((cell) =&gt; ( &lt;TableCell key={cell.id}&gt; {flexRender(cell.column.columnDef.cell, cell.getContext())} &lt;/TableCell&gt; ))} &lt;/TableRow&gt; )) ) : ( &lt;TableRow&gt; &lt;TableCell colSpan={columns.length} className=\"h-24 text-center\"&gt; No results. &lt;/TableCell&gt; &lt;/TableRow&gt; )} &lt;/TableBody&gt; &lt;/Table&gt; &lt;/div&gt; &lt;div className=\"flex items-center justify-end space-x-2 py-4\"&gt; &lt;Button variant=\"outline\" size=\"sm\" onClick={() =&gt; table.previousPage()} disabled={!table.getCanPreviousPage()} &gt; Previous &lt;/Button&gt; &lt;Button variant=\"outline\" size=\"sm\" onClick={() =&gt; table.nextPage()} disabled={!table.getCanNextPage()} &gt; Next &lt;/Button&gt; &lt;/div&gt; &lt;/div&gt; )} Editar app/(dashboard)/(routes)/teacher/courses/_components/columns.tsx\"use client\"import { Button } from \"@/components/ui/button\"import { tbl_cursos } from \"@prisma/client\"import { ColumnDef } from \"@tanstack/react-table\"import { ArrowUpDown, MoreHorizontal } from \"lucide-react\"export const columns: ColumnDef&lt;tbl_cursos&gt;[] = [ { accessorKey: \"titulo\", header: ({ column }) =&gt; { return ( &lt;Button variant=\"customghost\" onClick={() =&gt; column.toggleSorting(column.getIsSorted() === \"asc\")} &gt; Titulo &lt;ArrowUpDown className=\"ml-2 h-4 w-4\" /&gt; &lt;/Button&gt; ) }, }, { accessorKey: \"categoria.nombre\", header: ({ column }) =&gt; { return ( &lt;Button variant=\"customghost\" onClick={() =&gt; column.toggleSorting(column.getIsSorted() === \"asc\")} &gt; Categoria &lt;ArrowUpDown className=\"ml-2 h-4 w-4\" /&gt; &lt;/Button&gt; ) }, }, { accessorKey: \"precio\", header: ({ column }) =&gt; { return ( &lt;Button variant=\"customghost\" onClick={() =&gt; column.toggleSorting(column.getIsSorted() === \"asc\")} &gt; Precio &lt;ArrowUpDown className=\"ml-2 h-4 w-4\" /&gt; &lt;/Button&gt; ) }, }, { accessorKey: \"publicado\", header: ({ column }) =&gt; { return ( &lt;Button variant=\"customghost\" onClick={() =&gt; column.toggleSorting(column.getIsSorted() === \"asc\")} &gt; Publicado &lt;ArrowUpDown className=\"ml-2 h-4 w-4\" /&gt; &lt;/Button&gt; ) }, },] Agregar Acciones, editar app/(dashboard)/(routes)/teacher/courses/_components/columns.tsx \"use client\"import { Button } from \"@/components/ui/button\"import { tbl_cursos } from \"@prisma/client\"import { ColumnDef } from \"@tanstack/react-table\"import { ArrowUpDown, MoreHorizontal, Pencil } from \"lucide-react\"import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger,} from \"@/components/ui/dropdown-menu\";import Link from \"next/link\"export const columns: ColumnDef&lt;tbl_cursos&gt;[] = [ { accessorKey: \"titulo\", header: ({ column }) =&gt; { return ( &lt;Button variant=\"customghost\" onClick={() =&gt; column.toggleSorting(column.getIsSorted() === \"asc\")} &gt; Titulo &lt;ArrowUpDown className=\"ml-2 h-4 w-4\" /&gt; &lt;/Button&gt; ) }, }, { accessorKey: \"categoria.nombre\", header: ({ column }) =&gt; { return ( &lt;Button variant=\"customghost\" onClick={() =&gt; column.toggleSorting(column.getIsSorted() === \"asc\")} &gt; Categoria &lt;ArrowUpDown className=\"ml-2 h-4 w-4\" /&gt; &lt;/Button&gt; ) }, }, { accessorKey: \"precio\", header: ({ column }) =&gt; { return ( &lt;Button variant=\"customghost\" onClick={() =&gt; column.toggleSorting(column.getIsSorted() === \"asc\")} &gt; Precio &lt;ArrowUpDown className=\"ml-2 h-4 w-4\" /&gt; &lt;/Button&gt; ) }, }, { accessorKey: \"publicado\", header: ({ column }) =&gt; { return ( &lt;Button variant=\"customghost\" onClick={() =&gt; column.toggleSorting(column.getIsSorted() === \"asc\")} &gt; Publicado &lt;ArrowUpDown className=\"ml-2 h-4 w-4\" /&gt; &lt;/Button&gt; ) }, }, { id: \"actions\", header: \"Acciones\", cell: ({ row }) =&gt; { const { uuid, titulo } = row.original; return ( &lt;DropdownMenu&gt; &lt;DropdownMenuTrigger asChild&gt; &lt;Button variant=\"ghost\" className=\"h-8 w-8 p-0\"&gt; &lt;span className=\"sr-only\"&gt;Open menu&lt;/span&gt; &lt;MoreHorizontal className=\"h-4 w-4\" /&gt; &lt;/Button&gt; &lt;/DropdownMenuTrigger&gt; &lt;DropdownMenuContent align=\"end\"&gt; &lt;DropdownMenuLabel&gt;Acciones&lt;/DropdownMenuLabel&gt; &lt;DropdownMenuSeparator /&gt; &lt;Link href={`/teacher/courses/${uuid}`}&gt; &lt;DropdownMenuItem&gt; &lt;Pencil className=\"h-4 w-4 mr-2\" /&gt; Editar Curso &lt;/DropdownMenuItem&gt; &lt;/Link&gt; &lt;DropdownMenuItem onClick={() =&gt; navigator.clipboard.writeText(uuid)} &gt; Copiar UUID del curso &lt;/DropdownMenuItem&gt; &lt;DropdownMenuItem onClick={() =&gt; navigator.clipboard.writeText(titulo)} &gt; Copiar Titulo del curso &lt;/DropdownMenuItem&gt; &lt;/DropdownMenuContent&gt; &lt;/DropdownMenu&gt; ) }, },] Formatear columnas de precio y publicado, editar app/(dashboard)/(routes)/teacher/courses/_components/columns.tsx \"use client\"import { Button } from \"@/components/ui/button\"import { tbl_cursos } from \"@prisma/client\"import { ColumnDef } from \"@tanstack/react-table\"import { ArrowUpDown, MoreHorizontal, Pencil } from \"lucide-react\"import { Badge } from \"@/components/ui/badge\";import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger,} from \"@/components/ui/dropdown-menu\";import Link from \"next/link\"import { cn } from \"@/lib/utils\"export const columns: ColumnDef&lt;tbl_cursos&gt;[] = [ { accessorKey: \"titulo\", header: ({ column }) =&gt; { return ( &lt;Button variant=\"customghost\" onClick={() =&gt; column.toggleSorting(column.getIsSorted() === \"asc\")} &gt; Titulo &lt;ArrowUpDown className=\"ml-2 h-4 w-4\" /&gt; &lt;/Button&gt; ) }, }, { accessorKey: \"categoria.nombre\", header: ({ column }) =&gt; { return ( &lt;Button variant=\"customghost\" onClick={() =&gt; column.toggleSorting(column.getIsSorted() === \"asc\")} &gt; Categoria &lt;ArrowUpDown className=\"ml-2 h-4 w-4\" /&gt; &lt;/Button&gt; ) }, }, { accessorKey: \"precio\", header: ({ column }) =&gt; { return ( &lt;Button variant=\"customghost\" onClick={() =&gt; column.toggleSorting(column.getIsSorted() === \"asc\")} &gt; Precio &lt;ArrowUpDown className=\"ml-2 h-4 w-4\" /&gt; &lt;/Button&gt; ) }, cell: ({ row }) =&gt; { const price = parseFloat(row.getValue(\"precio\") || \"0\"); const formatted = new Intl.NumberFormat(\"en-US\", { style: \"currency\", currency: \"USD\" }).format(price); return &lt;div&gt;{formatted}&lt;/div&gt; } }, { accessorKey: \"publicado\", header: ({ column }) =&gt; { return ( &lt;Button variant=\"customghost\" onClick={() =&gt; column.toggleSorting(column.getIsSorted() === \"asc\")} &gt; Publicado &lt;ArrowUpDown className=\"ml-2 h-4 w-4\" /&gt; &lt;/Button&gt; ) }, cell: ({ row }) =&gt; { const isPublished = row.getValue(\"publicado\") || false; return ( &lt;Badge className={cn( \"bg-sky-500 text-black\", isPublished &amp;&amp; \"bg-green-600 text-black\" )}&gt; {isPublished ? \"Publicado\" : \"Borrador\"} &lt;/Badge&gt; ) } }, { id: \"actions\", header: \"Acciones\", cell: ({ row }) =&gt; { const { uuid, titulo } = row.original; return ( &lt;DropdownMenu&gt; &lt;DropdownMenuTrigger asChild&gt; &lt;Button variant=\"ghost\" className=\"h-8 w-8 p-0\"&gt; &lt;span className=\"sr-only\"&gt;Open menu&lt;/span&gt; &lt;MoreHorizontal className=\"h-4 w-4\" /&gt; &lt;/Button&gt; &lt;/DropdownMenuTrigger&gt; &lt;DropdownMenuContent align=\"end\"&gt; &lt;DropdownMenuLabel&gt;Acciones&lt;/DropdownMenuLabel&gt; &lt;DropdownMenuSeparator /&gt; &lt;Link href={`/teacher/courses/${uuid}`}&gt; &lt;DropdownMenuItem&gt; &lt;Pencil className=\"h-4 w-4 mr-2\" /&gt; Editar Curso &lt;/DropdownMenuItem&gt; &lt;/Link&gt; &lt;DropdownMenuItem onClick={() =&gt; navigator.clipboard.writeText(uuid)} &gt; Copiar UUID del curso &lt;/DropdownMenuItem&gt; &lt;DropdownMenuItem onClick={() =&gt; navigator.clipboard.writeText(titulo)} &gt; Copiar Titulo del curso &lt;/DropdownMenuItem&gt; &lt;/DropdownMenuContent&gt; &lt;/DropdownMenu&gt; ) }, },] Agregar busqueda y posicionar boton de Crear Curso, editar app/(dashboard)/(routes)/teacher/courses/_components/data-table.tsx \"use client\"import { Button } from \"@/components/ui/button\";import { Input } from \"@/components/ui/input\"import * as React from \"react\";import Link from \"next/link\"import { ColumnDef, ColumnFiltersState, SortingState, flexRender, getCoreRowModel, getFilteredRowModel, getPaginationRowModel, getSortedRowModel, useReactTable,} from \"@tanstack/react-table\"import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow,} from \"@/components/ui/table\"import { PlusCircle } from \"lucide-react\";interface DataTableProps&lt;TData, TValue&gt; { columns: ColumnDef&lt;TData, TValue&gt;[] data: TData[]}export function DataTable&lt;TData, TValue&gt;({ columns, data,}: DataTableProps&lt;TData, TValue&gt;) { const [sorting, setSorting] = React.useState&lt;SortingState&gt;([]) const [columnFilters, setColumnFilters] = React.useState&lt;ColumnFiltersState&gt;( [] ) const table = useReactTable({ data, columns, getCoreRowModel: getCoreRowModel(), getPaginationRowModel: getPaginationRowModel(), onSortingChange: setSorting, getSortedRowModel: getSortedRowModel(), onColumnFiltersChange: setColumnFilters, getFilteredRowModel: getFilteredRowModel(), state: { sorting, columnFilters, }, }) return ( &lt;div&gt; &lt;div className=\"flex items-center py-4 justify-between\"&gt; &lt;Input placeholder=\"Buscar...\" value={(table.getColumn(\"titulo\")?.getFilterValue() as string) ?? \"\"} onChange={(event) =&gt; table.getColumn(\"titulo\")?.setFilterValue(event.target.value) } className=\"max-w-sm\" /&gt; &lt;Link href=\"/teacher/create\"&gt; &lt;Button&gt; &lt;PlusCircle className=\"h-4 w-4 mr-2\" /&gt; Crear curso &lt;/Button&gt; &lt;/Link&gt; &lt;/div&gt; &lt;div className=\"rounded-md border-2 border-t-black border-b-black dark:border-t-white dark:border-b-white bg-white dark:bg-black\"&gt; &lt;Table&gt; &lt;TableHeader&gt; {table.getHeaderGroups().map((headerGroup) =&gt; ( &lt;TableRow key={headerGroup.id}&gt; {headerGroup.headers.map((header) =&gt; { return ( &lt;TableHead key={header.id}&gt; {header.isPlaceholder ? null : flexRender( header.column.columnDef.header, header.getContext() )} &lt;/TableHead&gt; ) })} &lt;/TableRow&gt; ))} &lt;/TableHeader&gt; &lt;TableBody&gt; {table.getRowModel().rows?.length ? ( table.getRowModel().rows.map((row) =&gt; ( &lt;TableRow key={row.id} data-state={row.getIsSelected() &amp;&amp; \"selected\"} &gt; {row.getVisibleCells().map((cell) =&gt; ( &lt;TableCell key={cell.id}&gt; {flexRender(cell.column.columnDef.cell, cell.getContext())} &lt;/TableCell&gt; ))} &lt;/TableRow&gt; )) ) : ( &lt;TableRow&gt; &lt;TableCell colSpan={columns.length} className=\"h-24 text-center\"&gt; No results. &lt;/TableCell&gt; &lt;/TableRow&gt; )} &lt;/TableBody&gt; &lt;/Table&gt; &lt;/div&gt; &lt;div className=\"flex items-center justify-end space-x-2 py-4\"&gt; &lt;Button variant=\"outline\" size=\"sm\" onClick={() =&gt; table.previousPage()} disabled={!table.getCanPreviousPage()} &gt; Previous &lt;/Button&gt; &lt;Button variant=\"outline\" size=\"sm\" onClick={() =&gt; table.nextPage()} disabled={!table.getCanNextPage()} &gt; Next &lt;/Button&gt; &lt;/div&gt; &lt;/div&gt; )} Agregar busqueda global, editar app/(dashboard)/(routes)/teacher/courses/_components/data-table.tsx \"use client\"import { Button } from \"@/components/ui/button\";import { Input } from \"@/components/ui/input\"import * as React from \"react\";import Link from \"next/link\"import { ColumnDef, ColumnFiltersState, SortingState, flexRender, getCoreRowModel, getFilteredRowModel, getPaginationRowModel, getSortedRowModel, useReactTable,} from \"@tanstack/react-table\"import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow,} from \"@/components/ui/table\"import { PlusCircle } from \"lucide-react\";interface DataTableProps&lt;TData, TValue&gt; { columns: ColumnDef&lt;TData, TValue&gt;[] data: TData[]}export function DataTable&lt;TData, TValue&gt;({ columns, data,}: DataTableProps&lt;TData, TValue&gt;) { const [sorting, setSorting] = React.useState&lt;SortingState&gt;([]) //const [columnFilters, setColumnFilters] = React.useState&lt;ColumnFiltersState&gt;([]) const [filtering, setFiltering] = React.useState&lt;string&gt;(\"\") const table = useReactTable({ data, columns, getCoreRowModel: getCoreRowModel(), getPaginationRowModel: getPaginationRowModel(), onSortingChange: setSorting, getSortedRowModel: getSortedRowModel(), //onColumnFiltersChange: setColumnFilters, getFilteredRowModel: getFilteredRowModel(), state: { sorting, //columnFilters, globalFilter: filtering, }, onGlobalFilterChange: setFiltering, }) return ( &lt;div&gt; &lt;div className=\"flex items-center py-4 justify-between\"&gt; &lt;Input placeholder=\"Buscar...\" type=\"text\" value={ filtering } //value={(table.getColumn(\"titulo\")?.getFilterValue() as string) ?? \"\"} onChange={(event) =&gt; //table.getColumn(\"titulo\")?.setFilterValue(event.target.value) setFiltering(event.target.value) } className=\"max-w-sm\" /&gt; &lt;Link href=\"/teacher/create\"&gt; &lt;Button&gt; &lt;PlusCircle className=\"h-4 w-4 mr-2\" /&gt; Crear curso &lt;/Button&gt; &lt;/Link&gt; &lt;/div&gt; &lt;div className=\"rounded-md border-2 border-t-black border-b-black dark:border-t-white dark:border-b-white bg-white dark:bg-black\"&gt; &lt;Table&gt; &lt;TableHeader&gt; {table.getHeaderGroups().map((headerGroup) =&gt; ( &lt;TableRow key={headerGroup.id}&gt; {headerGroup.headers.map((header) =&gt; { return ( &lt;TableHead key={header.id}&gt; {header.isPlaceholder ? null : flexRender( header.column.columnDef.header, header.getContext() )} &lt;/TableHead&gt; ) })} &lt;/TableRow&gt; ))} &lt;/TableHeader&gt; &lt;TableBody&gt; {table.getRowModel().rows?.length ? ( table.getRowModel().rows.map((row) =&gt; ( &lt;TableRow key={row.id} data-state={row.getIsSelected() &amp;&amp; \"selected\"} &gt; {row.getVisibleCells().map((cell) =&gt; ( &lt;TableCell key={cell.id}&gt; {flexRender(cell.column.columnDef.cell, cell.getContext())} &lt;/TableCell&gt; ))} &lt;/TableRow&gt; )) ) : ( &lt;TableRow&gt; &lt;TableCell colSpan={columns.length} className=\"h-24 text-center\"&gt; No results. &lt;/TableCell&gt; &lt;/TableRow&gt; )} &lt;/TableBody&gt; &lt;/Table&gt; &lt;/div&gt; &lt;div className=\"flex items-center justify-end space-x-2 py-4\"&gt; &lt;Button variant=\"outline\" size=\"sm\" onClick={() =&gt; table.previousPage()} disabled={!table.getCanPreviousPage()} &gt; Previous &lt;/Button&gt; &lt;Button variant=\"outline\" size=\"sm\" onClick={() =&gt; table.nextPage()} disabled={!table.getCanNextPage()} &gt; Next &lt;/Button&gt; &lt;/div&gt; &lt;/div&gt; )}" }, { "title": "NextJS 13 - eCommerce App - parte 8", "url": "/posts/NextJS-13-eCommerce-app-parte-8/", "categories": "NextJS", "tags": "javascript, reactjs, nextjs, ecommerce, programacion", "date": "2023-11-08 23:00:00 -0600", "snippet": "Acciones Ejecutar el comando npx shadcn-ui@latest add alert-dialog  Ejecutar npm i zustand   Instalar npm i react-confetti  Crear hooks/use-confetti-store.tsimport { create } from \"zustand\";typ...", "content": "Acciones Ejecutar el comando npx shadcn-ui@latest add alert-dialog  Ejecutar npm i zustand   Instalar npm i react-confetti  Crear hooks/use-confetti-store.tsimport { create } from \"zustand\";type ConfettiStore = { isOpen: boolean; onOpen: () =&gt; void; onClose: () =&gt; void;};export const useConfettiStore = create&lt;ConfettiStore&gt;((set) =&gt; ({ isOpen: false, onOpen: () =&gt; set({ isOpen: true }), onClose: () =&gt; set({ isOpen: false }),})); Crear components/providers/confetti-provider.tsx\"use client\";import ReactConfetti from \"react-confetti\";import { useConfettiStore } from \"@/hooks/use-confetti-store\";export const ConfettiProvider = () =&gt; { const confetti = useConfettiStore(); if (!confetti.isOpen) return null; return ( &lt;ReactConfetti className=\"pointer-events-none z-[100]\" numberOfPieces={500} recycle={false} onConfettiComplete={() =&gt; { confetti.onClose(); }} /&gt; )} Crear  components/Banner.tsximport { AlertTriangle, CheckCircleIcon } from \"lucide-react\"import { cva, type VariantProps } from \"class-variance-authority\";import { cn } from \"@/lib/utils\";const bannerVariants = cva( \"border text-center p-4 text-sm flex items-center w-full\", { variants: { variant: { warning: \"bg-yellow-200/80 dark:bg-yellow-500 dark:text-black border-yellow\", success: \"bg-emerald-700 border-emerald-800 text-secondary\", } }, defaultVariants: { variant: \"warning\", } });interface BannerProps extends VariantProps&lt;typeof bannerVariants&gt; { label: string;};const iconMap = { warning: AlertTriangle, success: CheckCircleIcon,};export const Banner = ({ label, variant,}: BannerProps) =&gt; { const Icon = iconMap[variant || \"warning\"]; return ( &lt;div className={cn(bannerVariants({ variant }))}&gt; &lt;Icon className=\"h-4 w-4 mr-2\" /&gt; {label} &lt;/div&gt; );}; Crear components/confirm-modal.tsx\"use client\";import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger,} from \"@/components/ui/alert-dialog\";interface ConfirmModalProps { children: React.ReactNode; onConfirm: () =&gt; void;};export const ConfirmModal = ({ children, onConfirm}: ConfirmModalProps) =&gt; { return ( &lt;AlertDialog&gt; &lt;AlertDialogTrigger asChild&gt; {children} &lt;/AlertDialogTrigger&gt; &lt;AlertDialogContent&gt; &lt;AlertDialogHeader&gt; &lt;AlertDialogTitle&gt;Esta seguro?&lt;/AlertDialogTitle&gt; &lt;AlertDialogDescription&gt; Esta acción no se puede deshacer. &lt;/AlertDialogDescription&gt; &lt;/AlertDialogHeader&gt; &lt;AlertDialogFooter&gt; &lt;AlertDialogCancel&gt;Cancelar&lt;/AlertDialogCancel&gt; &lt;AlertDialogAction onClick={onConfirm}&gt; Continuar &lt;/AlertDialogAction&gt; &lt;/AlertDialogFooter&gt; &lt;/AlertDialogContent&gt; &lt;/AlertDialog&gt; );}; Editar app/(dashboard)/(routes)/teacher/courses/[uuid]/page.tsximport { auth } from \"@clerk/nextjs\";import { redirect } from \"next/navigation\";import { db } from \"@/lib/db\";import { CircleDollarSign, File, LayoutDashboard } from \"lucide-react\";import { TitleForm } from \"./_components/TitleForm\";import { DescriptionForm } from \"./_components/DescriptionForm\";import { ImageForm } from \"./_components/ImageForm\";import { CategoriesForm } from \"./_components/CategoriesForm\";import { PriceForm } from \"./_components/PriceForm\";import { Prisma } from \"@prisma/client\";import { AttachmentsForm } from \"./_components/AttachmensForm\";import { Banner } from \"@/components/Banner\";import { Actions } from \"./_components/Actions\";const CourseUuidPage = async ({ params}: { params: { uuid: string }}) =&gt; { const { userId } = auth(); if (!userId) { return redirect(\"/\"); } const course = await db.tbl_cursos.findFirst({ where: { uuid: params.uuid, id_usuario: userId }, include: { categoria: true, adjuntos: true }, }); const categories = await db.tbl_categorias.findMany({ orderBy: { nombre: \"asc\" } }); if (!course) { return redirect(\"/\"); } const requiredFields = [ course.titulo, course.descripcion, course.imagen_url, course.precio, course.id_categoria]; const totalFields = requiredFields.length; const completedFields = requiredFields.filter(Boolean).length; const completionText = `(${completedFields}/${totalFields})`; const isComplete = requiredFields.every(Boolean); return ( &lt;&gt; {!course.publicado &amp;&amp; ( &lt;Banner label=\"Este curso no esta publicado. No sera visible para los estudiantes.\" /&gt; )} &lt;div className=\"p-6\"&gt; &lt;div className=\"flex items-center justify-between\"&gt; &lt;div className=\"flex flex-col gap-y-2\"&gt; &lt;h1 className=\"text-2xl font-medium\"&gt; Configuracion del curso &lt;/h1&gt; &lt;span className=\"text-sm text-slate-700 dark:text-white\"&gt; Completar todos los campos {completionText} &lt;/span&gt; &lt;/div&gt; &lt;Actions disabled={!isComplete} id_curso={course.id_curso} isPublished={course.publicado} /&gt; &lt;/div&gt; &lt;div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-16\"&gt; &lt;div&gt; &lt;div className=\"flex items-center gap-x-2\"&gt; &lt;div className=\"rounded-full flex items-center justify-center bg-sky-100 dark:bg-[#1f1f1f] p-2\"&gt; &lt;LayoutDashboard className=\"h-8 w-8 text-teal-700 dark:text-yellow-500\" /&gt; &lt;/div&gt; &lt;h2 className=\"text-xl\"&gt; Personaliza tu curso &lt;/h2&gt; &lt;/div&gt; &lt;TitleForm initialData={course} id_curso={course.id_curso} /&gt; &lt;DescriptionForm initialData={course} id_curso={course.id_curso} /&gt; &lt;CategoriesForm initialData={course} id_curso={course.id_curso} options={categories.map((category) =&gt; ({ label: category.nombre, value: category.id_categoria, }))} /&gt; &lt;ImageForm initialData={course} id_curso={course.id_curso} /&gt; &lt;/div&gt; &lt;div className=\"space-y-6\"&gt; &lt;div className=\"flex items-center gap-x-2\"&gt; &lt;div className=\"rounded-full flex items-center justify-center bg-sky-100 dark:bg-[#1f1f1f] p-2\"&gt; &lt;CircleDollarSign className=\"h-8 w-8 text-teal-700 dark:text-yellow-500\" /&gt; &lt;/div&gt; &lt;h2 className=\"text-xl\"&gt; Pon precio a tu curso &lt;/h2&gt; &lt;/div&gt; &lt;PriceForm initialData={course} id_curso={course.id_curso} /&gt; &lt;div className=\"flex items-center gap-x-2\"&gt; &lt;div className=\"rounded-full flex items-center justify-center bg-sky-100 dark:bg-[#1f1f1f] p-2\"&gt; &lt;File className=\"h-8 w-8 text-teal-700 dark:text-yellow-500\" /&gt; &lt;/div&gt; &lt;h2 className=\"text-xl\"&gt; Recursos y Adjuntos (Opcional) &lt;/h2&gt; &lt;/div&gt; &lt;AttachmentsForm initialData={course} id_curso={course.id_curso} /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/&gt; );}export default CourseUuidPage; Crear app/(dashboard)/(routes)/teacher/courses/[uuid]/_components/Actions.tsx\"use client\";import axios from \"axios\";import { Trash } from \"lucide-react\";import { useState } from \"react\";import toast from \"react-hot-toast\";import { useRouter } from \"next/navigation\";import { Button } from \"@/components/ui/button\";import { ConfirmModal } from \"@/components/confirm-modal\";import { useConfettiStore } from \"@/hooks/use-confetti-store\";interface ActionsProps { disabled: boolean; id_curso: number; isPublished: boolean;};export const Actions = ({ disabled, id_curso, isPublished}: ActionsProps) =&gt; { const router = useRouter(); const confetti = useConfettiStore(); const [isLoading, setIsLoading] = useState(false); const onClick = async () =&gt; { try { setIsLoading(true); if (isPublished) { await axios.patch(`/api/courses/${id_curso}/unpublish`); toast.success(\"Curso despublicado\"); } else { await axios.patch(`/api/courses/${id_curso}/publish`); toast.success(\"Curso publicado\"); confetti.onOpen(); } router.refresh(); } catch { toast.error(\"Sucedió un error al actualizar el curso\"); } finally { setIsLoading(false); } } const onDelete = async () =&gt; { try { setIsLoading(true); await axios.delete(`/api/courses/${id_curso}`); toast.success(\"Curso eliminado\"); router.refresh(); router.push(`/teacher/courses`); } catch { toast.error(\"Something went wrong\"); } finally { setIsLoading(false); } } return ( &lt;div className=\"flex items-center gap-x-2\"&gt; &lt;Button onClick={onClick} disabled={disabled || isLoading} variant=\"customghost\" size=\"sm\" &gt; {isPublished ? \"Despublicar\" : \"Publicar\"} &lt;/Button&gt; &lt;ConfirmModal onConfirm={onDelete}&gt; &lt;Button size=\"sm\" disabled={isLoading} variant={\"destructive\"}&gt; &lt;Trash className=\"h-4 w-4\" /&gt; &lt;/Button&gt; &lt;/ConfirmModal&gt; &lt;/div&gt; )} Editar app/api/[id_curso]/route.tsimport { auth } from \"@clerk/nextjs\";import { NextResponse } from \"next/server\";import { db } from \"@/lib/db\";export async function DELETE( req: Request, { params }: { params: { id_curso: string } }) { try { const { userId } = auth(); if (!userId) { return new NextResponse(\"No Autorizado\", { status: 401 }); } const course = await db.tbl_cursos.findUnique({ where: { id_curso: parseInt(params.id_curso), id_usuario: userId, }, }); if (!course) { return new NextResponse(\"Curso No encontrado\", { status: 404 }); } const deletedCourse = await db.tbl_cursos.delete({ where: { id_curso: parseInt(params.id_curso), }, }); return NextResponse.json(deletedCourse); } catch (error) { console.log(\"[COURSE_ID_DELETE]\", error); return new NextResponse(\"Error Interno\", { status: 500 }); }}export async function PATCH( req: Request, { params }: { params: { id_curso: string } }) { try { const { userId } = auth(); const { id_curso } = params; const values = await req.json(); if (!userId) { return new NextResponse(\"No autorizado\", { status: 401 }); } const course = await db.tbl_cursos.update({ where: { id_curso: parseInt(id_curso), id_usuario: userId }, data: { ...values, } }); return NextResponse.json(course); } catch (error) { console.log(\"[COURSE_ID]\", error); return new NextResponse(\"Error Interno\", { status: 500 }); }} Crear app/api/[id_curso]/publish/route.tsimport { auth } from \"@clerk/nextjs\";import { NextResponse } from \"next/server\";import { db } from \"@/lib/db\";export async function PATCH( req: Request, { params }: { params: { id_curso: string } }) { try { const { userId } = auth(); if (!userId) { return new NextResponse(\"No autorizado\", { status: 401 }); } const course = await db.tbl_cursos.findUnique({ where: { id_curso: parseInt(params.id_curso), id_usuario: userId, }, }); if (!course) { return new NextResponse(\"Not found\", { status: 404 }); } if (!course.titulo || !course.descripcion || !course.imagen_url || !course.id_categoria) { return new NextResponse(\"Faltan campos requeridos\", { status: 401 }); } const publishedCourse = await db.tbl_cursos.update({ where: { id_curso: parseInt(params.id_curso), id_usuario: userId, }, data: { publicado: true, } }); return NextResponse.json(publishedCourse); } catch (error) { console.log(\"[COURSE_ID_PUBLISH]\", error); return new NextResponse(\"Error Interno\", { status: 500 }); }} Crear app/api/[id_curso]/unpublish/route.tsimport { auth } from \"@clerk/nextjs\";import { NextResponse } from \"next/server\";import { db } from \"@/lib/db\";export async function PATCH( req: Request, { params }: { params: { id_curso: string } }) { try { const { userId } = auth(); if (!userId) { return new NextResponse(\"No Autorizado\", { status: 401 }); } const course = await db.tbl_cursos.findUnique({ where: { id_curso: parseInt(params.id_curso), id_usuario: userId, }, }); if (!course) { return new NextResponse(\"Curso No encontrado\", { status: 404 }); } const unpublishedCourse = await db.tbl_cursos.update({ where: { id_curso: parseInt(params.id_curso), id_usuario: userId, }, data: { publicado: false, } }); return NextResponse.json(unpublishedCourse); } catch (error) { console.log(\"[COURSE_ID_UNPUBLISH]\", error); return new NextResponse(\"Error Interno\", { status: 500 }); }}" }, { "title": "NextJS 13 - eCommerce App - parte 7", "url": "/posts/NextJS-13-eCommerce-app-parte-7/", "categories": "NextJS", "tags": "javascript, reactjs, nextjs, ecommerce, programacion", "date": "2023-11-07 23:00:00 -0600", "snippet": "Formulario de Adjuntos Modificar components/FileUpload.tsx\"use client\";import toast from \"react-hot-toast\";import { UploadDropzone } from \"@/lib/uploadthing\";import { ourFileRouter } from \"@/app/a...", "content": "Formulario de Adjuntos Modificar components/FileUpload.tsx\"use client\";import toast from \"react-hot-toast\";import { UploadDropzone } from \"@/lib/uploadthing\";import { ourFileRouter } from \"@/app/api/uploadthing/core\";interface FileUploadProps { onChange: (url?: string, name?:string) =&gt; void; endpoint: keyof typeof ourFileRouter;};export const FileUpload = ({ onChange, endpoint}: FileUploadProps) =&gt; { return ( &lt;UploadDropzone endpoint={endpoint} onClientUploadComplete={(res) =&gt; { onChange(res?.[0].url, res?.[0].name); }} onUploadError={(error: Error) =&gt; { toast.error(`${error?.message}`); }} /&gt; )} Editar app/(dashboard)/(routes)/teacher/courses/[uuid]/page.tsximport { auth } from \"@clerk/nextjs\";import { redirect } from \"next/navigation\";import { db } from \"@/lib/db\";import { CircleDollarSign, File, LayoutDashboard } from \"lucide-react\";import { TitleForm } from \"./_components/TitleForm\";import { DescriptionForm } from \"./_components/DescriptionForm\";import { ImageForm } from \"./_components/ImageForm\";import { CategoriesForm } from \"./_components/CategoriesForm\";import { PriceForm } from \"./_components/PriceForm\";import { Prisma } from \"@prisma/client\";import { AttachmentsForm } from \"./_components/AttachmensForm\";const CourseUuidPage = async ({ params}: { params: { uuid: string }}) =&gt; { const { userId } = auth(); if (!userId) { return redirect(\"/\"); } const course = await db.tbl_cursos.findFirst({ where: { uuid: params.uuid, id_usuario: userId }, include: { categoria: true, adjuntos: true }, }); const categories = await db.tbl_categorias.findMany({ orderBy: { nombre: \"asc\" } }); if (!course) { return redirect(\"/\"); } const requiredFields = [ course.titulo, course.descripcion, course.imagen_url, course.precio, course.id_categoria]; const totalFields = requiredFields.length; const completedFields = requiredFields.filter(Boolean).length; const completionText = `(${completedFields}/${totalFields})`; return ( &lt;div className=\"p-6\"&gt; &lt;div className=\"flex items-center justify-between\"&gt; &lt;div className=\"flex flex-col gap-y-2\"&gt; &lt;h1 className=\"text-2xl font-medium\"&gt; Configuracion del curso &lt;/h1&gt; &lt;span className=\"text-sm text-slate-700 dark:text-white\"&gt; Completar todos los campos {completionText} &lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-16\"&gt; &lt;div&gt; &lt;div className=\"flex items-center gap-x-2\"&gt; &lt;div className=\"rounded-full flex items-center justify-center bg-sky-100 dark:bg-[#1f1f1f] p-2\"&gt; &lt;LayoutDashboard className=\"h-8 w-8 text-teal-700 dark:text-yellow-500\" /&gt; &lt;/div&gt; &lt;h2 className=\"text-xl\"&gt; Personaliza tu curso &lt;/h2&gt; &lt;/div&gt; &lt;TitleForm initialData={course} id_curso={course.id_curso} /&gt; &lt;DescriptionForm initialData={course} id_curso={course.id_curso} /&gt; &lt;CategoriesForm initialData={course} id_curso={course.id_curso} options={categories.map((category) =&gt; ({ label: category.nombre, value: category.id_categoria, }))} /&gt; &lt;ImageForm initialData={course} id_curso={course.id_curso} /&gt; &lt;/div&gt; &lt;div className=\"space-y-6\"&gt; &lt;div className=\"flex items-center gap-x-2\"&gt; &lt;div className=\"rounded-full flex items-center justify-center bg-sky-100 dark:bg-[#1f1f1f] p-2\"&gt; &lt;CircleDollarSign className=\"h-8 w-8 text-teal-700 dark:text-yellow-500\" /&gt; &lt;/div&gt; &lt;h2 className=\"text-xl\"&gt; Pon precio a tu curso &lt;/h2&gt; &lt;/div&gt; &lt;PriceForm initialData={course} id_curso={course.id_curso} /&gt; &lt;div className=\"flex items-center gap-x-2\"&gt; &lt;div className=\"rounded-full flex items-center justify-center bg-sky-100 dark:bg-[#1f1f1f] p-2\"&gt; &lt;File className=\"h-8 w-8 text-teal-700 dark:text-yellow-500\" /&gt; &lt;/div&gt; &lt;h2 className=\"text-xl\"&gt; Recursos y Adjuntos (Opcional) &lt;/h2&gt; &lt;/div&gt; &lt;AttachmentsForm initialData={course} id_curso={course.id_curso} /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; );}export default CourseUuidPage; Crear app/(dashboard)/(routes)/teacher/courses/[uuid]/_components/AttachmentsForm.tsx\"use client\";import * as z from \"zod\";import axios from \"axios\";import { Pencil, PlusCircle, ImageIcon, File, Loader2, X } from \"lucide-react\";import { useState } from \"react\";import toast from \"react-hot-toast\";import { useRouter } from \"next/navigation\";import { tbl_adjuntos, tbl_categorias, tbl_cursos } from \"@prisma/client\";import Image from \"next/image\";import { Button } from \"@/components/ui/button\";import { FileUpload } from \"@/components/FileUpload\";interface AttachmentFormProps { initialData: tbl_cursos &amp; { categoria: tbl_categorias | null, adjuntos: tbl_adjuntos[] }; id_curso: number;};const formSchema = z.object({ url: z.string().min(1), nombre: z.string().min(1)});export const AttachmentsForm = ({ initialData, id_curso}: AttachmentFormProps) =&gt; { const [isEditing, setIsEditing] = useState(false); const [deletingId, setDeletingId] = useState&lt;number | null&gt;(null); const toggleEdit = () =&gt; setIsEditing((current) =&gt; !current); const router = useRouter(); const onSubmit = async (values: z.infer&lt;typeof formSchema&gt;) =&gt; { try { await axios.post(`/api/courses/${id_curso}/attachments`, values); toast.success(\"Curso Actualizado\"); toggleEdit(); router.refresh(); } catch { toast.error(\"Sucedio un error al agregar el adjunto\"); } }; const onDelete = async (id_adjunto: number) =&gt; { try { setDeletingId(id_adjunto); await axios.delete(`/api/courses/${id_curso}/attachments/${id_adjunto}`); toast.success(\"Adjunto eliminado\"); router.refresh(); } catch { toast.error(\"Sucedio un error al eliminar el adjunto\"); } finally { setDeletingId(null); } } return ( &lt;div className=\"mt-6 border bg-[#cfcfcf] dark:bg-[#1f1f1f] rounded-md p-4\"&gt; &lt;div className=\"font-medium flex items-center justify-between\"&gt; Adjuntos del curso &lt;Button onClick={toggleEdit} variant=\"customghost\"&gt; {isEditing &amp;&amp; ( &lt;&gt;Cancelar&lt;/&gt; )} {!isEditing &amp;&amp; ( &lt;&gt; &lt;PlusCircle className=\"h-4 w-4 mr-2\" /&gt; Agregar un archivo &lt;/&gt; )} &lt;/Button&gt; &lt;/div&gt; {!isEditing &amp;&amp; ( &lt;&gt; {initialData.adjuntos.length === 0 &amp;&amp; ( &lt;p className=\"text-sm mt-2 text-slate-500 italic\"&gt; *Aun no se han agregado adjuntos* &lt;/p&gt; )} {initialData.adjuntos.length &gt; 0 &amp;&amp; ( &lt;div className=\"space-y-2\"&gt; {initialData.adjuntos.map((adjunto) =&gt; ( &lt;div key={adjunto.id_adjunto} className=\"flex items-center p-3 w-full bg-sky-100 dark:bg-[#313138] border-sky-200 dark:border-white border dark:text-teal-400 text-sky-700 rounded-md mt-2\" &gt; &lt;File className=\"h-4 w-4 mr-2 flex-shrink-0\" /&gt; &lt;p className=\"text-sm line-clamp-1\"&gt; {adjunto.nombre} &lt;/p&gt; {deletingId === adjunto.id_adjunto &amp;&amp; ( &lt;div&gt; &lt;Loader2 className=\"h-4 w-4 animate-spin\" /&gt; &lt;/div&gt; )} {deletingId !== adjunto.id_adjunto &amp;&amp; ( &lt;button onClick={() =&gt; onDelete(adjunto.id_adjunto)} className=\"ml-auto hover:opacity-75 transition bg-red-700 text-white rounded-full p-1\" &gt; &lt;X className=\"h-4 w-4\" /&gt; &lt;/button&gt; )} &lt;/div&gt; ))} &lt;/div&gt; )} &lt;/&gt; )} {isEditing &amp;&amp; ( &lt;div&gt; &lt;FileUpload endpoint=\"courseAttachment\" onChange={(url, nombre) =&gt; { if (url &amp;&amp; nombre) { onSubmit({ url: url, nombre: nombre }); } }} /&gt; &lt;div className=\"text-xs text-muted-foreground mt-4\"&gt; Agrega cualquier cosa que tus estudiantes puedan necesitar para completar el curso. &lt;/div&gt; &lt;/div&gt; )} &lt;/div&gt; )} Crear app/api/courses/[id_curso]/attachments/route.tsimport { auth } from \"@clerk/nextjs\";import { NextResponse } from \"next/server\";import { db } from \"@/lib/db\";export async function POST( req: Request, { params }: { params: { id_curso: string } }) { try { const { userId } = auth(); const { url, nombre } = await req.json(); if (!userId) { return new NextResponse(\"No Autorizado\", { status: 401 }); } const courseOwner = await db.tbl_cursos.findUnique({ where: { id_curso: parseInt(params.id_curso), id_usuario: userId, } }); if (!courseOwner) { return new NextResponse(\"No Autorizado\", { status: 401 }); } const attachment = await db.tbl_adjuntos.create({ data: { url: url, nombre: nombre, id_curso: parseInt(params.id_curso), } }); return NextResponse.json(attachment); } catch (error) { console.log(\"COURSE_ID_ATTACHMENTS\", error); return new NextResponse(\"Error Interno\", { status: 500 }); }} Crear app/api/courses/[id_curso]/attachments/[id_adjunto]/route.tsimport { auth } from \"@clerk/nextjs\";import { NextResponse } from \"next/server\";import { db } from \"@/lib/db\";export async function DELETE( req: Request, { params }: { params: { id_curso: string, id_adjunto: string } }) { try { const { userId } = auth(); if (!userId) { return new NextResponse(\"No Autorizado\", { status: 401 }); } const courseOwner = await db.tbl_cursos.findUnique({ where: { id_curso: parseInt(params.id_curso), id_usuario: userId } }); if (!courseOwner) { return new NextResponse(\"No Autorizado\", { status: 401 }); } const attachment = await db.tbl_adjuntos.delete({ where: { id_curso: parseInt(params.id_curso), id_adjunto: parseInt(params.id_adjunto), } }); return NextResponse.json(attachment); } catch (error) { console.log(\"ATTACHMENT_ID\", error); return new NextResponse(\"Error Interno\", { status: 500 }); }}" }, { "title": "NextJS 13 - eCommerce App - parte 6", "url": "/posts/NextJS-13-eCommerce-app-parte-6/", "categories": "NextJS", "tags": "javascript, reactjs, nextjs, ecommerce, programacion", "date": "2023-10-25 23:00:00 -0600", "snippet": "Formulario de Categorias https://ui.shadcn.com/docs/components/combobox Instalar popover npx shadcn-ui@latest add popover y command npx shadcn-ui@latest add command Crear components/ui/combobox....", "content": "Formulario de Categorias https://ui.shadcn.com/docs/components/combobox Instalar popover npx shadcn-ui@latest add popover y command npx shadcn-ui@latest add command Crear components/ui/combobox.tsx\"use client\"import * as React from \"react\"import { Check, ChevronsUpDown } from \"lucide-react\"import { cn } from \"@/lib/utils\"import { Button } from \"@/components/ui/button\"import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem,} from \"@/components/ui/command\"import { Popover, PopoverContent, PopoverTrigger,} from \"@/components/ui/popover\"interface ComboboxProps { options: { label: string; value: any }[]; value?: any; onChange: (value: any) =&gt; void;};export const Combobox = ({ options, value, onChange}: ComboboxProps) =&gt; { const [open, setOpen] = React.useState(false) return ( &lt;Popover open={open} onOpenChange={setOpen}&gt; &lt;PopoverTrigger asChild&gt; &lt;Button variant=\"outline\" role=\"combobox\" aria-expanded={open} className=\"w-full justify-between\" &gt; {value ? options.find((option) =&gt; option.value === value)?.label : \"Seleccione una opción...\"} &lt;ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" /&gt; &lt;/Button&gt; &lt;/PopoverTrigger&gt; &lt;PopoverContent className=\"w-full p-0\"&gt; &lt;Command&gt; &lt;CommandInput placeholder=\"Buscar opciones...\" /&gt; &lt;CommandEmpty&gt;No se encontraron opciones.&lt;/CommandEmpty&gt; &lt;CommandGroup&gt; {options.map((option) =&gt; ( &lt;CommandItem key={option.value} value={option.value} onSelect={() =&gt; { onChange(option.value) setOpen(false) }} &gt; &lt;Check className={cn( \"mr-2 h-4 w-4\", value === option.value ? \"opacity-100\" : \"opacity-0\" )} /&gt; {option.label} &lt;/CommandItem&gt; ))} &lt;/CommandGroup&gt; &lt;/Command&gt; &lt;/PopoverContent&gt; &lt;/Popover&gt; )} Crear app/(dashboard)/(routes)/teacher/courses/[uuid]/_components/CategoriesForm.tsx\"use client\";import * as z from \"zod\";import axios from \"axios\";import { zodResolver } from \"@hookform/resolvers/zod\";import { useForm } from \"react-hook-form\";import { Pencil } from \"lucide-react\";import { useState } from \"react\";import toast from \"react-hot-toast\";import { useRouter } from \"next/navigation\";import { tbl_categorias, tbl_cursos } from \"@prisma/client\";import { Form, FormControl, FormField, FormItem, FormMessage,} from \"@/components/ui/form\";import { Button } from \"@/components/ui/button\";import { cn } from \"@/lib/utils\";import { Combobox } from \"@/components/ui/combobox\";interface CategoryFormProps { initialData: tbl_cursos &amp; { categoria: tbl_categorias | null} ; id_curso: number; options: { label: string; value: number }[];};const formSchema = z.object({ id_categoria: z.number().nullable(),});export const CategoriesForm = ({ initialData, id_curso, options,}: CategoryFormProps) =&gt; { const [isEditing, setIsEditing] = useState(false); const toggleEdit = () =&gt; { setIsEditing((current) =&gt; !current); if (!isEditing) { form.setValue(\"id_categoria\", initialData?.id_categoria || null); } }; console.log(initialData) const router = useRouter(); const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), defaultValues: { id_categoria: initialData?.id_categoria || null, }, }); const { isSubmitting, isValid } = form.formState; const onSubmit = async (values: z.infer&lt;typeof formSchema&gt;) =&gt; { try { await axios.patch(`/api/courses/${id_curso}`, values); toast.success(\"Curso Actualizado\"); toggleEdit(); router.refresh(); } catch { toast.error(\"Sucedió un error al actualizar el curso\"); } } return ( &lt;div className=\"mt-6 border bg-[#cfcfcf] dark:bg-[#1f1f1f] rounded-md p-4\"&gt; &lt;div className=\"font-medium flex items-center justify-between\"&gt; Categoria del curso &lt;Button onClick={toggleEdit} variant=\"customghost\"&gt; {isEditing ? ( &lt;&gt;Cancelar&lt;/&gt; ) : ( &lt;&gt; &lt;Pencil className=\"h-4 w-4 mr-2\" /&gt; Editar categoria &lt;/&gt; )} &lt;/Button&gt; &lt;/div&gt; {!isEditing &amp;&amp; ( &lt;p className={cn( \"text-sm\", \"text-slate-700 dark:text-white\", \"mt-2\", !initialData.id_categoria &amp;&amp; \"italic\" )}&gt; {initialData.categoria?.nombre || \"* Sin categoria *\"} &lt;/p&gt; )} {isEditing &amp;&amp; ( &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 mt-4\" &gt; &lt;FormField control={form.control} name=\"id_categoria\" render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormControl&gt; &lt;Combobox options={...options} {...field} /&gt; &lt;/FormControl&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;div className=\"flex items-center gap-x-2\"&gt; &lt;Button disabled={!isValid || isSubmitting} type=\"submit\" variant=\"success\" &gt; Guardar &lt;/Button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/Form&gt; )} &lt;/div&gt; )} Editar app/(dashboard)/(routes)/teacher/courses/[uuid]/page.tsximport { auth } from \"@clerk/nextjs\";import { redirect } from \"next/navigation\";import { db } from \"@/lib/db\";import { CircleDollarSign, LayoutDashboard } from \"lucide-react\";import { TitleForm } from \"./_components/TitleForm\";import { DescriptionForm } from \"./_components/DescriptionForm\";import { ImageForm } from \"./_components/ImageForm\";import { CategoriesForm } from \"./_components/CategoriesForm\";import { Prisma } from \"@prisma/client\";const CourseUuidPage = async ({ params}: { params: { uuid: string }}) =&gt; { const { userId } = auth(); if (!userId) { return redirect(\"/\"); } const course = await db.tbl_cursos.findFirst({ where: { uuid: params.uuid, id_usuario: userId }, include: { categoria: true }, }); console.log(course); const categories = await db.tbl_categorias.findMany({ orderBy: { nombre: \"asc\" } }); if (!course) { return redirect(\"/\"); } const requiredFields = [ course.titulo, course.descripcion, course.imagen_url, course.precio, course.id_categoria]; const totalFields = requiredFields.length; const completedFields = requiredFields.filter(Boolean).length; const completionText = `(${completedFields}/${totalFields})`; return ( &lt;div className=\"p-6\"&gt; &lt;div className=\"flex items-center justify-between\"&gt; &lt;div className=\"flex flex-col gap-y-2\"&gt; &lt;h1 className=\"text-2xl font-medium\"&gt; Configuracion del curso &lt;/h1&gt; &lt;span className=\"text-sm text-slate-700 dark:text-white\"&gt; Completar todos los campos {completionText} &lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-16\"&gt; &lt;div&gt; &lt;div className=\"flex items-center gap-x-2\"&gt; &lt;div className=\"rounded-full flex items-center justify-center bg-sky-100 dark:bg-[#1f1f1f] p-2\"&gt; &lt;LayoutDashboard className=\"h-8 w-8 text-teal-700 dark:text-yellow-500\" /&gt; &lt;/div&gt; &lt;h2 className=\"text-xl\"&gt; Personaliza tu curso &lt;/h2&gt; &lt;/div&gt; &lt;TitleForm initialData={course} id_curso={course.id_curso} /&gt; &lt;DescriptionForm initialData={course} id_curso={course.id_curso} /&gt; &lt;CategoriesForm initialData={course} id_curso={course.id_curso} options={categories.map((category) =&gt; ({ label: category.nombre, value: category.id_categoria, }))} /&gt; &lt;ImageForm initialData={course} id_curso={course.id_curso} /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; );}export default CourseUuidPage;Formulario de Precio Crear lib/format.tsexport const formatPrice = (price: number) =&gt; { return new Intl.NumberFormat(\"en-US\", { style: \"currency\", currency: \"USD\" }).format(price)} Crear app/(dashboard)/(routes)/teacher/courses/[uuid]/_components/PriceForm.tsx\"use client\";import * as z from \"zod\";import axios from \"axios\";import { zodResolver } from \"@hookform/resolvers/zod\";import { useForm } from \"react-hook-form\";import { Pencil } from \"lucide-react\";import { useState } from \"react\";import toast from \"react-hot-toast\";import { useRouter } from \"next/navigation\";import { tbl_cursos } from \"@prisma/client\";import { Form, FormControl, FormField, FormItem, FormMessage,} from \"@/components/ui/form\";import { Button } from \"@/components/ui/button\";import { cn } from \"@/lib/utils\";import { Input } from \"@/components/ui/input\";import { formatPrice } from \"@/lib/format\";interface PriceFormProps { initialData: tbl_cursos; id_curso: number;};const formSchema = z.object({ precio: z.coerce.number().positive().min(0.00, { message: \"El precio es requerido\", })});export const PriceForm = ({ initialData, id_curso}: PriceFormProps) =&gt; { const [isEditing, setIsEditing] = useState(false); const toggleEdit = () =&gt; { setIsEditing((current) =&gt; !current); if (!isEditing) { //form.reset(); form.setValue(\"precio\", initialData?.precio || 0.00); } }; const router = useRouter(); const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), defaultValues: { precio: initialData?.precio || undefined, }, }); const { isSubmitting, isValid } = form.formState; const onSubmit = async (values: z.infer&lt;typeof formSchema&gt;) =&gt; { try { await axios.patch(`/api/courses/${id_curso}`, values); toast.success(\"Curso Actualizado\"); toggleEdit(); router.refresh(); } catch { toast.error(\"Sucedio un error al actualizar el curso\"); } } return ( &lt;div className=\"mt-6 border bg-[#cfcfcf] dark:bg-[#1f1f1f] rounded-md p-4\"&gt; &lt;div className=\"font-medium flex items-center justify-between\"&gt; Precio del curso &lt;Button onClick={toggleEdit} variant=\"customghost\"&gt; {isEditing ? ( &lt;&gt;Cancelar&lt;/&gt; ) : ( &lt;&gt; &lt;Pencil className=\"h-4 w-4 mr-2\" /&gt; Editar precio &lt;/&gt; )} &lt;/Button&gt; &lt;/div&gt; {!isEditing &amp;&amp; ( &lt;p className={cn( \"text-sm\", \"text-slate-700 dark:text-white\", \"mt-2\", !initialData.precio &amp;&amp; \"italic\" )}&gt; {initialData.precio ? formatPrice(initialData.precio) : \"* Sin precio *\"} &lt;/p&gt; )} {isEditing &amp;&amp; ( &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 mt-4\" &gt; &lt;FormField control={form.control} name=\"precio\" render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormControl&gt; &lt;Input type=\"number\" min=\"0\" step=\"0.01\" disabled={isSubmitting} placeholder=\"ej. $99.99\" {...field} /&gt; &lt;/FormControl&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;div className=\"flex items-center gap-x-2\"&gt; &lt;Button disabled={!isValid || isSubmitting} type=\"submit\" variant=\"success\" &gt; Guardar &lt;/Button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/Form&gt; )} &lt;/div&gt; )} Editar app/(dashboard)/(routes)/teacher/courses/[uuid]/page.tsximport { auth } from \"@clerk/nextjs\";import { redirect } from \"next/navigation\";import { db } from \"@/lib/db\";import { CircleDollarSign, LayoutDashboard } from \"lucide-react\";import { TitleForm } from \"./_components/TitleForm\";import { DescriptionForm } from \"./_components/DescriptionForm\";import { ImageForm } from \"./_components/ImageForm\";import { CategoriesForm } from \"./_components/CategoriesForm\";import { PriceForm } from \"./_components/PriceForm\";const CourseUuidPage = async ({ params}: { params: { uuid: string }}) =&gt; { const { userId } = auth(); if (!userId) { return redirect(\"/\"); } const course = await db.tbl_cursos.findFirst({ where: { uuid: params.uuid, id_usuario: userId } }); const categories = await db.tbl_categorias.findMany({ orderBy: { nombre: \"asc\" } }); if (course?.id_categoria !== null) { let category = await db.tbl_categorias.findUnique({ where: { id_categoria: course?.id_categoria } }); var categoryName = category?.nombre; } if (!course) { return redirect(\"/\"); } const requiredFields = [ course.titulo, course.descripcion, course.imagen_url, course.precio, course.id_categoria]; const totalFields = requiredFields.length; const completedFields = requiredFields.filter(Boolean).length; const completionText = `(${completedFields}/${totalFields})`; return ( &lt;div className=\"p-6\"&gt; &lt;div className=\"flex items-center justify-between\"&gt; &lt;div className=\"flex flex-col gap-y-2\"&gt; &lt;h1 className=\"text-2xl font-medium\"&gt; Configuracion del curso &lt;/h1&gt; &lt;span className=\"text-sm text-slate-700 dark:text-white\"&gt; Completar todos los campos {completionText} &lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-16\"&gt; &lt;div&gt; &lt;div className=\"flex items-center gap-x-2\"&gt; &lt;div className=\"rounded-full flex items-center justify-center bg-sky-100 dark:bg-[#1f1f1f] p-2\"&gt; &lt;LayoutDashboard className=\"h-8 w-8 text-teal-700 dark:text-yellow-500\" /&gt; &lt;/div&gt; &lt;h2 className=\"text-xl\"&gt; Personaliza tu curso &lt;/h2&gt; &lt;/div&gt; &lt;TitleForm initialData={course} id_curso={course.id_curso} /&gt; &lt;DescriptionForm initialData={course} id_curso={course.id_curso} /&gt; &lt;CategoriesForm initialData={course} id_curso={course.id_curso} options={categories.map((category) =&gt; ({ label: category.nombre, value: category.id_categoria, }))} category={categoryName} /&gt; &lt;ImageForm initialData={course} id_curso={course.id_curso} /&gt; &lt;/div&gt; &lt;div className=\"space-y-6\"&gt; &lt;div className=\"flex items-center gap-x-2\"&gt; &lt;div className=\"rounded-full flex items-center justify-center bg-sky-100 dark:bg-[#1f1f1f] p-2\"&gt; &lt;CircleDollarSign className=\"h-8 w-8 text-teal-700 dark:text-yellow-500\" /&gt; &lt;/div&gt; &lt;h2 className=\"text-xl\"&gt; Pon precio a tu curso &lt;/h2&gt; &lt;/div&gt; &lt;PriceForm initialData={course} id_curso={course.id_curso} /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; );}export default CourseUuidPage;" }, { "title": "NextJS 13 - eCommerce App - parte 5", "url": "/posts/NextJS-13-eCommerce-app-parte-5/", "categories": "NextJS", "tags": "javascript, reactjs, nextjs, ecommerce, programacion", "date": "2023-10-17 23:00:00 -0600", "snippet": "Formulario descripción Instalar npx shadcn-ui@latest add textarea Crear app/(dashboard)/(routes)/teacher/courses/[uuid]/_components/DescriptionForm.tsx\"use client\";import * as z from \"zod\";import...", "content": "Formulario descripción Instalar npx shadcn-ui@latest add textarea Crear app/(dashboard)/(routes)/teacher/courses/[uuid]/_components/DescriptionForm.tsx\"use client\";import * as z from \"zod\";import axios from \"axios\";import { zodResolver } from \"@hookform/resolvers/zod\";import { useForm } from \"react-hook-form\";import { Pencil } from \"lucide-react\";import { useState } from \"react\";import toast from \"react-hot-toast\";import { useRouter } from \"next/navigation\";import { Form, FormControl, FormField, FormItem, FormMessage,} from \"@/components/ui/form\";import { Button } from \"@/components/ui/button\";import { cn } from \"@/lib/utils\";import { Textarea } from \"@/components/ui/textarea\";import { tbl_cursos } from \"@prisma/client\";interface DescriptionFormProps { initialData: tbl_cursos id_curso: number;};const formSchema = z.object({ descripcion: z.string().min(5, { message: \"La descripcion es requerida\", }),});export const DescriptionForm = ({ initialData, id_curso}: DescriptionFormProps) =&gt; { const [isEditing, setIsEditing] = useState(false); const toggleEdit = () =&gt; { setIsEditing((current) =&gt; !current); if (!isEditing) { form.setValue(\"descripcion\", initialData?.descripcion || \"\"); } }; const router = useRouter(); const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), defaultValues: { descripcion: initialData?.descripcion || \"\" }, }); const { isSubmitting, isValid } = form.formState; const onSubmit = async (values: z.infer&lt;typeof formSchema&gt;) =&gt; { try { await axios.patch(`/api/courses/${id_curso}`, values); toast.success(\"Curso Actualizado\"); toggleEdit(); router.refresh(); } catch { toast.error(\"Sucedio un error\"); } } return ( &lt;div className=\"mt-6 border bg-[#cfcfcf] dark:bg-[#1f1f1f] rounded-md p-4\"&gt; &lt;div className=\"font-medium flex items-center justify-between\"&gt; Descripción del curso &lt;Button onClick={toggleEdit} variant=\"customghost\"&gt; {isEditing ? ( &lt;&gt;Cancelar&lt;/&gt; ) : ( &lt;&gt; &lt;Pencil className=\"h-4 w-4 mr-2\" /&gt; Editar descripción &lt;/&gt; )} &lt;/Button&gt; &lt;/div&gt; {!isEditing &amp;&amp; ( &lt;p className={cn( \"text-sm\", \"text-slate-700 dark:text-white\", \"mt-2\", !initialData.descripcion &amp;&amp; \"italic\" )}&gt; {initialData.descripcion || \"* Sin descripción *\"} &lt;/p&gt; )} {isEditing &amp;&amp; ( &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 mt-4\" &gt; &lt;FormField control={form.control} name=\"descripcion\" render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormControl&gt; &lt;Textarea disabled={isSubmitting} placeholder=\"ej. Este curso es sobre...\" {...field} /&gt; &lt;/FormControl&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;div className=\"flex items-center gap-x-2\"&gt; &lt;Button disabled={!isValid || isSubmitting} type=\"submit\" variant=\"success\" &gt; Guardar &lt;/Button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/Form&gt; )} &lt;/div&gt; )} Editar app/(dashboard)/(routes)/teacher/courses/[uuid]/page.tsximport { auth } from \"@clerk/nextjs\";import { redirect } from \"next/navigation\";import { db } from \"@/lib/db\";import { LayoutDashboard } from \"lucide-react\";import { TitleForm } from \"@/app/(dashboard)/(routes)/teacher/courses/[uuid]/_components/TitleForm\";import { DescriptionForm } from \"@/app/(dashboard)/(routes)/teacher/courses/[uuid]/_components/DescriptionForm\";const CourseUuidPage = async ({ params}: { params: { uuid: string }}) =&gt; { const { userId } = auth(); if (!userId) { return redirect(\"/\"); } const course = await db.tbl_cursos.findFirst({ where: { uuid: params.uuid, id_usuario: userId } }); if (!course) { return redirect(\"/\"); } const requiredFields = [ course.titulo, course.descripcion, course.imagen_url, course.precio, course.id_categoria]; const totalFields = requiredFields.length; const completedFields = requiredFields.filter(Boolean).length; const completionText = `(${completedFields}/${totalFields})`; return ( &lt;div className=\"p-6\"&gt; &lt;div className=\"flex items-center justify-between\"&gt; &lt;div className=\"flex flex-col gap-y-2\"&gt; &lt;h1 className=\"text-2xl font-medium\"&gt; Configuracion del curso &lt;/h1&gt; &lt;span className=\"text-sm text-slate-700 dark:text-white\"&gt; Completar todos los campos {completionText} &lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-16\"&gt; &lt;div&gt; &lt;div className=\"flex items-center gap-x-2\"&gt; &lt;div className=\"rounded-full flex items-center justify-center bg-sky-100 dark:bg-[#1f1f1f] p-2\"&gt; &lt;LayoutDashboard className=\"h-8 w-8 text-teal-700 dark:text-yellow-500\" /&gt; &lt;/div&gt; &lt;h2 className=\"text-xl\"&gt; Personaliza tu curso &lt;/h2&gt; &lt;/div&gt; &lt;TitleForm initialData={course} id_curso={course.id_curso} /&gt; &lt;DescriptionForm initialData={course} id_curso={course.id_curso} /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; );}export default CourseUuidPage;Formulario de imagen Crea cuenta en https://uploadthing.com/ Ejecutar npm install uploadthing @uploadthing/react react-dropzone  Editar .envNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_bG92ZW2ZWxpbi0zMC5jbGVyay5hY2NvdW50cy5kZXYkCLERK_SECRET_KEY=sk_test_T38d39rs2oMRiXrAahA7xYIOmSTnP9yHzNEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-inNEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-upNEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/DATABASE_URL=\"mysql://root:root@localhost:8889/next13_dev?socket=/Applications/MAMP/tmp/mysql/mysql.sock\"UPLOADTHING_SECRET=sk_live_cfa8a59e7949a323232d5aed48cf1371c9724cc03663babe12UPLOADTHING_APP_ID=mewty5t Crear app/api/uploadthing/core.ts import { auth } from \"@clerk/nextjs\";import { createUploadthing, type FileRouter } from \"uploadthing/next\";const f = createUploadthing();const handleAuth = () =&gt; { const { userId } = auth(); if (!userId) throw new Error(\"Sin autorizacion\"); return { userId };}export const ourFileRouter = { courseImage: f({ image: { maxFileSize: \"4MB\", maxFileCount: 1 } }) .middleware(() =&gt; handleAuth()) .onUploadComplete(() =&gt; { }), courseAttachment: f([\"text\", \"image\", \"video\", \"audio\", \"pdf\"]) .middleware(() =&gt; handleAuth()) .onUploadComplete(() =&gt; { }), chapterVideo: f({ video: { maxFileCount: 1, maxFileSize: \"512MB\" } }) .middleware(() =&gt; handleAuth()) .onUploadComplete(() =&gt; { })} satisfies FileRouter;export type OurFileRouter = typeof ourFileRouter; Crear app/api/uploadthing/route.ts import { createNextRouteHandler } from \"uploadthing/next\";import { ourFileRouter } from \"./core\";export const { GET, POST } = createNextRouteHandler({ router: ourFileRouter,}); Crear lib/uploadthing.tsimport { generateComponents } from \"@uploadthing/react\";import type { OurFileRouter } from \"@/app/api/uploadthing/core\";export const { UploadButton, UploadDropzone, Uploader } = generateComponents&lt;OurFileRouter&gt;(); Crear components/FileUpload.tsx \"use client\";import toast from \"react-hot-toast\";import { UploadDropzone } from \"@/lib/uploadthing\";import { ourFileRouter } from \"@/app/api/uploadthing/core\";interface FileUploadProps { onChange: (url?: string) =&gt; void; endpoint: keyof typeof ourFileRouter;};export const FileUpload = ({ onChange, endpoint}: FileUploadProps) =&gt; { return ( &lt;UploadDropzone endpoint={endpoint} onClientUploadComplete={(res) =&gt; { onChange(res?.[0].url); }} onUploadError={(error: Error) =&gt; { toast.error(`${error?.message}`); }} /&gt; )} Crear app/(dashboard)/(routes)/teacher/courses/[uuid]/_components/ImageForm.tsx\"use client\";import * as z from \"zod\";import axios from \"axios\";import { ImageIcon, Pencil, PlusCircle } from \"lucide-react\";import { useState } from \"react\";import toast from \"react-hot-toast\";import { useRouter } from \"next/navigation\";import { Button } from \"@/components/ui/button\";import { tbl_cursos } from \"@prisma/client\";import Image from \"next/image\";import { FileUpload } from \"@/components/FileUpload\";interface ImageFormProps { initialData: tbl_cursos id_curso: number;};const formSchema = z.object({ imagen_url: z.string().min(5, { message: \"La imagen es requerida\", }),});export const ImageForm = ({ initialData, id_curso}: ImageFormProps) =&gt; { const [isEditing, setIsEditing] = useState(false); const toggleEdit = () =&gt; setIsEditing((current) =&gt; !current); const router = useRouter(); const onSubmit = async (values: z.infer&lt;typeof formSchema&gt;) =&gt; { try { await axios.patch(`/api/courses/${id_curso}`, values); toast.success(\"Curso Actualizado\"); toggleEdit(); router.refresh(); } catch { toast.error(\"Sucedio un error\"); } } return ( &lt;div className=\"mt-6 border bg-[#cfcfcf] dark:bg-[#1f1f1f] rounded-md p-4\"&gt; &lt;div className=\"font-medium flex items-center justify-between\"&gt; Imagen del curso &lt;Button onClick={toggleEdit} variant=\"customghost\"&gt; {isEditing &amp;&amp; ( &lt;&gt;Cancelar&lt;/&gt; )} {!isEditing &amp;&amp; !initialData.imagen_url &amp;&amp; ( &lt;&gt; &lt;PlusCircle className=\"h-4 w-4 mr-2\" /&gt; Agregar una imagen &lt;/&gt; )} {!isEditing &amp;&amp; initialData.imagen_url &amp;&amp; ( &lt;&gt; &lt;Pencil className=\"h-4 w-4 mr-2\" /&gt; Editar imagen &lt;/&gt; )} &lt;/Button&gt; &lt;/div&gt; {!isEditing &amp;&amp; ( !initialData.imagen_url ? ( &lt;div className=\"flex items-center justify-center h-60 bg-slate-20 dark:bg-[#313138] rounded-md\"&gt; &lt;ImageIcon className=\"h-10 w-10 text-slate-500\" /&gt; &lt;/div&gt; ) : ( &lt;div className=\"relative aspect-video mt-2\"&gt; &lt;Image alt=\"Upload\" fill className=\"object-cover rounded-md\" src={initialData.imagen_url} /&gt; &lt;/div&gt; ) )} {isEditing &amp;&amp; ( &lt;div&gt; &lt;FileUpload endpoint=\"courseImage\" onChange={(url) =&gt; { if (url) { onSubmit({ imagen_url: url }); } }} /&gt; &lt;div className=\"text-xs text-muted-foreground mt-4\"&gt; 16:9 es el ratio recomendado &lt;/div&gt; &lt;/div&gt; )} &lt;/div&gt; )} Editar app/(dashboard)/(routes)/teacher/courses/[uuid]/page.tsximport { auth } from \"@clerk/nextjs\";import { redirect } from \"next/navigation\";import { db } from \"@/lib/db\";import { LayoutDashboard } from \"lucide-react\";import { TitleForm } from \"./_components/TitleForm\";import { DescriptionForm } from \"./_components/DescriptionForm\";import { ImageForm } from \"./_components/ImageForm\";const CourseUuidPage = async ({ params}: { params: { uuid: string }}) =&gt; { const { userId } = auth(); if (!userId) { return redirect(\"/\"); } const course = await db.tbl_cursos.findFirst({ where: { uuid: params.uuid, id_usuario: userId } }); if (!course) { return redirect(\"/\"); } const requiredFields = [ course.titulo, course.descripcion, course.imagen_url, course.precio, course.id_categoria]; const totalFields = requiredFields.length; const completedFields = requiredFields.filter(Boolean).length; const completionText = `(${completedFields}/${totalFields})`; return ( &lt;div className=\"p-6\"&gt; &lt;div className=\"flex items-center justify-between\"&gt; &lt;div className=\"flex flex-col gap-y-2\"&gt; &lt;h1 className=\"text-2xl font-medium\"&gt; Configuracion del curso &lt;/h1&gt; &lt;span className=\"text-sm text-slate-700 dark:text-white\"&gt; Completar todos los campos {completionText} &lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-16\"&gt; &lt;div&gt; &lt;div className=\"flex items-center gap-x-2\"&gt; &lt;div className=\"rounded-full flex items-center justify-center bg-sky-100 dark:bg-[#1f1f1f] p-2\"&gt; &lt;LayoutDashboard className=\"h-8 w-8 text-teal-700 dark:text-yellow-500\" /&gt; &lt;/div&gt; &lt;h2 className=\"text-xl\"&gt; Personaliza tu curso &lt;/h2&gt; &lt;/div&gt; &lt;TitleForm initialData={course} id_curso={course.id_curso} /&gt; &lt;DescriptionForm initialData={course} id_curso={course.id_curso} /&gt; &lt;ImageForm initialData={course} id_curso={course.id_curso} /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; );}export default CourseUuidPage; Editar tailwind.config.tsconst { withUt } = require(\"uploadthing/tw\")/** @type {import('tailwindcss').Config} */module.exports = withUt({ darkMode: [\"class\"], content: [ './pages/**/*.{ts,tsx}', './components/**/*.{ts,tsx}', './app/**/*.{ts,tsx}', './src/**/*.{ts,tsx}',\t], theme: { container: { center: true, padding: \"2rem\", screens: { \"2xl\": \"1400px\", }, }, extend: { colors: { border: \"hsl(var(--border))\", input: \"hsl(var(--input))\", ring: \"hsl(var(--ring))\", background: \"hsl(var(--background))\", foreground: \"hsl(var(--foreground))\", primary: { DEFAULT: \"hsl(var(--primary))\", foreground: \"hsl(var(--primary-foreground))\", }, secondary: { DEFAULT: \"hsl(var(--secondary))\", foreground: \"hsl(var(--secondary-foreground))\", }, destructive: { DEFAULT: \"hsl(var(--destructive))\", foreground: \"hsl(var(--destructive-foreground))\", }, muted: { DEFAULT: \"hsl(var(--muted))\", foreground: \"hsl(var(--muted-foreground))\", }, accent: { DEFAULT: \"hsl(var(--accent))\", foreground: \"hsl(var(--accent-foreground))\", }, popover: { DEFAULT: \"hsl(var(--popover))\", foreground: \"hsl(var(--popover-foreground))\", }, card: { DEFAULT: \"hsl(var(--card))\", foreground: \"hsl(var(--card-foreground))\", }, }, borderRadius: { lg: \"var(--radius)\", md: \"calc(var(--radius) - 2px)\", sm: \"calc(var(--radius) - 4px)\", }, keyframes: { \"accordion-down\": { from: { height: 0 }, to: { height: \"var(--radix-accordion-content-height)\" }, }, \"accordion-up\": { from: { height: \"var(--radix-accordion-content-height)\" }, to: { height: 0 }, }, }, animation: { \"accordion-down\": \"accordion-down 0.2s ease-out\", \"accordion-up\": \"accordion-up 0.2s ease-out\", }, }, }, plugins: [require(\"tailwindcss-animate\")],}) Editar app/globals.css@tailwind base;@tailwind components;@tailwind utilities;html,body,:root { height: 100%;}@layer base { :root { --background: 0 0% 100%; --foreground: 222.2 84% 4.9%; --card: 0 0% 100%; --card-foreground: 222.2 84% 4.9%; --popover: 0 0% 100%; --popover-foreground: 222.2 84% 4.9%; --primary: 222.2 47.4% 11.2%; --primary-foreground: 210 40% 98%; --secondary: 210 40% 96.1%; --secondary-foreground: 222.2 47.4% 11.2%; --muted: 210 40% 96.1%; --muted-foreground: 215.4 16.3% 46.9%; --accent: 210 40% 96.1%; --accent-foreground: 222.2 47.4% 11.2%; --destructive: 0 84.2% 60.2%; --destructive-foreground: 210 40% 98%; --border: 214.3 31.8% 91.4%; --input: 214.3 31.8% 91.4%; --ring: 222.2 84% 4.9%; --radius: 0.5rem; } .dark { --background: 222.2 84% 4.9%; --foreground: 210 40% 98%; --card: 222.2 84% 4.9%; --card-foreground: 210 40% 98%; --popover: 222.2 84% 4.9%; --popover-foreground: 210 40% 98%; --primary: 210 40% 98%; --primary-foreground: 222.2 47.4% 11.2%; --secondary: 217.2 32.6% 17.5%; --secondary-foreground: 210 40% 98%; --muted: 217.2 32.6% 17.5%; --muted-foreground: 215 20.2% 65.1%; --accent: 217.2 32.6% 17.5%; --accent-foreground: 210 40% 98%; --destructive: 0 62.8% 30.6%; --destructive-foreground: 210 40% 98%; --border: 217.2 32.6% 17.5%; --input: 217.2 32.6% 17.5%; --ring: 212.7 26.8% 83.9%; }}@layer base { * { @apply border-border; } body { @apply bg-background text-foreground; }}@import \"~@uploadthing/react/styles.css\" Editar next.config.js/** @type {import('next').NextConfig} */const nextConfig = { images: { domains: ['utfs.io'], },}module.exports = nextConfig" }, { "title": "NextJS 13 - eCommerce App - parte 4", "url": "/posts/NextJS-13-eCommerce-app-parte-4/", "categories": "NextJS", "tags": "javascript, reactjs, nextjs, ecommerce, programacion", "date": "2023-10-10 23:00:00 -0600", "snippet": "Esquema de base de datoshttps://www.prisma.io/ instalar Prisma npm i -D prisma Ejecutar npx prisma init esto creara la carpeta prisma y el archivo schema.prisma, ademas de modificar el archivo .e...", "content": "Esquema de base de datoshttps://www.prisma.io/ instalar Prisma npm i -D prisma Ejecutar npx prisma init esto creara la carpeta prisma y el archivo schema.prisma, ademas de modificar el archivo .env con el url a la base de datos Instalar npm i @prisma/client Editar .env asegurandose de que el url a la base de datos sea la correctaNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=CLERK_SECRET_KEY=NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-inNEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-upNEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=///DATABASE_URL=\"mysql://usuario:password@localhost:8889/base_datos?schema=public\"DATABASE_URL=\"mysql://root:root@localhost:8889/next13_ecommerce?socket=/Applications/MAMP/tmp/mysql/mysql.sock\" Crear lib/db.tsimport { PrismaClient } from '@prisma/client';declare global { var prisma: PrismaClient | undefined;};export const db = globalThis.prisma || new PrismaClient();if (process.env.NODE_ENV !== 'production') globalThis.prisma = db;//!Dara problemas en develpment por el hot reload ya que se crea una nueva instancia de prisma cada vez que se hace un cambio//export const db = new PrismaClient(); Editar prisma/schema.prisma// This is your Prisma schema file,// learn more about it in the docs: https://pris.ly/d/prisma-schemagenerator client { provider = \"prisma-client-js\"}datasource db { provider = \"mysql\" url = env(\"DATABASE_URL\") relationMode = \"foreignKeys\"}model tbl_cursos { id_curso Int @id @default(autoincrement()) uuid String @default(uuid()) id_usuario String titulo String @db.Text descripcion String? @db.Text imagen_url String? @db.Text precio Float? publicado Boolean @default(false) id_categoria Int? categoria tbl_categorias? @relation(fields: [id_categoria], references: [id_categoria]) adjuntos tbl_adjuntos[] createdAt DateTime @default(now()) updatedAt DateTime @updatedAt @@index([id_categoria])}model tbl_categorias { id_categoria Int @id @default(autoincrement()) uuid String @default(uuid()) nombre String @unique courses tbl_cursos[]}model tbl_adjuntos { id_adjunto Int @id @default(autoincrement()) uuid String @default(uuid()) nombre String url String @db.Text id_curso Int curso tbl_cursos @relation(fields: [id_curso], references: [id_curso], onDelete: Cascade) createdAt DateTime @default(now()) updatedAt DateTime @updatedAt @@index([id_curso])} Crear una base de datos en mysql con el nombre next13_ecommerce Ejecutar npx prisma generate Ejecutar npx prisma db push Script SQLCREATE DATABASE next13_ecommerce;USE next13_ecommerce;---- Table structure for table `tbl_adjuntos`--CREATE TABLE `tbl_adjuntos` ( `id_adjunto` int(11) NOT NULL, `uuid` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL, `nombre` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL, `url` text COLLATE utf8mb4_unicode_ci NOT NULL, `id_curso` int(11) NOT NULL, `createdAt` datetime(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3), `updatedAt` datetime(3) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;-- ------------------------------------------------------------ Table structure for table `tbl_categorias`--CREATE TABLE `tbl_categorias` ( `id_categoria` int(11) NOT NULL, `uuid` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL, `nombre` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;-- ------------------------------------------------------------ Table structure for table `tbl_cursos`--CREATE TABLE `tbl_cursos` ( `id_curso` int(11) NOT NULL, `uuid` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL, `id_usuario` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL, `titulo` text COLLATE utf8mb4_unicode_ci NOT NULL, `descripcion` text COLLATE utf8mb4_unicode_ci, `imagen_url` text COLLATE utf8mb4_unicode_ci, `precio` double DEFAULT NULL, `publicado` tinyint(1) NOT NULL DEFAULT '0', `id_categoria` int(11) DEFAULT NULL, `createdAt` datetime(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3), `updatedAt` datetime(3) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;---- Indexes for dumped tables------ Indexes for table `tbl_adjuntos`--ALTER TABLE `tbl_adjuntos` ADD PRIMARY KEY (`id_adjunto`), ADD KEY `tbl_adjuntos_id_curso_idx` (`id_curso`);---- Indexes for table `tbl_categorias`--ALTER TABLE `tbl_categorias` ADD PRIMARY KEY (`id_categoria`), ADD UNIQUE KEY `tbl_categorias_nombre_key` (`nombre`);---- Indexes for table `tbl_cursos`--ALTER TABLE `tbl_cursos` ADD PRIMARY KEY (`id_curso`), ADD KEY `tbl_cursos_id_categoria_idx` (`id_categoria`);---- AUTO_INCREMENT for dumped tables------ AUTO_INCREMENT for table `tbl_adjuntos`--ALTER TABLE `tbl_adjuntos` MODIFY `id_adjunto` int(11) NOT NULL AUTO_INCREMENT;---- AUTO_INCREMENT for table `tbl_categorias`--ALTER TABLE `tbl_categorias` MODIFY `id_categoria` int(11) NOT NULL AUTO_INCREMENT;---- AUTO_INCREMENT for table `tbl_cursos`--ALTER TABLE `tbl_cursos` MODIFY `id_curso` int(11) NOT NULL AUTO_INCREMENT;---- Constraints for dumped tables------ Constraints for table `tbl_adjuntos`--ALTER TABLE `tbl_adjuntos` ADD CONSTRAINT `tbl_adjuntos_id_curso_fkey` FOREIGN KEY (`id_curso`) REFERENCES `tbl_cursos` (`id_curso`) ON DELETE CASCADE ON UPDATE CASCADE;---- Constraints for table `tbl_cursos`--ALTER TABLE `tbl_cursos` ADD CONSTRAINT `tbl_cursos_id_categoria_fkey` FOREIGN KEY (`id_categoria`) REFERENCES `tbl_categorias` (`id_categoria`) ON DELETE SET NULL ON UPDATE CASCADE;COMMIT;API - Crear Curso Crear app/api/courses/route.tsimport { auth } from \"@clerk/nextjs\";import { NextResponse } from \"next/server\";import { db } from \"@/lib/db\";export async function POST( req: Request,) { try { const { userId } = auth(); const { titulo } = await req.json(); if (!userId) { return new NextResponse(\"No autorizado\", { status: 401 }); } const course = await db.tbl_cursos.create({ data: { id_usuario: userId, titulo, } }); return NextResponse.json(course); } catch (error) { console.log(\"[CURSOS]\", error); return new NextResponse(\"Error Interno\", { status: 500 }); }} Modificar función onSubmit en app/(dashboard)/(routes)/teacher/create/page.tsx const onSubmit = async (values: z.infer&lt;typeof formSchema&gt;) =&gt; { try { const response = await axios.post(\"/api/courses\", values); router.push(`/teacher/courses/${response.data.uuid}`); toast.success(\"Curso creado\"); } catch (error) { //console.log(\"ha ocurrido un error\"); toast.error(\"Ha ocurrido un error\"); } } Crear un curso utilizando la interfaz de Creación de curso Crear app/(dashboard)/(routes)/teacher/courses/[uuid]/page.tsxconst CourseUuidPage = ({ params}: { params: { uuid: string }}) =&gt; { return ( &lt;div&gt; UUID del curso: {params.uuid} &lt;/div&gt; );}export default CourseUuidPage;Edición de curso Editar app/(dashboard)/(routes)/teacher/courses/[uuid]/page.tsximport { auth } from \"@clerk/nextjs\";import { redirect } from \"next/navigation\";import { db } from \"@/lib/db\";import { IconBadge } from \"@/components/IconBadge\";import { LayoutDashboard } from \"lucide-react\";import { TitleForm } from \"@/app/(dashboard)/_components/TitleForm\";const CourseUuidPage = async ({ params}: { params: { uuid: string }}) =&gt; { const { userId } = auth(); if (!userId) { return redirect(\"/\"); } const course = await db.tbl_cursos.findFirst({ where: { uuid: params.uuid, } }); if (!course) { return redirect(\"/\"); } const requiredFields = [ course?.titulo, course?.descripcion, course?.imagen_url, course?.precio, course?.id_categoria]; const totalFields = requiredFields.length; const completedFields = requiredFields.filter(Boolean).length; const completionText = `(${completedFields}/${totalFields})`; return ( &lt;div className=\"p-6\"&gt; &lt;div className=\"flex items-center justify-between\"&gt; &lt;div className=\"flex flex-col gap-y-2\"&gt; &lt;h1 className=\"text-2xl font-medium\"&gt; Configuracion del curso &lt;/h1&gt; &lt;span className=\"text-sm text-slate-700 dark:text-white\"&gt; Completar todos los campos {completionText} &lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-16\"&gt; &lt;div&gt; &lt;div className=\"flex items-center gap-x-2\"&gt; &lt;div className=\"rounded-full flex items-center justify-center bg-sky-100 dark:bg-[#1f1f1f] p-2\"&gt; &lt;LayoutDashboard className=\"h-8 w-8 text-teal-700 dark:text-yellow-500\" /&gt; &lt;/div&gt; &lt;h2 className=\"text-xl\"&gt; Personaliza tu curso &lt;/h2&gt; &lt;/div&gt; &lt;TitleForm initialData={course} id_curso={course.id_curso} /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; );}export default CourseUuidPage; Crear app/(dashboard)/(routes)/teacher/courses/[uuid]/_components/TitleForm.tsx\"use client\";import * as z from \"zod\";import axios from \"axios\";import { zodResolver } from \"@hookform/resolvers/zod\";import { useForm } from \"react-hook-form\";import { Pencil } from \"lucide-react\";import { useState } from \"react\";import toast from \"react-hot-toast\";import { useRouter } from \"next/navigation\";import { Form, FormControl, FormField, FormItem, FormMessage,} from \"@/components/ui/form\";import { Input } from \"@/components/ui/input\";import { Button } from \"@/components/ui/button\";interface TitleFormProps { initialData: { titulo: string; }; id_curso: number;};const formSchema = z.object({ titulo: z.string().min(5, { message: \"El titulo es requerido\", }),});export const TitleForm = ({ initialData, id_curso}: TitleFormProps) =&gt; { const [isEditing, setIsEditing] = useState(false); const toggleEdit = () =&gt; { setIsEditing((current) =&gt; !current); if (!isEditing) { form.setValue(\"titulo\", initialData.titulo); } }; const router = useRouter(); const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), defaultValues: initialData, }); const { isSubmitting, isValid } = form.formState; const onSubmit = async (values: z.infer&lt;typeof formSchema&gt;) =&gt; { try { await axios.patch(`/api/courses/${id_curso}`, values); toast.success(\"Curso Actualizado\"); toggleEdit(); router.refresh(); } catch { toast.error(\"Sucedio un error\"); } } return ( &lt;div className=\"mt-6 border bg-[#cfcfcf] dark:bg-[#1f1f1f] rounded-md p-4\"&gt; &lt;div className=\"font-medium flex items-center justify-between\"&gt; Titulo del curso &lt;Button onClick={toggleEdit} variant=\"customghost\"&gt; {isEditing ? ( &lt;&gt;Cancelar&lt;/&gt; ) : ( &lt;&gt; &lt;Pencil className=\"h-4 w-4 mr-2\" /&gt; Editar titulo &lt;/&gt; )} &lt;/Button&gt; &lt;/div&gt; {!isEditing &amp;&amp; ( &lt;p className=\"text-xl mt-2\"&gt; {initialData.titulo} &lt;/p&gt; )} {isEditing &amp;&amp; ( &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 mt-4\" &gt; &lt;FormField control={form.control} name=\"titulo\" render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormControl&gt; &lt;Input disabled={isSubmitting} placeholder=\"ej. 'Desarrollo web con NextJS'\" {...field} /&gt; &lt;/FormControl&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;div className=\"flex items-center gap-x-2\"&gt; &lt;Button disabled={!isValid || isSubmitting} type=\"submit\" variant=\"success\" &gt; Guardar &lt;/Button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/Form&gt; )} &lt;/div&gt; )}Actualizar Curso API Crear app/courses/\\[id\\_curso\\]/route.tsimport { auth } from \"@clerk/nextjs\";import { NextResponse } from \"next/server\";import { db } from \"@/lib/db\";export async function PATCH( req: Request, { params }: { params: { id_curso: string } }) { try { const { userId } = auth(); const { id_curso } = params; const values = await req.json(); if (!userId) { return new NextResponse(\"No autorizado\", { status: 401 }); } const course = await db.tbl_cursos.update({ where: { id_curso: parseInt(id_curso), id_usuario: userId }, data: { ...values, } }); return NextResponse.json(course); } catch (error) { console.log(\"[COURSE_ID]\", error); return new NextResponse(\"Internal Error\", { status: 500 }); }}" }, { "title": "NextJS 13 - eCommerce App - parte 3", "url": "/posts/NextJS-13-eCommerce-app-parte-3/", "categories": "NextJS", "tags": "javascript, reactjs, nextjs, ecommerce, programacion", "date": "2023-10-04 23:00:00 -0600", "snippet": "Layout dinamico Modificar app/components/NavbarRoutes.tsx para agregar los hooks necesarios para navegación dinámica\"use client\";import { UserButton } from \"@clerk/nextjs\";import { ModeToggle } fr...", "content": "Layout dinamico Modificar app/components/NavbarRoutes.tsx para agregar los hooks necesarios para navegación dinámica\"use client\";import { UserButton } from \"@clerk/nextjs\";import { ModeToggle } from \"@/components/mode-toggle\";import { Button } from \"@/components/ui/button\";import { LogOut } from \"lucide-react\";import { usePathname } from \"next/navigation\";import Link from \"next/link\";export const NavbarRoutes = () =&gt; { const pathname = usePathname(); const isTeacherPage = pathname?.startsWith(\"/teacher\"); const isPlayerPage = pathname?.includes(\"/chapter\"); return ( &lt;div className=\"flex gap-x-8 ml-auto\"&gt; {isTeacherPage || isPlayerPage ? ( &lt;Link href=\"/\"&gt; &lt;Button size=\"sm\" variant='customghost'&gt; &lt;LogOut className=\"h-4 w-4 mr-2\" /&gt; Salir &lt;/Button&gt; &lt;/Link&gt; ) : ( &lt;Link href=\"/teacher/courses\"&gt; &lt;Button size=\"sm\" variant='customghost'&gt; Modo Profesor &lt;/Button&gt; &lt;/Link&gt; )} &lt;UserButton afterSignOutUrl=\"/\" /&gt; &lt;ModeToggle /&gt; &lt;/div&gt; );} Crear app/(dashboard)/(routes)/teacher/courses/page.tsxconst CoursesPage = () =&gt; { return ( &lt;div&gt; Pagina para cursos &lt;/div&gt; );}export default CoursesPage; Agregar rutas para modo profesor editando app/(dashboard)/_components/SidebarRoutes.tsx \"use client\";import { Layout, Compass, List, BarChart } from \"lucide-react\";import { SidebarItem } from \"./SidebarItem\";import { usePathname } from \"next/navigation\";const guestRoutes = [ { icon: Layout, label: \"Dashboard\", href: \"/\", }, { icon: Compass, label: \"Navegar\", href: \"/search\", }];const teacherRoutes = [ { icon: List, label: \"Cursos\", href: \"/teacher/courses\", }, { icon: BarChart, label: \"Estadisticas\", href: \"/teacher/stadistics\", }];export const SidebarRoutes = () =&gt; { const pathname = usePathname(); const isTeacherPage = pathname?.includes(\"/teacher\"); const routes = isTeacherPage ? teacherRoutes : guestRoutes; return ( &lt;div className=\"flex flex-col w-full\"&gt; {routes.map((route) =&gt; ( &lt;SidebarItem key={route.href} icon={route.icon} label={route.label} href={route.href} /&gt; ))} &lt;/div&gt; )}; Crear app/(dashboard)/(routes)/teacher/stadistics/page.tsxconst StadisticPage = () =&gt; { return ( &lt;div&gt; Pagina para estadisticas &lt;/div&gt; );}export default StadisticPage; Editar app/(dashboard)/layout.tsx para empujar el contenido verticalmenteimport Navbar from \"./_components/Navbar\";import Sidebar from \"./_components/Sidebar\";const DashboardLayout = ({ children }: { children: React.ReactNode }) =&gt; { return ( &lt;div className=\"h-full\"&gt; &lt;div className=\"h-[80px] md:pl-56 fixed inset-y-0 w-full z-50\"&gt; &lt;Navbar /&gt; &lt;/div&gt; &lt;div className=\"hidden md:flex h-full w-56 flex-col fixed inset-y-0 z-50\"&gt; &lt;Sidebar /&gt; &lt;/div&gt; &lt;main className=\"md:pl-56 pt-[80px] h-full\"&gt; {children} &lt;/main&gt; &lt;/div&gt; );}export default DashboardLayout; Limpiar el contenido de la pagina inicial. Editar app/(dashboard)/(toutes)page.tsxexport default function Home() { return ( &lt;div&gt; Pagina de inicio &lt;/div&gt; );}IU Crear Curso  npx shadcn-ui@latest add form  npx shadcn-ui@latest add input  npm install axios  npm install react-hot-toast Editar app/(dashboard)/(routes)/teacher/courses/page.tsximport { Button } from \"@/components/ui/button\";import Link from \"next/link\";const CoursesPage = () =&gt; { return ( &lt;div className=\"p-6\"&gt; &lt;Link href=\"/teacher/create\"&gt; &lt;Button&gt; Crear curso &lt;/Button&gt; &lt;/Link&gt; &lt;/div&gt; );}export default CoursesPage; Agregar variante de botón success a components/ui/button.tsxconst buttonVariants = cva( \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\", { variants: { variant: { default: \"bg-primary text-primary-foreground hover:bg-primary/90\", destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\", outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\", secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\", ghost: \"hover:bg-accent hover:text-accent-foreground\", link: \"text-primary underline-offset-4 hover:underline\", customghost: \"hover:bg-teal-600 hover:text-white hover:dark:bg-yellow-500 hover:dark:text-black\", success: \"bg-green-500 text-white hover:bg-green-600\", }, size: { default: \"h-10 px-4 py-2\", sm: \"h-9 rounded-md px-3\", lg: \"h-11 rounded-md px-8\", icon: \"h-10 w-10\", }, }, defaultVariants: { variant: \"default\", size: \"default\", }, })export interface ButtonProps extends React.ButtonHTMLAttributes&lt;HTMLButtonElement&gt;, VariantProps&lt;typeof buttonVariants&gt; { asChild?: boolean}const Button = React.forwardRef&lt;HTMLButtonElement, ButtonProps&gt;( ({ className, variant, size, asChild = false, ...props }, ref) =&gt; { const Comp = asChild ? Slot : \"button\" return ( &lt;Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} /&gt; ) })Button.displayName = \"Button\"export { Button, buttonVariants } Crear app/(dashboard)/(routes)/teacher/create/page.tsx\"use client\";import * as z from \"zod\";import axios from \"axios\";import { zodResolver } from \"@hookform/resolvers/zod\";import { useForm } from \"react-hook-form\";import Link from \"next/link\";import { useRouter } from \"next/navigation\";import { Form, FormControl, FormDescription, FormField, FormLabel, FormMessage, FormItem } from \"@/components/ui/form\";import { Button } from \"@/components/ui/button\";import { Input } from \"@/components/ui/input\";const formSchema = z.object({ titulo: z.string().min(1, { message: \"El título es requerido\", }),});const CreatePage = () =&gt; { const router = useRouter(); // hook para el formulario const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), defaultValues: { titulo: \"\", }, }); //Extraccion de estados del formulario const { isSubmitting, isValid } = form.formState; const onSubmit = (values: z.infer&lt;typeof formSchema&gt;) =&gt; { console.log(values); }; return ( &lt;div className=\"max-w-5xl mx-auto flex md:items-center md:justify-center h-full p-6\"&gt; &lt;div className=\"bg-[#cfcfcf] dark:bg-[#1f1f1f] p-6\"&gt; &lt;h1 className=\"text-2xl\"&gt;Nombra tu curso&lt;/h1&gt; &lt;p className=\"text-sm text-slate-600 dark:text-gray-500\"&gt; ¿Como te gustaría nombrar tu curso? No te preocupes, puedes cambiar esto después. &lt;/p&gt; &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8 mt-8\" &gt; &lt;FormField control={form.control} name=\"titulo\" render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt; Titulo del curso &lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input disabled={isSubmitting} placeholder=\"ej. 'Desarrollo web con Next.js'\" {...field} /&gt; &lt;/FormControl&gt; &lt;FormDescription&gt; ¿Que vas a enseñar en este curso? &lt;/FormDescription&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;div className=\"flex items-center gap-x-2\"&gt; &lt;Link href=\"/\"&gt; &lt;Button type=\"button\" variant=\"destructive\" &gt; Cancelar &lt;/Button&gt; &lt;/Link&gt; &lt;Button type=\"submit\" variant=\"success\" disabled={!isValid || isSubmitting} &gt; Aceptar &lt;/Button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/Form&gt; &lt;/div&gt; &lt;/div&gt; );}export default CreatePage; Crear app/components/providers/toastter-provider.tsx\"use client\";import { Toaster } from \"react-hot-toast\";export const ToasterProvider = () =&gt; { return &lt;Toaster /&gt;} Editar app/layout.tsximport './globals.css'import type { Metadata } from 'next'import { Open_Sans } from 'next/font/google'import { ClerkProvider } from '@clerk/nextjs'import { ThemeProvider } from '@/components/providers/theme-provider'import { cn } from '@/lib/utils'import { ToasterProvider } from '@/components/providers/toaster-provider'const font = Open_Sans({ subsets: ['latin'] })export const metadata: Metadata = { title: 'Create Next App', description: 'Generated by create next app',}export default function RootLayout({ children,}: { children: React.ReactNode}) { return ( &lt;ClerkProvider&gt; &lt;html lang=\"en\" suppressHydrationWarning&gt; &lt;body className={cn( font.className, \"bg-[#dddddd] dark:bg-[#313138]\")}&gt; &lt;ThemeProvider attribute='class' defaultTheme='dark' enableSystem={true} storageKey='theme-lms' &gt; &lt;ToasterProvider /&gt; {children} &lt;/ThemeProvider&gt; &lt;/body&gt; &lt;/html&gt; &lt;/ClerkProvider&gt; )} Modificar app/(dashboard)/(routes)/teacher/create/page.tsx\"use client\";import * as z from \"zod\";import axios from \"axios\";import { zodResolver } from \"@hookform/resolvers/zod\";import { useForm } from \"react-hook-form\";import Link from \"next/link\";import { useRouter } from \"next/navigation\";import { Form, FormControl, FormDescription, FormField, FormLabel, FormMessage, FormItem } from \"@/components/ui/form\";import { Button } from \"@/components/ui/button\";import { Input } from \"@/components/ui/input\";import toast from \"react-hot-toast\";const formSchema = z.object({ titulo: z.string().min(1, { message: \"El título es requerido\", }),});const CreatePage = () =&gt; { const router = useRouter(); // hook para el formulario const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({ resolver: zodResolver(formSchema), defaultValues: { titulo: \"\", }, }); //Extraccion de estados del formulario const { isSubmitting, isValid } = form.formState; /*const onSubmit = (values: z.infer&lt;typeof formSchema&gt;) =&gt; { console.log(values); };*/ const onSubmit = async (values: z.infer&lt;typeof formSchema&gt;) =&gt; { try { const response = await axios.post(\"/api/courses\", values); router.push(`/teacher/courses/${response.data.id}`); } catch (error) { //console.log(\"ha ocurrido un error\"); toast.error(\"Ha ocurrido un error\"); } } return ( &lt;div className=\"max-w-5xl mx-auto flex md:items-center md:justify-center h-full p-6\"&gt; &lt;div className=\"bg-[#cfcfcf] dark:bg-[#1f1f1f] p-6\"&gt; &lt;h1 className=\"text-2xl\"&gt;Nombra tu curso&lt;/h1&gt; &lt;p className=\"text-sm text-slate-600 dark:text-gray-500\"&gt; ¿Como te gustaría nombrar tu curso? No te preocupes, puedes cambiar esto después. &lt;/p&gt; &lt;Form {...form}&gt; &lt;form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8 mt-8\" &gt; &lt;FormField control={form.control} name=\"titulo\" render={({ field }) =&gt; ( &lt;FormItem&gt; &lt;FormLabel&gt; Titulo del curso &lt;/FormLabel&gt; &lt;FormControl&gt; &lt;Input disabled={isSubmitting} placeholder=\"ej. 'Desarrollo web con Next.js'\" {...field} /&gt; &lt;/FormControl&gt; &lt;FormDescription&gt; ¿Que vas a enseñar en este curso? &lt;/FormDescription&gt; &lt;FormMessage /&gt; &lt;/FormItem&gt; )} /&gt; &lt;div className=\"flex items-center gap-x-2\"&gt; &lt;Link href=\"/\"&gt; &lt;Button type=\"button\" variant=\"destructive\" &gt; Cancelar &lt;/Button&gt; &lt;/Link&gt; &lt;Button type=\"submit\" variant=\"success\" disabled={!isValid || isSubmitting} &gt; Aceptar &lt;/Button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/Form&gt; &lt;/div&gt; &lt;/div&gt; );}export default CreatePage;" }, { "title": "NextJS 13 - eCommerce App - parte 2", "url": "/posts/NextJS-13-eCommerce-app-parte-2/", "categories": "NextJS", "tags": "javascript, reactjs, nextjs, ecommerce, programacion", "date": "2023-09-27 23:00:00 -0600", "snippet": "Modo Claro y Oscuro https://ui.shadcn.com/docs/dark-mode/next Instalar npm install next-themes Crear components/providers/theme-provider.tsx\"use client\"import * as React from \"react\"import { The...", "content": "Modo Claro y Oscuro https://ui.shadcn.com/docs/dark-mode/next Instalar npm install next-themes Crear components/providers/theme-provider.tsx\"use client\"import * as React from \"react\"import { ThemeProvider as NextThemesProvider } from \"next-themes\"import { type ThemeProviderProps } from \"next-themes/dist/types\"export function ThemeProvider({ children, ...props }: ThemeProviderProps) { return &lt;NextThemesProvider {...props}&gt;{children}&lt;/NextThemesProvider&gt;} Editar app/layout.tsximport './globals.css'import type { Metadata } from 'next'import { Inter } from 'next/font/google'import { ClerkProvider } from '@clerk/nextjs'import { ThemeProvider } from '@/components/providers/theme-provider'const inter = Inter({ subsets: ['latin'] })export const metadata: Metadata = { title: 'Create Next App', description: 'Generated by create next app',}export default function RootLayout({ children,}: { children: React.ReactNode}) { return ( &lt;ClerkProvider&gt; &lt;html lang=\"en\" suppressHydrationWarning&gt; &lt;body className={inter.className}&gt; &lt;ThemeProvider attribute='class' defaultTheme='dark' enableSystem={true} storageKey='theme-lms' &gt; {children} &lt;/ThemeProvider&gt;&lt;/body&gt; &lt;/html&gt; &lt;/ClerkProvider&gt; )} Agregar botón de cambio de tema. Crear components/mode-toggle.tsx\"use client\"import * as React from \"react\"import { Moon, Sun } from \"lucide-react\"import { useTheme } from \"next-themes\"import { Button } from \"@/components/ui/button\"import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger,} from \"@/components/ui/dropdown-menu\"export function ModeToggle() { const { setTheme } = useTheme() return ( &lt;DropdownMenu&gt; &lt;DropdownMenuTrigger asChild&gt; &lt;Button variant=\"outline\" size=\"icon\"&gt; &lt;Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" /&gt; &lt;Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" /&gt; &lt;span className=\"sr-only\"&gt;Cambiar tema&lt;/span&gt; &lt;/Button&gt; &lt;/DropdownMenuTrigger&gt; &lt;DropdownMenuContent align=\"end\"&gt; &lt;DropdownMenuItem onClick={() =&gt; setTheme(\"light\")}&gt; Claro &lt;/DropdownMenuItem&gt; &lt;DropdownMenuItem onClick={() =&gt; setTheme(\"dark\")}&gt; Oscuro &lt;/DropdownMenuItem&gt; &lt;DropdownMenuItem onClick={() =&gt; setTheme(\"system\")}&gt; Sistema &lt;/DropdownMenuItem&gt; &lt;/DropdownMenuContent&gt; &lt;/DropdownMenu&gt; )} Instalar componente npx shadcn-ui@latest add dropdown-menu Editar app/(dashboard)/(routes)/page.tsximport { ModeToggle } from \"@/components/mode-toggle\";import { UserButton } from \"@clerk/nextjs\";export default function Home() { return ( &lt;div&gt; &lt;UserButton afterSignOutUrl=\"/\" /&gt; &lt;ModeToggle /&gt; &lt;/div&gt; );} Editar app/layout.tsx para personalizar temas y fuente import './globals.css'import type { Metadata } from 'next'import { Open_Sans } from 'next/font/google'import { ClerkProvider } from '@clerk/nextjs'import { ThemeProvider } from '@/components/providers/theme-provider'import { cn } from '@/lib/utils'const font = Open_Sans({ subsets: ['latin'] })export const metadata: Metadata = { title: 'Create Next App', description: 'Generated by create next app',}export default function RootLayout({ children,}: { children: React.ReactNode}) { return ( &lt;ClerkProvider&gt; &lt;html lang=\"en\" suppressHydrationWarning&gt; &lt;body className={cn( font.className, \"bg-[#dddddd] dark:bg-[#313138]\")}&gt; &lt;ThemeProvider attribute='class' defaultTheme='dark' enableSystem={true} storageKey='theme-lms' &gt; {children} &lt;/ThemeProvider&gt;&lt;/body&gt; &lt;/html&gt; &lt;/ClerkProvider&gt; )}Layout (Sidebar y Navbar) Crear  app/(dashboard)/_components/Sidebar.tsxconst Sidebar = () =&gt; { return ( &lt;div className=\"h-full border-r flex flex-col overflow-y-auto bg-[#ededed] dark:bg-[#1f1f1f] shadow-sm\"&gt; Sidebar! &lt;/div&gt; );}export default Sidebar; Crear app/(dashboard)/layout.tsxconst DashboardLayout = ({ children }: { children: React.ReactNode }) =&gt; { return ( &lt;div className=\"h-full\"&gt; &lt;div className=\"hidden md:flex h-full w-56 flex-col fixed inset-y-0 z-50\"&gt; &lt;Sidebar /&gt; &lt;/div&gt; {children} &lt;/div&gt; );}export default DashboardLayout; Copiar imagen para logo en carpeta public Crear app/dashboard/_components/Logo.tsximport Image from \"next/image\";export const Logo = () =&gt; { return ( &lt;Image src=\"/logo.png\" alt=\"Logo\" width={70} height={70} /&gt; )}; Editar app/(dashboard)/_components/Sidebar.tsximport { Logo } from \"./Logo\";const Sidebar = () =&gt; { return ( &lt;div className=\"h-full border-r flex flex-col overflow-y-auto bg-[#cfcfcf] dark:bg-[#1f1f1f] shadow-sm\"&gt; &lt;div className=\"p-6 flex items-center justify-center\"&gt; &lt;Logo /&gt; &lt;/div&gt; &lt;/div&gt; );}export default Sidebar; Crear app/(dashboard)/_components/SidebarRoutes.tsx\"use client\";import { Layout, Compass } from \"lucide-react\";const guestRoutes = [ { icon: Layout, label: \"Dashboard\", href: \"/\", }, { icon: Compass, label: \"Navegar\", href: \"/search\", }];export const SidebarRoutes = () =&gt; { const routes = guestRoutes; return ( &lt;div className=\"flex flex-col w-full\"&gt; Rutas! &lt;/div&gt; )}; Editar app/(dashboard)/_components/Sidebar.tsx import { Logo } from \"./Logo\";import { SidebarRoutes } from \"./SidebarRoutes\";const Sidebar = () =&gt; { return ( &lt;div className=\"h-full border-r flex flex-col overflow-y-auto bg-[#cfcfcf] dark:bg-[#1f1f1f] shadow-sm\"&gt; &lt;div className=\"p-6 flex items-center justify-center\"&gt; &lt;Logo /&gt; &lt;/div&gt; &lt;div className=\"flex flex-col w-full\"&gt; &lt;SidebarRoutes /&gt; &lt;/div&gt; &lt;/div&gt; );}export default Sidebar; Crear app/(dashboard)/_components/SidebarItem.tsx \"use client\";export const SidebarItem = () =&gt; { return ( &lt;div&gt; Sidebar Item!!! &lt;/div&gt; )}; Editar app/(dashboard)/_components/SidebarRoutes.tsx\"use client\";import { Layout, Compass } from \"lucide-react\";import { SidebarItem } from \"./SidebarItem\";const guestRoutes = [ { icon: Layout, label: \"Dashboard\", href: \"/\", }, { icon: Compass, label: \"Navegar\", href: \"/search\", }];export const SidebarRoutes = () =&gt; { const routes = guestRoutes; return ( &lt;div className=\"flex flex-col w-full\"&gt; {routes.map((route) =&gt; ( &lt;SidebarItem key={route.href} icon={route.icon} label={route.label} href={route.href} /&gt; ))} &lt;/div&gt; )}; Modificar app/(dashboard)/_components/SidebarItem.tsx\"use client\";import { LucideIcon } from \"lucide-react\";import { usePathname, useRouter } from \"next/navigation\";import { cn } from \"@/lib/utils\";interface SidebarItemProps { icon: LucideIcon; label: string; href: string;};export const SidebarItem = ({ icon: Icon, label, href,}: SidebarItemProps) =&gt; { const pathname = usePathname(); const router = useRouter(); const isActive = (pathname === \"/\" &amp;&amp; href === \"/\") || pathname === href || pathname?.startsWith(`${href}/`); const onClick = () =&gt; { router.push(href); } return ( &lt;button onClick={onClick} type=\"button\" className={cn( \"flex items-center gap-x-2 text-slate-500 dark:text-white text-sm font-[500] pl-6 transition-all hover:text-slate-600 hover:bg-teal-400 \", isActive &amp;&amp; \"text-sky-700 bg-sky-200/20 hover:bg-sky-200/20 hover:text-sky-700\" )} &gt; &lt;div className=\"flex items-center gap-x-2 py-4\"&gt; &lt;Icon size={22} className={cn( \"text-slate-500 dark:text-white\", isActive &amp;&amp; \"text-sky-700\" )} /&gt; {label} &lt;/div&gt; &lt;div className={cn( \"ml-auto opacity-0 border-2 border-teal-500 dark:border-yellow-500 h-10 transition-all\", isActive &amp;&amp; \"opacity-100\" )} /&gt; &lt;/button&gt; )} Crear app/(dashboard)/(routes)/search/page.tsxconst SearchPage = () =&gt; { return ( &lt;div&gt; &lt;h1&gt;Search Page&lt;/h1&gt; &lt;/div&gt; );}export default SearchPage; Modificar app/(dashboard)/layout.tsx para mover el contenido a la derecha de la sidebar y agregar la div para la NavBarimport Navbar from \"./_components/Navbar\";import Sidebar from \"./_components/Sidebar\";const DashboardLayout = ({ children }: { children: React.ReactNode }) =&gt; { return ( &lt;div className=\"h-full\"&gt; &lt;div className=\"h-[80px] md:pl-56 fixed inset-y-0 w-full z-50\"&gt; &lt;Navbar /&gt; &lt;/div&gt; &lt;div className=\"hidden md:flex h-full w-56 flex-col fixed inset-y-0 z-50\"&gt; &lt;Sidebar /&gt; d&lt;/div&gt; &lt;main className=\"md:pl-56 h-full\"&gt; {children} &lt;/main&gt; &lt;/div&gt; );}export default DashboardLayout; Crear app/(dashboard)/_components/Navbar.tsxexport const Navbar = () =&gt; { return ( &lt;div className=\"p-4 border-b h-full flex items-center bg-[#ededed] dark:bg-[#1f1f1f] shadow-sm\"&gt; &lt;/div&gt; ); }export default Navbar; Agregaremos un botón drawer para mostrar o esconder la sidebar en dispositivos mobiles. Crear app/(dashboard)/_components/MobileSidebar.tsximport { Menu } from \"lucide-react\";export const MobileSidebar = () =&gt; { return ( &lt;Menu /&gt; );}export default MobileSidebar; Modificar app/(dashboard)/_components/Navbar.tsx para mostrar el nuevo componentesimport MobileSidebar from \"./MobileSidebar\";export const Navbar = () =&gt; { return ( &lt;div className=\"p-4 border-b h-full flex items-center bg-[#ededed] dark:bg-[#1f1f1f] shadow-sm\"&gt; &lt;MobileSidebar /&gt; &lt;/div&gt; ); }export default Navbar; npx shadcn-ui@latest add sheet  Modificar app/(dashboard)/_components/MobileSidebar.tsximport { Menu } from \"lucide-react\";import { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";import Sidebar from \"./Sidebar\";export const MobileSidebar = () =&gt; { return ( &lt;div&gt; &lt;Sheet&gt; &lt;SheetTrigger className=\"md:hidden pr-4 hover:opacity-75 transition\"&gt; &lt;Menu /&gt; &lt;/SheetTrigger&gt; &lt;SheetContent side=\"left\" className=\"p-0 bg-[#ededed] dark:bg-[#1f1f1f] \"&gt; &lt;Sidebar /&gt; &lt;/SheetContent&gt; &lt;/Sheet&gt; &lt;/div&gt; );}export default MobileSidebar; Agregar variante de botón customghost a components/ui/button.tsxconst buttonVariants = cva( \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\", { variants: { variant: { default: \"bg-primary text-primary-foreground hover:bg-primary/90\", destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\", outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\", secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\", ghost: \"hover:bg-accent hover:text-accent-foreground\", link: \"text-primary underline-offset-4 hover:underline\", customghost: \"hover:bg-teal-600 hover:text-white hover:dark:bg-yellow-500 hover:dark:text-black\", }, size: { default: \"h-10 px-4 py-2\", sm: \"h-9 rounded-md px-3\", lg: \"h-11 rounded-md px-8\", icon: \"h-10 w-10\", }, }, defaultVariants: { variant: \"default\", size: \"default\", }, }) Crear app/components/NavbarRoutes.tsx\"use cñient\";import { UserButton } from \"@clerk/nextjs\";import { ModeToggle } from \"@/components/mode-toggle\";import { Button } from \"@/components/ui/button\";import { LogOut } from \"lucide-react\";export const NavbarRoutes = () =&gt; { return ( &lt;div className=\"flex gap-x-8 ml-auto\"&gt; &lt;Button size=\"sm\" variant='customghost'&gt; &lt;LogOut className=\"h-4 w-4 mr-2\"/&gt; Salir &lt;/Button&gt; &lt;UserButton afterSignOutUrl=\"/\" /&gt; &lt;ModeToggle /&gt; &lt;/div&gt; );} Modificar app/(dashboard)/_components/Navbar.tsx para mostrar el nuevo componenteimport { NavbarRoutes } from \"@/components/NavbarRoutes\";import MobileSidebar from \"./MobileSidebar\";export const Navbar = () =&gt; { return ( &lt;div className=\"p-4 border-b h-full flex items-center bg-[#ededed] dark:bg-[#1f1f1f] shadow-sm\"&gt; &lt;MobileSidebar /&gt; &lt;NavbarRoutes /&gt; &lt;/div&gt; ); }export default Navbar;" }, { "title": "NextJS 13 - eCommerce App - parte 1", "url": "/posts/NextJS-13-eCommerce-app-parte-1/", "categories": "NextJS", "tags": "javascript, reactjs, nextjs, ecommerce, programacion", "date": "2023-09-26 23:00:00 -0600", "snippet": "Configuración inicialhttps://ui.shadcn.com/https://ui.shadcn.com/docs/installation/next Crear app de NextJS npx create-next-app@latest my-app --typescript --tailwind --eslintNextJS CLI de shadcn-...", "content": "Configuración inicialhttps://ui.shadcn.com/https://ui.shadcn.com/docs/installation/next Crear app de NextJS npx create-next-app@latest my-app --typescript --tailwind --eslintNextJS CLI de shadcn-ui npx shadcn-ui@latest initNextJS Ejecutar proyecto con npm run dev Editar app/page.tsx y probar tailwind.css (https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss)export default function Home() { return ( &lt;div&gt; &lt;p className=\"text-3xl font-medium text-sky-700\"&gt;Hello World&lt;/p&gt; &lt;/div&gt; );}Componentes de shadcn-uihttps://ui.shadcn.com/docs/components Instalación de componente botón npx shadcn-ui@latest add button Agregar boton a app/page.tsximport { Button } from \"@/components/ui/button\";export default function Home() { return ( &lt;div&gt; &lt;p className=\"text-3xl font-medium text-sky-700\"&gt;Hello World&lt;/p&gt; &lt;Button&gt; Click &lt;/Button&gt; &lt;/div&gt; );}Variantes de botón https://tailwindcss.com/docs/customizing-colors https://tailwindcss.com/docs/text-colorconst buttonVariants = cva( \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\", { variants: { variant: { default: \"bg-primary text-primary-foreground hover:bg-primary/90\", destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\", outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\", secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\", ghost: \"hover:bg-accent hover:text-accent-foreground\", link: \"text-primary underline-offset-4 hover:underline\", warning: \"bg-yellow-500 text-black hover:bg-yellow-700\", }, size: { default: \"h-10 px-4 py-2\", sm: \"h-9 rounded-md px-3\", lg: \"h-11 rounded-md px-8\", icon: \"h-10 w-10\", }, }, defaultVariants: { variant: \"default\", size: \"default\", }, }) Agregar a app/globals.csshtml,body,:root { height: 100%;}Estructura de carpetas, grupos, rutas y paginas Instalar https://marketplace.visualstudio.com/items?itemName=burkeholland.simple-react-snippets Instalar https://marketplace.visualstudio.com/items?itemName=NextNav.NextNav Crear pagina de ejemplo app/test/page.tsxconst TestPage = () =&gt; { return ( &lt;div&gt;Pagina de prueba&lt;/div&gt; );};export default TestPage; Crear ruta app/api/test/route.tsimport { NextResponse } from \"next/server\";export async function GET() { return NextResponse.json({ test: \"Hello World APIv1\" });} Crear app/(group)/ruta_a/page.tsxconst RutaA = () =&gt; { return ( &lt;div&gt; Esta es la ruta A dentro de una carpeta grupal &lt;/div&gt; );}export default RutaA; Crear app/(group)/ruta_b/page.tsxconst RutaB = () =&gt; { return ( &lt;div&gt; Esta es la ruta B dentro de una carpeta grupal &lt;/div&gt; );}export default RutaB; Crear app/(group)/layout.tsxconst GroupLayout = ({ children }: { children: React.ReactNode }) =&gt; { return ( &lt;div className=\"h-full bg-slate-600 text-white\"&gt; {children} &lt;/div&gt; );}export default GroupLayout; Borrar los archivos y carpetas de esta sección Crear app/(dashboard)/(routes) y mover dentro app/page.tsxAutenticación Crear cuenta en https://clerk.com/ Crear aplicación, seleccionar NextJS y copiar llaves Añadir .env al archivo .gitignore Crear archivo .env en la raiz del proyecto y pegar las llaves https://clerk.com/docs/quickstarts/nextjs instalar el paquete de clerk npm install @clerk/nextjs Editar app/layout.tsximport './globals.css'import type { Metadata } from 'next'import { Inter } from 'next/font/google'import { ClerkProvider } from '@clerk/nextjs'const inter = Inter({ subsets: ['latin'] })export const metadata: Metadata = { title: 'Create Next App', description: 'Generated by create next app',}export default function RootLayout({ children,}: { children: React.ReactNode}) { return ( &lt;ClerkProvider&gt; &lt;html lang=\"en\"&gt; &lt;body className={inter.className}&gt;{children}&lt;/body&gt; &lt;/html&gt; &lt;/ClerkProvider&gt; )} Crear en raíz del proyecto middleware.tsimport { authMiddleware } from \"@clerk/nextjs\";export default authMiddleware({});export const config = { matcher: ['/((?!.+\\\\.[\\\\w]+$|_next).*)', '/', '/(api|trpc)(.*)'],}; Crear app/(auth)/(routes)/sign-up/[[...sign-up]]page.tsximport { SignUp } from \"@clerk/nextjs\";export default function Page() { return &lt;SignUp /&gt;;} Crear app/(auth)/(routes)/sign-in/[[...sign-in]]page.tsximport { SignIn } from \"@clerk/nextjs\";export default function Page() { return &lt;SignIn /&gt;;} Actualizar variables de entornoNEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-inNEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-upNEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/ Editar app/(dashboard)/routes/page.tsximport { UserButton } from \"@clerk/nextjs\";export default function Home() { return ( &lt;div&gt; &lt;UserButton afterSignOutUrl=\"/\" /&gt; &lt;/div&gt; );} Crear app/(auth)/layout.tsxconst AuthLayout = ({ children }: { children: React.ReactNode }) =&gt; { return ( &lt;div className=\"h-full flex items-center justify-center\"&gt; {children} &lt;/div&gt; );}export default AuthLayout; Para rutas publicas, crear app/test/page.tsxconst TestPage = () =&gt; { return ( &lt;div&gt; &lt;h1&gt;Test Page: sin protección&lt;/h1&gt; &lt;/div&gt; );}export default TestPage; Editar middleware.ts para agregar rutas sin protecciónimport { authMiddleware } from \"@clerk/nextjs\";export default authMiddleware({ publicRoutes: [\"/test\"]});export const config = { matcher: ['/((?!.+\\\\.[\\\\w]+$|_next).*)', '/', '/(api|trpc)(.*)'],};" }, { "title": "ReactJS - parte 5", "url": "/posts/ReactJS-parte-5/", "categories": "react", "tags": "javascript, reactjs, programacion", "date": "2023-08-28 23:00:00 -0600", "snippet": "Custom HookLos hooks personalizados son muy útiles para limpiar su código. Puedes usar hooks de React dentro de tus hooks personalizados (después de todo, todas son funciones! 👍). Puede encapsular ...", "content": "Custom HookLos hooks personalizados son muy útiles para limpiar su código. Puedes usar hooks de React dentro de tus hooks personalizados (después de todo, todas son funciones! 👍). Puede encapsular mucha lógica repetitiva y luego devolver lo que necesita desde el hook personalizado.components(Header.jsxconst logo = \"./src/assets/react.svg\";const Header = () =&gt; { return ( &lt;&gt; &lt;h1 className=\"text-info text-center\"&gt;Hooks en React&lt;/h1&gt; &lt;img className=\"rounded d-block mx-auto\" src={logo} /&gt; &lt;hr&gt;&lt;/hr&gt; &lt;/&gt; );}export default Header;App.jsximport { useCallback, useEffect, useState } from \"react\";import Header from \"./components/Header\";const App = () =&gt; { const [data, setData] = useState([]); const [url, setUrl] = useState(\"\"); //https://jsonplaceholder.typicode.com/users const handleSubmit = (e) =&gt; { e.preventDefault(); console.log(url) }; const fetchData = useCallback(async () =&gt; { try { const response = await fetch(url); if (!response.ok) { throw \"Error al conectar la API\"; } const data = await response.json(); setData(data); } catch (error) { console.log(error); setData([]); } }, [url]); useEffect(() =&gt; { fetchData(); }, [fetchData]); if (!data) return &lt;p&gt;Cargando datos...&lt;/p&gt; return ( &lt;div className=\"container\"&gt; &lt;Header /&gt; &lt;form onSubmit={handleSubmit} &gt; &lt;input className=\"form-control mb-2\" type=\"text\" placeholder=\"Ingrese un URL\" name=\"url\" value={url} onChange={(e) =&gt; setUrl(e.target.value)} /&gt; &lt;/form&gt; &lt;hr&gt;&lt;/hr&gt; &lt;pre&gt;{JSON.stringify(data, null, 2)}&lt;/pre&gt; &lt;/div&gt; );};export default App;components/Form.jsximport { useState } from \"react\";import { useFetch } from \"../hooks/useFetch\";const Form = () =&gt; { const [url, setUrl] = useState(\"\"); const { data } = useFetch(url); //https://jsonplaceholder.typicode.com/users const handleSubmit = (e) =&gt; { e.preventDefault(); console.log(url) }; return ( &lt;&gt; &lt;form onSubmit={handleSubmit} &gt; &lt;input className=\"form-control mb-2\" type=\"text\" placeholder=\"Ingrese un URL\" name=\"url\" value={url} onChange={(e) =&gt; setUrl(e.target.value)} /&gt; &lt;/form&gt; &lt;h3 className=\"text-center\"&gt;Resultados&lt;/h3&gt; &lt;hr&gt;&lt;/hr&gt; &lt;pre&gt;{JSON.stringify(data, null, 2)}&lt;/pre&gt; &lt;/&gt; );};export default Form;hooks/useFetch.jsximport { useCallback, useEffect, useState } from \"react\";export const useFetch = (url) =&gt; { const [data, setData] = useState([]); const fetchData = useCallback(async () =&gt; { try { const response = await fetch(url); if (!response.ok) { throw \"Error al conectar la API\"; } const data = await response.json(); setData(data); } catch (error) { console.log(error); setData([]); } }, [url]); useEffect(() =&gt; { fetchData(); }, [fetchData]); return { data };}App.jsximport Header from \"./components/Header\";import Form from \"./components/Form\";const App = () =&gt; { //const { data } = useFetch(\"https://jsonplaceholder.typicode.com/albums\"); return ( &lt;div className=\"container\"&gt; &lt;Header /&gt; &lt;Form /&gt; &lt;/div&gt; );};export default App;Manejo de erroresuseFetch.jsximport { useCallback, useEffect, useState } from \"react\";export const useFetch = (url) =&gt; { const [data, setData] = useState([]); const [loading, setLoading] = useState(true); const [error, setError] = useState(\"\"); const fetchData = useCallback(async () =&gt; { setLoading(true); try { if (!url) { throw Error(\"No se ha especificado una URL\"); } else { const response = await fetch(url); if (!response.ok) { throw Error(\"Error al conectar la API\"); } const data = await response.json(); setData(data); setError(\"\") } } catch (error) { console.log(error.message); setError(error.message); setData([]); } finally { setLoading(false); } }, [url]); useEffect(() =&gt; { fetchData(); }, [fetchData]); return { data, loading, error };}Form.jsximport { useState } from \"react\";import { useFetch } from \"../hooks/useFetch\";const Form = () =&gt; { const [url, setUrl] = useState(''); const { data, loading, error } = useFetch(url); //https://jsonplaceholder.typicode.com/users const handleSubmit = (e) =&gt; { setUrl(e.target.url.value); e.preventDefault(); console.log(url) }; if (loading) return &lt;p&gt;Cargando...&lt;/p&gt; return ( &lt;&gt; &lt;form onSubmit={handleSubmit} &gt; &lt;input className=\"form-control mb-2\" type=\"text\" placeholder=\"Ingrese un URL\" name=\"url\" value={url} onChange={(e) =&gt; setUrl(e.target.value)} /&gt; &lt;/form&gt; &lt;hr&gt;&lt;/hr&gt; { ( error ) ? &lt;p className=\"badge rounded-pill bg-warning text-dark\"&gt;{error} &lt;/p&gt; : &lt;pre&gt;{JSON.stringify(data, null, 2)}&lt;/pre&gt; } &lt;/&gt; );};export default Form;Syntax Highlighter https://github.com/react-syntax-highlighter/react-syntax-highlighter npm install react-syntax-highlighter --save ⁠Form.jsximport { useState } from \"react\";import { useFetch } from \"../hooks/useFetch\";import SyntaxHighlighter from 'react-syntax-highlighter';import { monokaiSublime } from 'react-syntax-highlighter/dist/esm/styles/hljs';const Form = () =&gt; { const [url, setUrl] = useState(''); const { data, loading, error } = useFetch(url); //https://jsonplaceholder.typicode.com/users const handleSubmit = (e) =&gt; { setUrl(e.target.url.value); e.preventDefault(); console.log(url) }; if (loading) return &lt;p&gt;Cargando...&lt;/p&gt; return ( &lt;&gt; &lt;form onSubmit={handleSubmit} &gt; &lt;input className=\"form-control mb-2\" type=\"text\" placeholder=\"Ingrese un URL\" name=\"url\" value={url} onChange={(e) =&gt; setUrl(e.target.value)} /&gt; &lt;/form&gt; &lt;hr&gt;&lt;/hr&gt; {(error) ? &lt;p className=\"badge rounded-pill bg-warning text-dark\"&gt; {error} &lt;/p&gt; : &lt;SyntaxHighlighter language=\"json\" style={monokaiSublime} showLineNumbers={true}&gt; {JSON.stringify(data, null, 2)} &lt;/SyntaxHighlighter&gt; } &lt;/&gt; );};export default Form;Custom Hook useGif Instalar axios npm i axios Generar API_KEY de https://developers.giphy.com ⁠components/Header.jsxconst logo = \"./src/assets/react.svg\";const Header = () =&gt; { return ( &lt;&gt; &lt;h1 className=\"text-info text-center\"&gt;Hook personalizado en React&lt;/h1&gt; &lt;img className=\"rounded d-block mx-auto\" src={logo} /&gt; &lt;hr&gt;&lt;/hr&gt; &lt;/&gt; );}export default Header; components/Random_v1.jsximport { useState, useEffect } from 'react';import axios from 'axios';const API_KEY = 'szInMDHl8WSrGGDZjbNSbUNYX5DmC8Fq';const Random = () =&gt; { const [gif, setGif] = useState(''); const fetchGif = async () =&gt; { const url = `https://api.giphy.com/v1/gifs/random?api_key=${API_KEY}`; const { data } = await axios.get(url); const imageSrc = data.data.images.downsized_large.url; setGif(imageSrc); } useEffect(() =&gt; { fetchGif(); }, []); const handleClick = () =&gt; { fetchGif(); } return ( &lt;div className=\"col-sm-6 text-center\"&gt; &lt;h2 className=\"text-info\"&gt;Random Gif v1&lt;/h2&gt; &lt;img width=\"500\" src={gif} alt=\"Random Gif\" /&gt; &lt;br /&gt;&lt;br /&gt; &lt;button className='btn btn-info' onClick={handleClick}&gt;Cargar nuevo Gif&lt;/button&gt; &lt;/div&gt; );}export default Random; components/Tag_v1.jsximport { useState, useEffect } from 'react';import axios from 'axios';const API_KEY = 'szInMDHl8WSrGGDZjbNSbUNYX5DmC8Fq';const Tag = () =&gt; { const [tag, setTag] = useState('cats'); const [gif, setGif] = useState(''); const fetchGif = async (tag) =&gt; { const url = `https://api.giphy.com/v1/gifs/random?api_key=${API_KEY}&amp;tag=${tag}`; const { data } = await axios.get(url); const imageSrc = data.data.images.downsized_large.url; setGif(imageSrc); } useEffect(() =&gt; { fetchGif(tag); }, [tag]); const handleClick = () =&gt; { fetchGif(tag); } return ( &lt;div className=\"col-sm-6 text-center\"&gt; &lt;h2 className=\"text-info\"&gt;Random Gif de { tag } v1&lt;/h2&gt; &lt;img width=\"500\" src={gif} alt=\"Tag Gif\" /&gt; &lt;br /&gt;&lt;br /&gt; &lt;input className=\"form-control mb-2\" value={tag} onChange={(e) =&gt; setTag(e.target.value)} /&gt; &lt;button className='btn btn-info' onClick={handleClick}&gt;Buscar Gif&lt;/button&gt; &lt;/div&gt; );}export default Tag; App.jsximport Header from \"./components/Header\";import Random from \"./components/Random_v1\";import Tag from \"./components/Tag_v1\";const App = () =&gt; { return ( &lt;div className=\"container\"&gt; &lt;Header /&gt; &lt;div className=\"row\"&gt; &lt;Random /&gt; &lt;Tag /&gt; &lt;/div&gt; &lt;/div&gt; );};export default App; Crear custom hook hooks/useGif.jsximport { useState, useEffect } from 'react';import axios from 'axios';const API_KEY = 'szInMDHl8WSrGGDZjbNSbUNYX5DmC8Fq';const url = `https://api.giphy.com/v1/gifs/random?api_key=${API_KEY}`;const useGif = (tag) =&gt; { const [gif, setGif] = useState(''); const fetchGif = async (tag) =&gt; { const { data } = await axios.get(tag ? `${url}&amp;tag=${tag}` : url); const imageSrc = data.data.images.downsized_large.url; setGif(imageSrc); } useEffect(() =&gt; { fetchGif(tag); }, [tag]); return { gif, fetchGif }}export default useGif; components/Random_v2.jsximport useGif from '../hooks/useGif';const Tag = () =&gt; { const {gif, fetchGif} = useGif(); return ( &lt;div className=\"col-sm-6 text-center\"&gt; &lt;h2 className=\"text-info\"&gt;Random Gif v2&lt;/h2&gt; &lt;img width=\"500\" src={gif} alt=\"Random Gif\" /&gt; &lt;br /&gt;&lt;br /&gt; &lt;button className='btn btn-info' onClick={fetchGif}&gt;Cargar nuevo Gif&lt;/button&gt; &lt;/div&gt; );}export default Tag; components/Tag_v2.jsximport { useState } from 'react';import useGif from '../hooks/useGif';const Tag = () =&gt; { const [tag, setTag] = useState('cats'); const {gif, fetchGif} = useGif(tag); return ( &lt;div className=\"col-sm-6 text-center\"&gt; &lt;h2 className=\"text-info\"&gt;Random Gif de { tag } v2&lt;/h2&gt; &lt;img width=\"500\" src={gif} alt=\"Random Gif\" /&gt; &lt;br /&gt;&lt;br /&gt; &lt;input className=\"form-control mb-2\" value={tag} onChange={(e) =&gt; setTag(e.target.value)} /&gt; &lt;button className='btn btn-info' onClick={() =&gt; fetchGif(tag)}&gt;Buscar Gif&lt;/button&gt; &lt;/div&gt; );}export default Tag; ⁠App.jsximport Header from \"./components/Header\";import Random from \"./components/Random_v2\";import Tag from \"./components/Tag_v2\";const App = () =&gt; { return ( &lt;div className=\"container\"&gt; &lt;Header /&gt; &lt;div className=\"row\"&gt; &lt;Random /&gt; &lt;Tag /&gt; &lt;/div&gt; &lt;/div&gt; );};export default App;" }, { "title": "ReactJS - parte 4", "url": "/posts/ReactJS-parte-4/", "categories": "react", "tags": "javascript, reactjs, programacion", "date": "2023-08-23 23:00:00 -0600", "snippet": "useEffectuseEffect: El Hook de efecto te permite llevar a cabo efectos secundarios en componentes funcionales.¿Qué hace useEffect? Al usar este Hook, le estamos indicando a React que el componente ...", "content": "useEffectuseEffect: El Hook de efecto te permite llevar a cabo efectos secundarios en componentes funcionales.¿Qué hace useEffect? Al usar este Hook, le estamos indicando a React que el componente tiene que hacer algo después de renderizarse. React recordará la función que le hemos pasado (nos referiremos a ella como nuestro “efecto”), y la llamará más tarde después de actualizar el DOM. En este efecto, actualizamos el título del documento, pero también podríamos hacer peticiones de datos o invocar alguna API imperativa.¿Por qué se llama a useEffect dentro del componente? Poner useEffect dentro del componente nos permite acceder a la variable de estado count (o a cualquier prop) directamente desde el efecto. No necesitamos una API especial para acceder a ella, ya que se encuentra en el ámbito de la función. Los Hooks aprovechan los closures de JavaScript y evitan introducir APIs específicas de React donde JavaScript ya proporciona una solución.¿Se ejecuta useEffect después de cada renderizado? ¡Sí! Por defecto se ejecuta después del primer renderizado y después de cada actualización. Más tarde explicaremos cómo modificar este comportamiento. En vez de pensar en términos de “montar” y “actualizar”, puede resultarte más fácil pensar en efectos que ocurren “después del renderizado”. React se asegura de que el DOM se ha actualizado antes de llevar a cabo el efecto.App.jsximport Header from \"./components/Header\";import { useState } from \"react\";const App = () =&gt; { const [contador, setContador] = useState(0); return ( &lt;div className=\"container\"&gt; &lt;Header /&gt; &lt;div className=\"text-center\"&gt; &lt;button className=\"btn btn-info\" onClick={() =&gt; setContador(contador + 1)}&gt; Contador: {contador} &lt;/button&gt; &lt;/div&gt; &lt;/div&gt; );};export default App;Agregando UseEffect, el cual toma una función de callback como primer argumento y un array de dependencia como segundo. ¿Por qué veo dos logs?Si ves que se repiten tus logs, es porque está activado strict mode en React. En producción no deberías verlo.más info stric mode //import React from 'react'import ReactDOM from 'react-dom/client'import App from './App.jsx'import './index.css'ReactDOM.createRoot(document.getElementById('root')).render( //&lt;React.StrictMode&gt; &lt;App /&gt; //&lt;/React.StrictMode&gt;,) ¿Cómo podemos hacer que useEffect se ejecute solo una vez? Le pasamos un array vacío como segundo argumento.useEffect(() =&gt; { console.log(\"useEffect\");}, []);¿como podemos hacer que useEffect este pendiente de algo? useEffect(() =&gt; { console.log(\"useEffect\"); }, [contador]);fetchUna de las funciones más importantes de useEffect es la de hacer peticiones a una API.import Header from \"./components/Header\";import { useEffect, useState } from \"react\";const App = () =&gt; { const [contador, setContador] = useState(0); const [data, setData] = useState([]); console.log(\"App\"); useEffect(() =&gt; { console.log(\"useEffect\"); fetch(\"https://jsonplaceholder.typicode.com/users\") .then((response) =&gt; response.json()) .then((data) =&gt; setData(data)); }, []); if (!data) return &lt;p&gt;Cargando datos...&lt;/p&gt;; return ( &lt;div className=\"container\"&gt; &lt;Header /&gt; &lt;div className=\"text-center\"&gt; &lt;button className=\"btn btn-info\" onClick={() =&gt; setContador(contador + 1)}&gt; Contador: {contador} &lt;/button&gt; &lt;/div&gt; &lt;hr&gt;&lt;/hr&gt; &lt;ul&gt; {data.map((user) =&gt; ( &lt;li key={user.id}&gt;{user.name}&lt;/li&gt; ))} &lt;/ul&gt; &lt;/div&gt; );};export default App;async awaitTambién podemos usar async await para hacer peticiones a una API. Pero para ello necesitamos una función async.El problema: useEffect(async () =&gt; { console.log(\"useEffect\"); const response = await fetch(\"https://jsonplaceholder.typicode.com/users\"); const data = await response.json(); setData(data); }, []); DANGER Parece que escribiste useEffect(async () =&gt; …) o devolviste una Promesa. En su lugar, escribe la función asíncrona dentro de tu efecto y llámala inmediatamente. useEffect debe devolver una función de limpieza o nada. El problema aquí es que se supone que el primer argumento de useEffect es una función que no devuelve nada (undefined) o una función (para limpiar los efectos secundarios). ¡Pero una función asíncrona devuelve una Promesa, que no se puede llamar como una función! Simplemente no es lo que el useEffect espera para su primer argumento. más infoSolución: useEffect(() =&gt; { console.log(\"useEffect\"); const fetchData = async () =&gt; { const response = await fetch( \"https://jsonplaceholder.typicode.com/users\" ); const data = await response.json(); setData(data); }; fetchData(); }, []);Solución con try y catch: useEffect(() =&gt; { console.log(\"useEffect\"); const fetchData = async () =&gt; { try { const response = await fetch( \"https://jsonplaceholder.typicode.com/users\" ); if (!response.ok) { throw \"Error al conectar la API\"; } const data = await response.json(); setData(data); } catch (error) { console.log(error); setData([]); } }; fetchData(); }, []);Extraer funciónimport Header from \"./components/Header\";import { useEffect, useState } from \"react\";const App = () =&gt; { const [contador, setContador] = useState(0); const [data, setData] = useState([]); console.log(\"App\"); const fetchData = async () =&gt; { try { const response = await fetch(\"https://jsonplaceholder.typicode.com/users\"); if (!response.ok) { throw \"Error al conectar la API\"; } const data = await response.json(); setData(data); } catch (error) { console.log(error); setData([]); } }; useEffect(() =&gt; { console.log(\"useEffect\"); fetchData(); }, []); if (!data) return &lt;p&gt;Cargando datos...&lt;/p&gt;; return ( &lt;div className=\"container\"&gt; &lt;Header /&gt; &lt;div className=\"text-center\"&gt; &lt;button className=\"btn btn-info\" onClick={() =&gt; setContador(contador + 1)}&gt; Contador: {contador} &lt;/button&gt; &lt;/div&gt; &lt;hr&gt;&lt;/hr&gt; &lt;ul&gt; {data.map((user) =&gt; ( &lt;li key={user.id}&gt;{user.name}&lt;/li&gt; ))} &lt;/ul&gt; &lt;/div&gt; );};export default App; WARNINGNuevamente una advertencia: Cada vez que el componente se renderize se creará la función fetchData. Si no queremos que se cree cada vez, podemos usar useCallback.useCallBackuseCallback es un hook que nos permite memorizar una función. Esto quiere decir que si la función que le pasamos como argumento no ha cambiado, useCallback no la volverá a crear.Necesitas pasar dos cosas a useCallback: Una definición de función que desea almacenar en caché entre renderizaciones. Una lista de dependencias que incluye cada valor dentro de su componente que se usa dentro de su función. ¡No es necesario useCallback!Estos ejemplos son para explicar el concepto, pero no es necesario usar useCallback en este caso., ya que no tiene un gran impacto en el rendimiento. Pero es bueno saberlo para cuando lo necesites.Más info aquíimport Header from \"./components/Header\";import { useEffect, useState, useCallback } from \"react\";const App = () =&gt; { const [contador, setContador] = useState(0); const [data, setData] = useState([]); console.log(\"App\"); const fetchData = useCallback (async () =&gt; { try { const response = await fetch(\"https://jsonplaceholder.typicode.com/users\"); if (!response.ok) { throw \"Error al conectar la API\"; } const data = await response.json(); setData(data); } catch (error) { console.log(error); setData([]); } }, []); useEffect(() =&gt; { console.log(\"useEffect\"); fetchData(); }, [fetchData]);" }, { "title": "ReactJS - parte 3", "url": "/posts/ReactJS-parte-3/", "categories": "react", "tags": "javascript, reactjs, programacion", "date": "2023-08-10 23:00:00 -0600", "snippet": "Recursos form react uncontrolled components useRef formData form react ReferenciasComponentes no controlados uncontrolled: En la mayoría de los casos, te recomendamos usar Componentes control...", "content": "Recursos form react uncontrolled components useRef formData form react ReferenciasComponentes no controlados uncontrolled: En la mayoría de los casos, te recomendamos usar Componentes controlados para implementar formularios. En un componente controlado, los datos del formulario son manejados por un componente React. La alternativa son los componentes no controlados, donde los datos del formulario son manejados por el propio DOM. Para escribir un componente no controlado, puedes usar una referencia para que obtengas los valores del formulario desde el DOM. Referencias y el DOM refs: Las referencias proporcionan una forma de acceder a los nodos del DOM o a elementos React creados en el método de renderizado. useRef: useRef devuelve un objeto ref mutable cuya propiedad .current se inicializa con el argumento pasado (initialValue). El objeto devuelto se mantendrá persistente durante la vida completa del componente. ⁠components/Header.jsxconst logo = \"./src/assets/react.svg\";const Header = () =&gt; { return ( &lt;&gt; &lt;h1 className=\"text-info text-center\"&gt;Formularios en React&lt;/h1&gt; &lt;img className=\"rounded d-block mx-auto\" src={logo} /&gt; &lt;hr&gt;&lt;/hr&gt; &lt;/&gt; );}export default Header;components/NoControlado.jsxconst NoControlado = () =&gt; { // Formulario no controlado const handleSubmit = () =&gt; { console.log(\"Formulario enviado\"); }; return ( &lt;div className=\"container mt-2\"&gt; &lt;form onSubmit={handleSubmit} &gt; &lt;input className=\"form-control mb-2\" type=\"text\" placeholder=\"Ingrese un TODO\" name=\"todoNombre\" defaultValue=\"Tarea #01\" /&gt; &lt;textarea className=\"form-control mb-2\" type=\"text\" placeholder=\"Ingrese un TODO\" name=\"todoDescripcion\" defaultValue=\"Descripción tarea #01\" /&gt; &lt;select className=\"form-control mb-2\" name=\"todoEstado\" defaultValue=\"completado\" &gt; &lt;option value=\"pendiente\"&gt;Pendiente&lt;/option&gt; &lt;option value=\"completado\"&gt;Completado&lt;/option&gt; &lt;/select&gt; &lt;button className=\"btn btn-primary\" type=\"submit\" &gt; Agregar &lt;/button&gt; &lt;/form&gt; &lt;/div&gt; );};export default NoControlado;⁠App.jsximport NoControlado from \"./components/FormularioNoControlado\";import Header from \"./components/Header\";const App = () =&gt; { return ( &lt;div className=\"container\"&gt; &lt;Header/&gt; &lt;div className=\"row\"&gt; &lt;NoControlado/&gt; &lt;/div&gt; &lt;/div&gt; );};export default App; Prevent Default modificar NoControlado.jsxconst NoControlado = () =&gt; { // Formulario no controlado const handleSubmit = (e) =&gt; { console.log(\"Formulario enviado\"); console.log(formulario.current); e.preventDefault(); }; /* document.addEventListener(\"submit\", (evento) =&gt; { evento.preventDefault(); }); */ return ( &lt;div className=\"col-sm-6\"&gt; &lt;form onSubmit={handleSubmit} /*onSubmit={(e) =&gt; handleSubmit(e)}*/ &gt; &lt;input className=\"form-control mb-2\" type=\"text\" placeholder=\"Ingrese un TODO\" name=\"todoNombre\" defaultValue=\"Tarea #01\" /&gt; &lt;textarea className=\"form-control mb-2\" type=\"text\" placeholder=\"Ingrese un TODO\" name=\"todoDescripcion\" defaultValue=\"Descripción tarea #01\" /&gt; &lt;select className=\"form-select mb-2\" name=\"todoEstado\" defaultValue=\"pendiente\" &gt; &lt;option value=\"pendiente\"&gt;Pendiente&lt;/option&gt; &lt;option value=\"completado\"&gt;Completado&lt;/option&gt; &lt;/select&gt; &lt;button className=\"btn btn-info\" type=\"submit\" &gt; Agregar &lt;/button&gt; &lt;/form&gt; &lt;/div&gt; );};export default NoControlado; Usualmente para capturar los datos de un formulario se debe de usar un id al mismo. sin embargo esto daria problemas con el DOM virtual de React. Por lo que usamos un hook llamado useRefimport { useRef } from \"react\";const NoControlado = () =&gt; { const formulario = useRef(null); // Formulario no controlado const handleSubmit = (e) =&gt; { console.log(\"Formulario enviado\"); console.log(formulario.current); e.preventDefault(); }; /* document.addEventListener(\"submit\", (evento) =&gt; { evento.preventDefault(); }); */ return ( &lt;div className=\"col-sm-6\"&gt; &lt;form onSubmit={handleSubmit} ref={formulario} &gt; &lt;input className=\"form-control mb-2\" type=\"text\" placeholder=\"Ingrese un TODO\" name=\"todoNombre\" defaultValue=\"Tarea #01\" /&gt; &lt;textarea className=\"form-control mb-2\" type=\"text\" placeholder=\"Ingrese un TODO\" name=\"todoDescripcion\" defaultValue=\"Descripción tarea #01\" /&gt; &lt;select className=\"form-select mb-2\" name=\"todoEstado\" defaultValue=\"pendiente\" &gt; &lt;option value=\"pendiente\"&gt;Pendiente&lt;/option&gt; &lt;option value=\"completado\"&gt;Completado&lt;/option&gt; &lt;/select&gt; &lt;button className=\"btn btn-info\" type=\"submit\" &gt; Agregar &lt;/button&gt; &lt;/form&gt; &lt;/div&gt; );};export default NoControlado;FormData modificar NoControlado.jsximport { useRef, useState } from \"react\";const NoControlado = () =&gt; { const formulario = useRef(null); const [error, setError] = useState(null); // Formulario no controlado const handleSubmit = (e) =&gt; { console.log(\"Formulario enviado\"); //console.log(formulario.current); e.preventDefault(); setError(null); //?Capturar datos del formulario // El método FormData() crea un objeto FormData que representa un conjunto de pares clave/valor. const datos = new FormData(formulario.current); // spread operator: permite a un elemento iterable ser expandido // copia cada uno de sus elementos console.log([...datos.entries()]); // El método Object.fromEntries() transforma una lista de pares con [clave-valor] en un objeto. const objetoDatos = Object.fromEntries([...datos.entries()]); console.log(objetoDatos); //?Validaciones if (!objetoDatos.todoNombre.trim()) { return console.log(\"Campo vacío\"); } if (!objetoDatos.todoNombre.trim() || !objetoDatos.todoDescripcion.trim() || !objetoDatos.todoEstado.trim()) { return setError(\"* Llena todos los campos\"); } console.log(\"Pasó las validaciones!\"); formulario.current.reset(); }; /* document.addEventListener(\"submit\", (evento) =&gt; { evento.preventDefault(); }); */ return ( &lt;div className=\"col-sm-6\"&gt; &lt;h2 className=\"text-info\"&gt;Formulario No Controlado&lt;/h2&gt; &lt;form onSubmit={handleSubmit} //onSubmit={(e) =&gt; handleSubmit(e)} ref={formulario} &gt; &lt;input className=\"form-control mb-2\" type=\"text\" placeholder=\"Ingrese un TODO\" name=\"todoNombre\" defaultValue=\"Tarea #01\" /&gt; &lt;textarea className=\"form-control mb-2\" type=\"text\" placeholder=\"Ingrese un TODO\" name=\"todoDescripcion\" defaultValue=\"Descripción tarea #01\" /&gt; &lt;select className=\"form-select mb-2\" name=\"todoEstado\" defaultValue=\"pendiente\" &gt; &lt;option value=\"pendiente\"&gt;Pendiente&lt;/option&gt; &lt;option value=\"completado\"&gt;Completado&lt;/option&gt; &lt;/select&gt; &lt;button className=\"btn btn-info\" type=\"submit\" &gt; Agregar &lt;/button&gt; {error !== \"\" &amp;&amp; &lt;&gt; &lt;hr&gt;&lt;/hr&gt; &lt;span className=\"text-warning\"&gt;{error}&lt;/span&gt; &lt;/&gt; } &lt;/form&gt; &lt;/div&gt; );};export default NoControlado;Componentes controlados controlled Los componentes React que renderizan un formulario también controlan lo que pasa en ese formulario con las subsecuentes entradas del usuario. Ahora vamos a poder detectar los campos input en tiempo real.components/Controlado.jsxconst Controlado = () =&gt; { // Formulario controlado const handleSubmit = (e) =&gt; { e.preventDefault(); }; return ( &lt;div className=\"col-sm-6\"&gt; &lt;h2 className=\"text-info\"&gt;Formulario Controlado&lt;/h2&gt; &lt;form onSubmit={handleSubmit} &gt; &lt;input className=\"form-control mb-2\" type=\"text\" placeholder=\"Ingrese un TODO\" name=\"todoNombre\" /&gt; &lt;textarea className=\"form-control mb-2\" type=\"text\" placeholder=\"Ingrese un TODO\" name=\"todoDescripcion\" /&gt; &lt;select className=\"form-select mb-2\" name=\"todoEstado\" &gt; &lt;option value=\"pendiente\"&gt;Pendiente&lt;/option&gt; &lt;option value=\"completado\"&gt;Completado&lt;/option&gt; &lt;/select&gt; &lt;button className=\"btn btn-info\" type=\"submit\" &gt; Agregar &lt;/button&gt; &lt;/form&gt; &lt;/div&gt; );};export default Controlado; modificando con useStateimport { useState } from \"react\";const Controlado = () =&gt; { const [todoNombre, setTodoNombre] = useState(\"Tarea #1\"); const [todoDescripcion, setTodoDescripcion] = useState(\"Descripción tarea #01\"); const [todoEstado, setTodoEstado] = useState(\"pendiente\"); // Formulario controlado const handleSubmit = (e) =&gt; { e.preventDefault(); console.log(todoNombre, todoDescripcion, todoEstado) }; return ( &lt;div className=\"col-sm-6\"&gt; &lt;h2 className=\"text-info\"&gt;Formulario Controlado&lt;/h2&gt; &lt;form onSubmit={handleSubmit} &gt; &lt;input className=\"form-control mb-2\" type=\"text\" placeholder=\"Ingrese un TODO\" name=\"todoNombre\" value={todoNombre} onChange={(e) =&gt; setTodoNombre(e.target.value)} /&gt; &lt;textarea className=\"form-control mb-2\" type=\"text\" placeholder=\"Ingrese un TODO\" name=\"todoDescripcion\" value={todoDescripcion} onChange={(e) =&gt; setTodoDescripcion(e.target.value)} /&gt; &lt;select className=\"form-select mb-2\" name=\"todoEstado\" value={todoEstado} onChange={(e) =&gt; setTodoEstado(e.target.value)} &gt; &lt;option value=\"pendiente\"&gt;Pendiente&lt;/option&gt; &lt;option value=\"completado\"&gt;Completado&lt;/option&gt; &lt;/select&gt; &lt;button className=\"btn btn-info\" type=\"submit\" &gt; Agregar &lt;/button&gt; &lt;/form&gt; &lt;/div&gt; );};export default Controlado; Variante con useState como objeto y funcion para manejar el OnChange import { useState } from \"react\";const Controlado = () =&gt; { const [todo, setTodo] = useState({ todoNombre: \"Tarea #01\", todoDescripcion: \"Descripción tarea #01\", todoEstado: \"pendiente\", }); // Formulario controlado const handleSubmit = (e) =&gt; { e.preventDefault(); console.log(todo) }; const handleOnChange = (e) =&gt; { // console.log(e.target.name); // console.log(e.target.value); // setTodo({ ...todo, [e.target.name]: e.target.value }); // utilizando el callback setTodo((todo) =&gt; ({ ...todo, [e.target.name]: e.target.value, })); }; return ( &lt;div className=\"col-sm-6\"&gt; &lt;h2 className=\"text-info\"&gt;Formulario Controlado&lt;/h2&gt; &lt;form onSubmit={handleSubmit} &gt; &lt;input className=\"form-control mb-2\" type=\"text\" placeholder=\"Ingrese un TODO\" name=\"todoNombre\" value={todo.todoNombre} onChange={handleOnChange} /&gt; &lt;textarea className=\"form-control mb-2\" type=\"text\" placeholder=\"Ingrese un TODO\" name=\"todoDescripcion\" value={todo.todoDescripcion} onChange={handleOnChange} /&gt; &lt;select className=\"form-select mb-2\" name=\"todoEstado\" value={todo.todoEstado} onChange={handleOnChange} &gt; &lt;option value=\"pendiente\"&gt;Pendiente&lt;/option&gt; &lt;option value=\"completado\"&gt;Completado&lt;/option&gt; &lt;/select&gt; &lt;button className=\"btn btn-info\" type=\"submit\" &gt; Agregar &lt;/button&gt; &lt;/form&gt; &lt;/div&gt; );};export default Controlado;" }, { "title": "ReactJS - parte 2", "url": "/posts/ReactJS-parte-2/", "categories": "react", "tags": "javascript, reactjs, programacion", "date": "2023-08-09 23:00:00 -0600", "snippet": "Manejando eventos eventos Los eventos de React se nombran usando camelCase, en vez de minúsculas. Con JSX pasas una función como el manejador del evento, en vez de un stringconst MiBoton = ({ te...", "content": "Manejando eventos eventos Los eventos de React se nombran usando camelCase, en vez de minúsculas. Con JSX pasas una función como el manejador del evento, en vez de un stringconst MiBoton = ({ text, className }) =&gt; { const handleClick = (text) =&gt; { console.log(\"Haz dado click al \" + text ); }; return ( &lt;button onClick={() =&gt; handleClick(text)} className={className}&gt; {text} &lt;/button&gt; );};MiBoton.propTypes = { text: PropTypes.string.isRequired, className: PropTypes.string.isRequired,};Componentes (modularizar) components Los componentes permiten separar la interfaz de usuario en piezas independientes, reutilizables y pensar en cada pieza de forma aislada.Crear en carpeta src una carpeta llamada components donde se colocaran todos los componentescomponents/MiBoton.jsximport PropTypes from \"prop-types\";const MiBoton = ({ text, className }) =&gt; { const handleClick = (text) =&gt; { console.log(\"Haz dado click al \" + text); }; return ( &lt;button onClick={() =&gt; handleClick(text)} className={className}&gt; {text} &lt;/button&gt; );};MiBoton.propTypes = { text: PropTypes.string.isRequired, className: PropTypes.string.isRequired,};export default MiBoton;components/MensajeOnline.jsxconst MensajeOnline = () =&gt; { return &lt;h3&gt;Bienvenido usuario&lt;/h3&gt;;};export default MensajeOnline;components/MensajeOffline.jsxconst MensajeOffline = () =&gt; { return &lt;h3&gt;Usuario desconectado&lt;/h3&gt;;};export default MensajeOffline;components/UserMensaje.jsximport PropTypes from 'prop-types';import MensajeOnline from './MensajeOnline';import MensajeOffline from './MensajeOffline';const UserMensaje = ({ usuario }) =&gt; { return usuario ? &lt;MensajeOnline /&gt; : &lt;MensajeOffline /&gt;; //return &lt;h3&gt; { usuario ? ( \"Bienvenido usuario\" ) : ( \"Usuario desconectado\" ) } &lt;/h3&gt;};UserMensaje.propTypes = { usuario: PropTypes.bool.isRequired,};export default UserMensaje;components/ListaFrutas.jsximport PropTypes from 'prop-types';const ListaFrutas = ({ frutas }) =&gt; { //const frutas = [\"🍉\", \"🍌\", \"🍎\"]; return ( &lt;ul&gt; {frutas.map((fruta, index) =&gt; { return ( &lt;li key={index}&gt; {\" \"} {index} - {fruta} &lt;/li&gt; ); })} &lt;/ul&gt; );}ListaFrutas.propTypes = { frutas: PropTypes.array.isRequired,};export default ListaFrutas;App.jsximport MiBoton from \"./components/MiBoton\";import UserMensaje from \"./components/UserMensaje\";import ListaFrutas from \"./components/ListaFrutas\";const App = () =&gt; { const titulo = \"Mi primer proyecto con React.JS\"; const subtitulo = \"Lorem ipsum dolor sit amet consectetur adipisicing elit\"; const imagen = \"https://picsum.photos/600/400\"; const logo = \"./src/assets/react.svg\"; const clases = { titulo: \"text-info text-center\", subtitulo: \"text-info text-center\", imagenCenter: \"rounded d-block mx-auto\", }; const user = true; const frutas = [\"🍉\", \"🍌\", \"🍎\"]; const frutas2 = [\"🍐\", \"🍑\", \"🍓\"]; return ( &lt;div className=\"container\"&gt; &lt;h1 className={clases.titulo}&gt;{titulo}&lt;/h1&gt; &lt;p className={clases.subtitulo}&gt;{subtitulo}&lt;/p&gt; &lt;img className={clases.imagenCenter} src={logo} /&gt; &lt;hr&gt;&lt;/hr&gt; &lt;img className={clases.imagenCenter} src={imagen} alt={`imagen-${titulo}`} /&gt; &lt;hr&gt;&lt;/hr&gt; &lt;UserMensaje usuario={user} /&gt; &lt;hr&gt;&lt;/hr&gt; &lt;MiBoton text=\"Boton 1\" className=\"btn btn-light m-3\" /&gt; &lt;MiBoton text=\"Boton 2\" className=\"btn btn-danger m-3\" /&gt; &lt;MiBoton text=\"Boton 3\" className=\"btn btn-warning m-3\" /&gt; &lt;MiBoton text=\"Boton 4\" className=\"btn btn-success m-3\" /&gt; &lt;hr&gt;&lt;/hr&gt; &lt;ListaFrutas frutas={frutas}/&gt; &lt;ListaFrutas frutas={frutas2}/&gt; &lt;/div&gt; );};export default App; Fragmentos:fragment: Un patrón común en React es que un componente devuelva múltiples elementos. Los Fragmentos te permiten agrupar una lista de hijos sin agregar nodos extra al DOM.App.jsximport MiBoton from \"./components/MiBoton\";import UserMensaje from \"./components/UserMensaje\";import ListaFrutas from \"./components/ListaFrutas\";import React from \"react\";const App = () =&gt; { const titulo = \"Mi primer proyecto con React.JS\"; const subtitulo = \"Lorem ipsum dolor sit amet consectetur adipisicing elit\"; const imagen = \"https://picsum.photos/600/400\"; const logo = \"./src/assets/react.svg\"; const clases = { titulo: \"text-info text-center\", subtitulo: \"text-info text-center\", imagenCenter: \"rounded d-block mx-auto\", }; const user = true; const frutas = [\"🍉\", \"🍌\", \"🍎\"]; const frutas2 = [\"🍐\", \"🍑\", \"🍓\"]; return ( &lt;React.Fragment&gt; &lt;h1 className={clases.titulo}&gt;{titulo}&lt;/h1&gt; &lt;p className={clases.subtitulo}&gt;{subtitulo}&lt;/p&gt; &lt;img className={clases.imagenCenter} src={logo} /&gt; &lt;hr&gt;&lt;/hr&gt; &lt;img className={clases.imagenCenter} src={imagen} alt={`imagen-${titulo}`} /&gt; &lt;hr&gt;&lt;/hr&gt; &lt;UserMensaje usuario={user} /&gt; &lt;hr&gt;&lt;/hr&gt; &lt;MiBoton text=\"Boton 1\" className=\"btn btn-light m-3\" /&gt; &lt;MiBoton text=\"Boton 2\" className=\"btn btn-danger m-3\" /&gt; &lt;MiBoton text=\"Boton 3\" className=\"btn btn-warning m-3\" /&gt; &lt;MiBoton text=\"Boton 4\" className=\"btn btn-success m-3\" /&gt; &lt;hr&gt;&lt;/hr&gt; &lt;ListaFrutas frutas={frutas}/&gt; &lt;ListaFrutas frutas={frutas2}/&gt; &lt;/React.Fragment&gt; );};export default App;Estado El estado le permite a los componentes de React cambiar su salida a lo largo del tiempo en respuesta a acciones del usuario, respuestas de red y cualquier otra cosa. state Nada le indica a React que tenemos que volver a renderizar para pintar nuevamente button. Para hacer cambios vamos a utilizar un hook.components/BotonState.jsxconst BotonState = () =&gt; { let contador = 0; const handleClick = () =&gt; { contador = contador + 1; console.log(\"Contador: \" + contador); }; return ( &lt;div className=\"text-center\"&gt; &lt;button onClick={handleClick} className=\"btn btn-info\"&gt;Contador: {contador}&lt;/button&gt; &lt;/div&gt; );};export default BotonState;Hooks hooks Los Hooks son funciones que te permiten “enganchar” el estado de React y el ciclo de vida desde componentes de función. Los hooks no funcionan dentro de las clases — te permiten usar React sin clases. React proporciona algunos Hooks incorporados como useState. También puedes crear tus propios Hooks para reutilizar el comportamiento con estado entre diferentes componentes.useState useState¿Qué hace la llamada a useState? Declara una “variable de estado”. useState es una nueva forma de usar exactamente las mismas funciones que this.state nos da en una clase. Normalmente, las variables “desaparecen” cuando se sale de la función, pero las variables de estado son conservadas por React.¿Qué pasamos a useState como argumento? El único argumento para el Hook useState() es el estado inicial.¿Qué devuelve useState? Devuelve una pareja de valores (array): el estado actual y una función que lo actualiza.components/BotonState.jsximport { useState } from \"react\";const BotonState = () =&gt; { const [contador, setContador] = useState(0); const handleClick = () =&gt; { setContador(contador + 1); console.log(\"Contador: \" + contador); }; return ( &lt;div className=\"text-center\"&gt; &lt;button onClick={handleClick} className=\"btn btn-info\"&gt;Contador: {contador}&lt;/button&gt; &lt;/div&gt; );};export default BotonState;Resumen: Declaramos una variable de estado llamada contador y le asignamos a 0. React recordará su valor actual entre re-renderizados, y devolverá el valor más reciente a nuestra función. Si se quiere actualizar el valor de contador actual, podemos llamar a setContador. Cuando el usuario hace click, llamamos a setContador con un nuevo valor. React actualizará entonces el componente Contador pasándole el nuevo valor de contador. Nota los corchetes son intaxis de Javascript, se llama “desestructuración de arrays”." }, { "title": "Extensión para Visual Studio Code", "url": "/posts/extension-vscode/", "categories": "javascript", "tags": "javascript, vs-code, programacion", "date": "2023-07-18 23:00:00 -0600", "snippet": "¿Qué es una extensión de VS Code?Las extensiones nos permiten agregar funcionalidad a Visual Studio Code de forma modular y aislada, son una excelente manera de personalizar nuestra experiencia con...", "content": "¿Qué es una extensión de VS Code?Las extensiones nos permiten agregar funcionalidad a Visual Studio Code de forma modular y aislada, son una excelente manera de personalizar nuestra experiencia con la herramienta.PrerequisitosVisual Studio Code es un editor multiplataforma, por lo que, las herramientas que necesitamos para la creación de extensiones pueden conseguirse en Mac, Linux y obviamente, Windows. Visual Studio Code (instalador multiplataforma) NodeJS (sitio oficial) Yeoman (instalable desde NodeJS/NPM) Cuenta de Visual Studio Team Services (gratuita) si queremos publicar nuestra extensión en el Marketplace.Creación de una extensión en VS Code Referencia: https://code.visualstudio.com/api/get-started/your-first-extension Asegúrese de tener Node.js y Git instalados, luego instale Yeoman y VS Code Extension Generator con:npm install -g yo generator-code El generador construye un proyecto de TypeScript o JavaScript listo para el desarrollo. Ejecute el generador y complete algunos campos para un proyecto de TypeScript:yo codeVSCodeextensiongen Luego, dentro del editor, presiona F5. Esto compilará y ejecutará la extensión en una nueva ventana del host de desarrollo de extensiones. Ejecutar el comando Hello World desde la paleta de comandos (Ctrl+Shift+P) en la nueva ventana. package.json { \"name\": \"buscar-google\", \"displayName\": \"Buscar Google\", \"description\": \"Extension sencilla para buscar en google.com\", \"author\": \"Jaime Guevara\", \"version\": \"0.0.1\", \"engines\": { \"vscode\": \"^1.80.0\" }, \"categories\": [ \"Other\" ], \"activationEvents\": [], \"main\": \"./extension.js\", \"contributes\": { \"commands\": [{ \"command\": \"buscar-google.buscarGoogle\", \"title\": \"Buscar en Google...\" }] }, \"scripts\": { \"lint\": \"eslint .\", \"pretest\": \"npm run lint\", \"test\": \"node ./test/runTest.js\" }, \"devDependencies\": { \"@types/vscode\": \"^1.80.0\", \"@types/glob\": \"^8.1.0\", \"@types/mocha\": \"^10.0.1\", \"@types/node\": \"20.2.5\", \"eslint\": \"^8.41.0\", \"glob\": \"^8.1.0\", \"mocha\": \"^10.2.0\", \"typescript\": \"^5.1.3\", \"@vscode/test-electron\": \"^2.3.2\" }}extension.jsconst vscode = require('vscode');function activate(context) {\tlet disposable = vscode.commands.registerCommand('buscar-google.buscarGoogle', async function () {\t\tconst busqueda = await vscode.window.showInputBox({\t\t\tvalue: '',\t\t\ttitle: 'Buscar en Google',\t\t\tplaceHolder: 'Que necesitas buscar?',\t\t\tvalidateInput: (value) =&gt; {\t\t\t\tif (value === '') return 'Busqueda vacia'\t\t\t}\t\t})\t\tif (!busqueda) return\t\tvscode.env.openExternal(\t\t\tvscode.Uri.parse(`https://www.google.com/search?q=${busqueda}`)\t\t)\t});\tcontext.subscriptions.push(disposable);}function deactivate() { }module.exports = {\tactivate,\tdeactivate}" }, { "title": "ReactJS - parte 1", "url": "/posts/ReactJS-parte-1/", "categories": "react", "tags": "javascript, reactjs, programacion", "date": "2023-07-14 23:00:00 -0600", "snippet": "¿Qué es ReactJS?ReactJSRecursos es.reactjs.org beta.reactjs vitejs getting-started tutorial create-react-app getting-started-with-react es7 react js snippets¿Qué es React? React es una bib...", "content": "¿Qué es ReactJS?ReactJSRecursos es.reactjs.org beta.reactjs vitejs getting-started tutorial create-react-app getting-started-with-react es7 react js snippets¿Qué es React? React es una biblioteca Javascript para crear interfaces de usuario. React no es un framework (a diferencia de Angular o Vue, que tienen más opiniones). React es un proyecto de código abierto creado por Facebook. Está basado en componentes.ComponentesUno de los aspectos más importantes de React es el hecho de que puede crear componentes, que son como elementos HTML personalizados y reutilizables, para construir interfaces de usuario de manera rápida y eficiente. React también agiliza la forma en que se almacenan y manejan los datos, utilizando el estado y los accesorios.Requisitos node js: es un entorno en tiempo de ejecución multiplataforma, de código abierto, para la capa del servidor (pero no limitándose a ello) basado en el lenguaje de programación JavaScript. npm: NPM (Node Package Manager) es un gestor de paquetes desarrollado en su totalidad bajo el lenguaje JavaScript por Isaac Schlueter, a través del cual podemos obtener cualquier librería con tan solo una sencilla línea de código, lo cual nos permitirá agregar dependencias de forma simple, distribuir paquetes y administrar eficazmente tanto los módulos como el proyecto a desarrollar en general.¿Qué es un módulo? Un módulo no es nada más que una unidad de código organizado en archivos o directorios, la cual puede ser exportada con facilidad para poder reutilizarse en otras partes de la aplicación. External modules: Son, en esencia, los paquetes de terceros distribuidos a través de npm (aunque pueden provenir de otros repositorios). Estos paquetes se instalan como dependencias y, aunque aportan funcionalidad a la aplicación, no deben incluirse en el repositorio ya que no son parte de la misma.Instalación Vite.js CRA create react appVite Vite web oficial: Vite se define como una herramienta de frontend que te ayudará a crear proyectos (sin atarte a ningún framework concreto) y que su desarrollo y construcción final sea lo más sencilla posible. Está desarrollada por Evan You, el creador de Vue. Actualmente, Vite soporta tanto proyectos vanilla (sin utilizar frameworks), como proyectos utilizando Vue, React, Preact o Lit-element (tanto en versión Javascript, como Typescript). Fuente Templates Comunidad DEVnpm create vite@latestCRA - create-react-app create-react-app Afortunadamente, Facebook ha creado la aplicación Create React App, un entorno que viene preconfigurado con todo lo necesario para crear una aplicación React. Creará un servidor de desarrollo en vivo. No es necesario instalar ni configurar herramientas como webpack o Babel. Están preconfigurados y ocultos para que pueda concentrarse en el código. Ventaja: enfocarse en el código, no en las herramientas de compilación.npx create-react-app my-appcd my-appnpm start npx Npx es una herramienta de cli que nos permite ejecutar paquetes de npm, los busca en su servidor y lo ejecuta en nuestra máquina. Si usas npx no tienes que instalar paquetes de forma global. Busca siempre la última versión. Advertencia:Si ha instalado previamente create-react-app globalmente a través de: npm install -g create-react-app, le recomendamos que desinstale el paquete usando npm uninstall -g create-react-app o yarn global remove create-react-app para asegurarse de que npx siempre usa la última versión.CRA vs Vite Vite y CRA no son tan diferentes como podría pensar. Básicamente, hacen más o menos lo mismo, que es servir a un servidor de desarrollo local y agrupar códigos para la producción. La principal diferencia que notará es cómo se sirve el código en el desarrollo y qué módulos son compatibles. Vite no necesita agrupar la aplicación completa o transpilar los módulos y el código antes de iniciar un servidor de desarrollo; la transpilación se realiza bajo demanda, lo que la hace significativamente más rápida que CRA.Creación de componente principalLos componentes no son mas que funciones que son exportadasconst App = () =&gt; { return &lt;h1&gt;Hola desde React.js&lt;/h1&gt;}Exportaciones por Defecto solo permiten exportar una función del archivo en cuestión.const App = () =&gt; { return &lt;h1&gt;Hola desde React.js&lt;/h1&gt;}export default AppExportaciones nombradas permiten exportar varias funciones de un mismo archivo.export const App = () =&gt; { return &lt;h1&gt;Hola desde React.js&lt;/h1&gt;}El Componente App es exportado al archivo main.jsximport React from 'react'import ReactDOM from 'react-dom/client'import App from './App.jsx' //Exportacion defecto//import { App } from './App.jsx' //Exportacion nombradaimport './index.css'ReactDOM.createRoot(document.getElementById('root')).render( &lt;React.StrictMode&gt; &lt;App /&gt; &lt;/React.StrictMode&gt;,)JSX: JavaScript + XML Como ha visto, hemos estado usando lo que parece HTML en nuestro código React, pero no es HTML del todo. Esto es JSX , que significa JavaScript XML. El uso de JSX no es obligatorio para escribir React. Debajo del capó, se está ejecutando createElement, lo que toma la etiqueta, las propiedades y los elementos secundarios del componente y muestra la misma información. JSX está más cerca de JavaScript, no de HTML, por lo que hay algunas diferencias clave a tener en cuenta al escribirlo. className se usa en lugar de class para agregar clases CSS, ya que class es una palabra clave reservada en JavaScript. Las propiedades y métodos en JSX son camelCase. Las etiquetas de cierre automático deben terminar en una barra inclinada,Ej. &lt;img /&gt; Su componente tampoco puede devolver varias etiquetas JSX. Tienes que envolverlos en un padre compartido, como un envoltorio &lt;div&gt;...&lt;/div&gt; vacío o: &lt;&gt;...&lt;/&gt; Las expresiones de JavaScript también se pueden incrustar dentro de JSX usando llaves, incluidas variables, funciones y propiedades. Carpeta public:La carpeta pública contiene archivos estáticos como index. html, archivos de biblioteca de javascript, imágenes y otros activos, etc. que no desea que webpack procese. Los archivos de esta carpeta se copian y pegan tal como están directamente en la carpeta de compilación.const App = () =&gt; { const titulo = \"Mi primer proyecto con React.js\"; const imagen = \"https://picsum.photos/200/300\"; return ( &lt;div className=\"container\"&gt; &lt;h1 className=\"text-primary\"&gt;{titulo.ToUpperCase}&lt;/h1&gt; &lt;img src={imagen} alt={`imagen-${titulo}`} /&gt; &lt;/div&gt; );};export default App;const App = () =&gt; { const titulo = \"Mi primer proyecto con React.js\"; const imagen = \"https://picsum.photos/600/400\"; const clases = { titulo: \"text-info text-center\", subtitulo: \"text-center\", imagenCenter: \"rounded mx-auto d-block\", }; return ( &lt;div className=\"container\"&gt; &lt;h1 className={clases.titulo}&gt;{titulo}&lt;/h1&gt; &lt;p className={clases.subtitulo}&gt;Lorem ipsum dolor sit.&lt;/p&gt; &lt;img className={clases.imagenCenter} src=\"./src/assets/react.svg\" /&gt; &lt;hr&gt;&lt;/hr&gt; &lt;img className={clases.imagenCenter} src={imagen} alt={`Imagen de ${titulo}`} /&gt; &lt;/div&gt; );};export default App;Componentes Las aplicaciones React están hechas de componentes . Un componente es una parte de la IU (interfaz de usuario) que tiene su propia lógica y apariencia. Un componente puede ser tan pequeño como un botón o tan grande como una página entera. Los componentes de React son funciones de JavaScript:const MiBoton = () =&gt; { return &lt;button className=\"btn btn-light\"&gt;Boton&lt;/button&gt;}const App = () =&gt; { const titulo = \"Mi primer proyecto con React.js\" const imagen = \"https://picsum.photos/600/400\" const clases = { titulo: \"text-info text-center\", subtitulo: \"text-center\", imagenCenter: \"rounded mx-auto d-block\", } return ( &lt;div className=\"container\"&gt; &lt;h1 className={clases.titulo}&gt;{titulo}&lt;/h1&gt; &lt;p className={clases.subtitulo}&gt;Lorem ipsum dolor sit.&lt;/p&gt; &lt;img className={clases.imagenCenter} src=\"./src/assets/react.svg\" /&gt; &lt;hr&gt;&lt;/hr&gt; &lt;img className={clases.imagenCenter} src={imagen} alt={`Imagen de ${titulo}`} /&gt; &lt;hr&gt;&lt;/hr&gt; &lt;MiBoton /&gt; &lt;/div&gt; );};export default App; Componentes siempre en MayúsculasFíjate que &lt;MyButton /&gt; empieza con mayúscula. Así es como sabes que es un componente React. Los nombres de los componentes de React siempre deben comenzar con una letra mayúscula, mientras que las etiquetas HTML deben estar en minúsculas.Renderizado condicional condicional: En React, puedes crear distintos componentes que encapsulan el comportamiento que necesitas. Entonces, puedes renderizar solamente algunos de ellos, dependiendo del estado de tu aplicación.const MiBoton = () =&gt; { return &lt;button className=\"btn btn-light\"&gt;Boton&lt;/button&gt;}const MensajeOnline = () =&gt; { return &lt;h3&gt;Bienvenido usuario&lt;/h3&gt;;}const MensajeOffline = () =&gt; { return &lt;h3&gt;Usuario desconectado&lt;/h3&gt;;}const App = () =&gt; { const titulo = \"Mi primer proyecto con React.js\" const imagen = \"https://picsum.photos/600/400\" const clases = { titulo: \"text-info text-center\", subtitulo: \"text-center\", imagenCenter: \"rounded mx-auto d-block\", } const user = true return ( &lt;div className=\"container\"&gt; &lt;h1 className={clases.titulo}&gt;{titulo}&lt;/h1&gt; &lt;p className={clases.subtitulo}&gt;Lorem ipsum dolor sit.&lt;/p&gt; &lt;img className={clases.imagenCenter} src=\"./src/assets/react.svg\" /&gt; &lt;hr&gt;&lt;/hr&gt; &lt;img className={clases.imagenCenter} src={imagen} alt={`Imagen de ${titulo}`} /&gt; &lt;hr&gt;&lt;/hr&gt; {user ? &lt;MensajeOnline /&gt; : &lt;MensajeOffline /&gt;} &lt;MiBoton /&gt; &lt;/div&gt; );};export default App;Listas y keysconst MiBoton = () =&gt; { return &lt;button className=\"btn btn-light\"&gt;Boton&lt;/button&gt;}const MensajeOnline = () =&gt; { return &lt;h3&gt;Bienvenido usuario&lt;/h3&gt;;}const MensajeOffline = () =&gt; { return &lt;h3&gt;Usuario desconectado&lt;/h3&gt;;}const App = () =&gt; { const titulo = \"Mi primer proyecto con React.js\" const imagen = \"https://picsum.photos/600/400\" const clases = { titulo: \"text-info text-center\", subtitulo: \"text-center\", imagenCenter: \"rounded mx-auto d-block\", } const user = true const frutas = [\"🍉\", \"🍌\", \"🍎\"]; return ( &lt;div className=\"container\"&gt; &lt;h1 className={clases.titulo}&gt;{titulo}&lt;/h1&gt; &lt;p className={clases.subtitulo}&gt;Lorem ipsum dolor sit.&lt;/p&gt; &lt;img className={clases.imagenCenter} src=\"./src/assets/react.svg\" /&gt; &lt;hr&gt;&lt;/hr&gt; &lt;img className={clases.imagenCenter} src={imagen} alt={`Imagen de ${titulo}`} /&gt; &lt;hr&gt;&lt;/hr&gt; {user ? &lt;MensajeOnline /&gt; : &lt;MensajeOffline /&gt;} &lt;MiBoton /&gt; &lt;hr&gt;&lt;/hr&gt; &lt;ul&gt; {frutas.map((fruta, index) =&gt; { return &lt;li key={index}&gt;{index} - {fruta}&lt;/li&gt;; })} &lt;/ul&gt; &lt;/div&gt; );};export default App; Cuando ejecutes este código, serás advertido que una key debería ser proporcionada para ítems de lista. Una “key” es un atributo especial string que debes incluir al crear listas de elementos. Las keys ayudan a React a identificar que ítems han cambiado, son agregados, o son eliminados. Las keys deben ser dadas a los elementos dentro del array para darle a los elementos una identidad estable. React usa el key prop para crear una relación entre el componente y el elemento DOM. La biblioteca utiliza esta relación para determinar si el componente debe volver a renderizarse o no. No se recomienda utilizar el índice de la matriz como key si sabe que la matriz no será estática. Si key es un índice, reordenar un elemento en la matriz lo cambia. Entonces React se confundirá y volverá a renderizar el elemento incorrecto.props Se utiliza para enviar información al componente anidado. La información que transmites de esta manera se llama props.const MiBoton = (props) =&gt; { console.log(props); return ( &lt;button onClick={props.handleClick} className={props.className}&gt; {props.text} &lt;/button&gt; );};// Con desestructuracion/*const MiBoton = ({text, className, handleClick}) =&gt; { return &lt;button onClick={handleClick} className={className}&gt;{text}&lt;/button&gt;}*/const MensajeOnline = () =&gt; { return &lt;h3&gt;Bienvenido usuario&lt;/h3&gt;;};const MensajeOffline = () =&gt; { return &lt;h3&gt;Usuario desconectado&lt;/h3&gt;;};const App = () =&gt; { const titulo = \"Mi primer proyecto con React.js\"; const imagen = \"https://picsum.photos/600/400\"; const clases = { titulo: \"text-info text-center\", subtitulo: \"text-center\", imagenCenter: \"rounded mx-auto d-block\", }; const user = true; const frutas = [\"🍉\", \"🍌\", \"🍎\"]; const handleClick = () =&gt; { console.log(\"clicked\"); }; return ( &lt;div className=\"container\"&gt; &lt;h1 className={clases.titulo}&gt;{titulo}&lt;/h1&gt; &lt;p className={clases.subtitulo}&gt;Lorem ipsum dolor sit.&lt;/p&gt; &lt;img className={clases.imagenCenter} src=\"./src/assets/react.svg\" /&gt; &lt;hr&gt;&lt;/hr&gt; &lt;img className={clases.imagenCenter} src={imagen} alt={`Imagen de ${titulo}`} /&gt; &lt;hr&gt;&lt;/hr&gt; {user ? &lt;MensajeOnline /&gt; : &lt;MensajeOffline /&gt;} &lt;MiBoton text=\"Boton 1\" className=\"btn btn-light m-3\" handleClick={handleClick} /&gt; &lt;MiBoton text=\"Boton 2\" className=\"btn btn-warning m-3\" handleClick={handleClick} /&gt; &lt;MiBoton text=\"Boton 3\" className=\"btn btn-success m-3\" handleClick={handleClick} /&gt; &lt;MiBoton text=\"Boton 4\" className=\"btn btn-danger m-3\" handleClick={handleClick} /&gt; &lt;hr&gt;&lt;/hr&gt; &lt;ul&gt; {frutas.map((fruta, index) =&gt; { return ( &lt;li key={index}&gt; {index} - {fruta} &lt;/li&gt; ); })} &lt;/ul&gt; &lt;/div&gt; );};export default App;EsLint ESLint es una herramienta de linting para JavaScript. El linting es un proceso mediante el cual se analiza el código fuente de un programa en busca de posibles errores, problemas de estilo o prácticas desaconsejadas. ESLint permite detectar errores comunes en el código, como variables no utilizadas, funciones no definidas, declaraciones duplicadas, entre otros..eslintrc.cjs #El archivo .eslintrc.cjs es un archivo de configuración de ESLint en formato CommonJS (CJS).env #La propiedad node: true en la sección env de un archivo de configuración de ESLint indica que el código que está siendo analizado por ESLint se ejecutará en un entorno de Node.js. Esto le permite a ESLint reconocer y aplicar las reglas y configuraciones específicas de Node.js durante el proceso de linting.env: { browser: true, es2020: true, node: true },react/props-types offmodule.exports = { // ...otras configuraciones... rules: { // ...otras reglas... \"react/prop-types\": \"off\", // Desactivar validación de PropTypes },};PropTypes En React, PropTypes es una característica que permite especificar el tipo de las props (propiedades) que se pasan a los componentes. PropTypes proporciona una forma de documentar y validar las props que se esperan en un componente, lo que ayuda a evitar errores y facilita el desarrollo y mantenimiento del código.Tipos comunes de PropTypes: number: Valida que la prop sea un número. bool: Valida que la prop sea un valor booleano (true o false). array: Valida que la prop sea un array. object: Valida que la prop sea un objeto. symbol: Valida que la prop sea un símbolo. node: Valida que la prop pueda ser cualquier cosa que se pueda renderizar en React (elemento React, cadena de texto, número, fragmento, etc.). element: Valida que la prop sea un único elemento React (es decir, no un fragmento ni una cadena de texto). instanceOf(Constructor): Valida que la prop sea una instancia de una clase específica. oneOf([val1, val2, …]): Valida que la prop sea uno de los valores proporcionados en un array. oneOfType([type1, type2, …]): Valida que la prop cumpla con al menos uno de los tipos de datos especificados en un array. arrayOf(type): Valida que la prop sea un array que contenga elementos del tipo especificado. objectOf(type): Valida que la prop sea un objeto cuyos valores sean del tipo especificado.Con PropsTypes podemos validar los props que recibe un componente:import PropTypes from \"prop-types\";const MiBoton = ({text, className, handleClick}) =&gt; { return &lt;button onClick={handleClick} className={className}&gt;{text}&lt;/button&gt;}MiBoton.propTypes = { text: PropTypes.string.isRequired, className: PropTypes.string.isRequired, handleClick: PropTypes.func.isRequired,}import PropTypes from \"prop-types\";const MiBoton = ({text, className, handleClick}) =&gt; { return &lt;button onClick={handleClick} className={className}&gt;{text}&lt;/button&gt;}MiBoton.propTypes = { text: PropTypes.string.isRequired, className: PropTypes.string.isRequired, handleClick: PropTypes.func.isRequired,}const MensajeOnline = () =&gt; { return &lt;h3&gt;Bienvenido usuario&lt;/h3&gt;;};const MensajeOffline = () =&gt; { return &lt;h3&gt;Usuario desconectado&lt;/h3&gt;;};const UserMensaje = ({ usuario }) =&gt; { return usuario ? &lt;MensajeOnline /&gt; : &lt;MensajeOffline /&gt;; //return &lt;h3&gt; { usuario ? ( \"Bienvenido usuario\" ) : ( \"Usuario desconectado\" ) } &lt;/h3&gt;};UserMensaje.propTypes = { usuario: PropTypes.bool.isRequired,}const App = () =&gt; { const titulo = \"Mi primer proyecto con React.js\"; const imagen = \"https://picsum.photos/600/400\"; const clases = { titulo: \"text-info text-center\", subtitulo: \"text-center\", imagenCenter: \"rounded mx-auto d-block\", }; const user = true; const frutas = [\"🍉\", \"🍌\", \"🍎\"]; const handleClick = () =&gt; { console.log(\"clicked\"); }; return ( &lt;div className=\"container\"&gt; &lt;h1 className={clases.titulo}&gt;{titulo}&lt;/h1&gt; &lt;p className={clases.subtitulo}&gt;Lorem ipsum dolor sit.&lt;/p&gt; &lt;img className={clases.imagenCenter} src=\"./src/assets/react.svg\" /&gt; &lt;hr&gt;&lt;/hr&gt; &lt;img className={clases.imagenCenter} src={imagen} alt={`Imagen de ${titulo}`} /&gt; &lt;hr&gt;&lt;/hr&gt; {/* {user ? &lt;MensajeOnline /&gt; : &lt;MensajeOffline /&gt;} */} &lt;UserMensaje usuario={user} /&gt; &lt;MiBoton text=\"Boton 1\" className=\"btn btn-light m-3\" handleClick={handleClick} /&gt; &lt;MiBoton text=\"Boton 2\" className=\"btn btn-warning m-3\" handleClick={handleClick} /&gt; &lt;MiBoton text=\"Boton 3\" className=\"btn btn-success m-3\" handleClick={handleClick} /&gt; &lt;MiBoton text=\"Boton 4\" className=\"btn btn-danger m-3\" handleClick={handleClick} /&gt; &lt;hr&gt;&lt;/hr&gt; &lt;ul&gt; {frutas.map((fruta, index) =&gt; { return ( &lt;li key={index}&gt; {index} - {fruta} &lt;/li&gt; ); })} &lt;/ul&gt; &lt;/div&gt; );};export default App;" }, { "title": "Docker", "url": "/posts/docker-parte-1/", "categories": "docker", "tags": "docker, contenedores, imagenes", "date": "2023-03-14 23:00:00 -0600", "snippet": "¿Qué es Docker?Docker es una plataforma de software que le permite crear, probar e implementar aplicaciones rápidamente. Docker empaqueta el software en unidades estandarizadas llamadas contenedore...", "content": "¿Qué es Docker?Docker es una plataforma de software que le permite crear, probar e implementar aplicaciones rápidamente. Docker empaqueta el software en unidades estandarizadas llamadas contenedores que tienen todo lo que el software necesita para ejecutarse, incluidas bibliotecas, herramientas del sistema, código y tiempo de ejecución. Con Docker, puede implementar y escalar rápidamente aplicaciones en cualquier entorno y saber que su código se ejecutará.¿Como funciona docker?En Docker tenemos imágenes que se pueden descargar automáticamente o de la página web oficial. Al ejecutar una instancia, ésta crea un Contanier, el cual vamos a aprender a utilizar.Para poder usar estos contenedores necesitamos de unos comandos que nos permiten usarlos y utilizarlos de la manera más conveniente.Esos comandos se desarrollan en una terminal, los cuales son necesarios para dar el uso adecuado a Docker.Lo primero que tenemos que entender es que las imágenes son previas, creadas por un usuario y los contenedores o containers son aplicaciones asiladas que contienen una o más imágenes.Estos contenedores contienen todo lo necesario para ejecutar una aplicación.Docker funciona proporcionando una forma estándar de ejecutar su código. Docker es un sistema operativo para contenedores. De manera similar a cómo una máquina virtual virtualiza (elimina la necesidad de administrar directamente) el hardware del servidor, los contenedores virtualizan el sistema operativo de un servidor. Docker está instalado en cada servidor y proporciona comandos simples que puede usar para crear, iniciar o detener contenedores.¿Qué son las imágenes en Docker?Las imágenes son como unas plantillas ya creadas, ya sea por nosotros o por otros, sirviéndonos para crear nuestro contenedores.Podemos almacenarlo de manera local o en un repositorio público.Ciclo de vida de las imágenesLas imágenes en Docker tienen un ciclo de vida útil. Este puede ser avanzado y básico.Ciclo de vida básico En este ciclo de vida se crea el contenedor a partir de una imagen. Se ejecuta el proceso determinado en el contenedor El proceso de finaliza y el contenedor se detiene Se destruye el contenedorCiclo de vida avanzado Se crea un contenedor a partir de una imagen Se ejecuta un proceso en el contenedor Realiza acciones dentro del contenedor Detener el contenedor Lanzar el contenedor nuevamenteComandos DockerCreación de una imagen personalizada en Docker Crear aplicación NodeJS con ⁠npm init -y  instalar express npm install express   Crear index.js    const express = require(\"express\")const app = express()app.get(\"/\", (req, res) =&gt; { res.send(\"&lt;h1&gt;Hola Mundo&lt;/h1&gt;\")})const port = process.env.PORT || 3000app.listen(port, () =&gt; console.log(`Escuchando en el puerto ${port} 😎`)) Ejecutar con ⁠node index.js y escribir en el navegador http://localhost:3000/ Detener el servidor con Ctrl+C Crear cuenta en https://hub.docker.com/ Abrir https://hub.docker.com/_/nodeDockerFile Crear dockerfile   FROM node:18WORKDIR /appCOPY package.json .RUN npm installCOPY . ./EXPOSE 3000CMD [ \"node\", \"index.js\" ] Crear imagen con docker build . Ver lista de imágenes con docker image ls Borrar imagen con docker image rm ID_IMAGEN Crear imagen con nombre docker build -t docker-node-image .  Ver lista de imágenes con docker image ls Ejecutar Contenedor Ejecutar la imagen en un contenedor docker run -d --name node-app docker-node-image Ver lista de contenedores con docker ps Escribir en el navegador http://localhost:3000/ la aplicación no funcionara ya que no se ha especificado puerto Eliminar contenedor con docker rm node-app -f  Ejecutar la imagen con puerto con docker run -p 3000:3000 -d --name node-app docker-node-image  3000:3000 el numero de la izquierda representa el puerto desde el cual hay trafico de entrada, el de la derecha el puerto donde docker o la aplicación esta escuchando Para ver el sistema de archivos del contenedor entramos en modo interactivo con docker exec -it node-app bash Listar los archivos con ls  salir con exit Eliminar contenedorDockerIgnore Crear archivo .dockerignorenode_modulesdockerfile.dockerignore.git.gitignore Reconstruir imagen docker build -t docker-node-image .  Ejecutar contenedor docker run -p 3000:3000 -d --name node-app docker-node-image  Revisar contendor y verificar archivosIntegración de imagen para desarrollo Realizar cambios a etiqueta H1 en index.js  Verificar que no hay cambios en la imagen con docker exec -it node-app bash y luego con cat index.js Un montaje de enlace (mount bind) es otro tipo de montaje, que le permite compartir un directorio desde el sistema de archivos del host en el contenedor. Al trabajar en una aplicación, puede usar un montaje de vinculación para montar el código fuente en el contenedor. El contenedor ve los cambios que realiza en el código inmediatamente, tan pronto como guarda un archivo. Esto significa que puede ejecutar procesos en el contenedor que observen cambios en el sistema de archivos y respondan a ellos. Usando un Mount Bind para sincronizar los archivos al contendor docker run -v ${pwd}:/app -p 3000:3000 -d --name node-app docker-node-image en powershell CMD  docker run -v %cd%:/app -p 3000:3000 -d --name node-app docker-node-image  Linux y MacOS docker run -v $(pwd):/app -p 3000:3000 -d --name node-app docker-node-image Modificar index.js y verificar que el contenido se actualiza dentro el contenedor Instalar nodemon  como dependencia dev npm install nodemon --save-dev Modificar package.json{ \"name\": \"docker-node\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": { \"start\": \"node index.js\", \"dev\": \"nodemon -L index.js\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\", \"dependencies\": { \"express\": \"^4.18.2\" }, \"devDependencies\": { \"nodemon\": \"^2.0.21\" }} Modificar DockerfileFROM node:18WORKDIR /appCOPY package.json .RUN npm installCOPY . .EXPOSE 3000 CMD [ \"npm\", \"run\", \"dev\" ]Logs de contenedores Borrar carpeta node_modules  Utilizar docker ps -a para mostrar los contendores ejecutados Usar docker logs NOMBRE_CONTENEDOR para ver logs del contenedor Evitar que el bind mount sobreescriba la carpeta node_modules del contenedor con docker run -v ${pwd}:/app -v /app/node_modules -p 3000:3000 -d --name node-app docker-node-image  Entrar al contenedor con docker exec -it node-app bash Crear archivo dentro dl contenedor con touch nombre_archivo Para que el directorio del contenedor sea solo de lectura docker run -v ${pwd}:/app:ro -v /app/node_modules -p 3000:3000 -d --name node-app docker-node-imageVariables de entorno Modificar DockerfileFROM node:18WORKDIR /appCOPY package.json .RUN npm installCOPY . .ENV PORT 3000EXPOSE $PORTCMD [ \"npm\", \"run\", \"dev\" ] Reconstruir imagen docker build -t docker-node-image .  Ejecutar contenedor con docker run -v ${pwd}:/app:ro -v /app/node_modules --env PORT=4000 -p 3000:4000 -d --name node-app docker-node-image  Entrar al contenedor con docker exec -it node-app bash Imprimir variables de entorno con printenv  Crear archivo .env PORT=4000 Eliminar contenedor con docker rm node-app -f  Eliminar imagen docker image rm docker-node-image  Reconstruir imagen docker build -t docker-node-image .  Ejecutar contenedor con docker run -v ${pwd}:/app:ro -v /app/node_modules --env-file ./.env PORT=4000 -p 3000:4000 -d --name node-app docker-node-image Borrar Volúmenes Verificar volúmenes con docker volumen ls  Eliminar con docker volume ID_VOLUMEN o docker volume prune  Eliminar contenedor y volumen con docker rm node-app -fv Docker compose Crear archivo docker-compose.yml version: '3.8'services: node-app: build: . ports: - \"3000:3000\" volumes: - ./:/app:ro - /app/node_modules environment: - PORT=3000 #env_file: #- ./.env Ejecutar docker-compose up -d Para detener docker-compose down -v Comando para forzar la reconstrucción de imagen al usar compose  docker-compose up -d --build Multiple Compose Modificar DockerfileFROM node:18WORKDIR /appCOPY package.json .RUN npm installCOPY . .ENV PORT 3000EXPOSE $PORT CMD [ \"node\", \"index.js\" ] Modificar docker-compose.yml version: '3.8'services: node-app: build: . ports: - \"3000:3000\" environment: - PORT=3000 Crear docker-compose-dev.yml version: '3.8'services: node-app: build: . volumes: - ./:/app - /app/node_modules environment: - NODE_ENV=development command: npm run dev Crear docker-compose-prod.yml version: '3.8'services: node-app: environment: - NODE_ENV=production command: node index.js Ejecutar dev mode con docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --build  Para detener docker-compose down -v  Ejecutar prod mode con docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build  Para detener docker-compose -f docker-compose.yml -f docker-compose.prod.yml down -v  Actualizar .dockerignore node_modulesDockerfile.git.gitignoredocker-compose*" }, { "title": "Comandos Docker", "url": "/posts/comandos-docker/", "categories": "docker", "tags": "docker, imagenes, contenedor", "date": "2023-03-14 23:00:00 -0600", "snippet": "DockerDocker sirver para crear contenedores ligeros y portables para las aplicaciones/software/webs se puedan ejecutar en cualquier maquina donde docker se encuentre instalado, independiente del si...", "content": "DockerDocker sirver para crear contenedores ligeros y portables para las aplicaciones/software/webs se puedan ejecutar en cualquier maquina donde docker se encuentre instalado, independiente del sistema operativo que se este ejecutando en ese momento. Un contenedor es una “caja” donde se encontrara todo lo que la aplicacion necesita para poder ejecutarse, ademas de la propia aplicacion en si misma que se esta desarrollando.Imagen VS ContenedorDocker sirve para distribuir “Maquinas”. Imagen: Lo que se distribuye. Contenedor: Lo que se ejecuta.Desde una misma imagen se puede crear multiples contenedores.Ademas es posible generar dos tipos de contenedores, los cuales son: windows: no lleva kernel de linux, por lo cual solo es recomendable para aplicaciones que requieran ejecutarse exclusivamente en windows server o similar. Linux: incluye una capa del kernel de lix para ejecutar en cualquier sistema. Docker Servicio - ComandosDocker ExecExec es un comando de administracion de contenedores.Permite ejecutar un comando sobre un contenedor que no posea entorno interactivo para trabajar, ejemplo:docker exec ID/Nombre_Contenedor echo hola-mundoEl resultado de esto seria.# Ejemplo 1[XXXX@XXX ~]# docker exec ubuntu echo hola-mundohola-mundo# Ejemplo 2[XXXX@XXX ~]# docker exec -it Nombre_Contenedor bash Este ejemplo se aplica a un contenedor que ya este en ejecucion.Docker LogsPermite ver que esta imprimiendo en pantalla un contenedor que se encuentre en segundo plano(Background).docker logs ID/Nombre_Contendor El unico problema del logs es que mostrara todo lo que ha realizado el contenedorPara Ver ultimas lineas que esta ejecutando el contenedor, las que serian de importancia y evitar que muestre toda la informacion se ocupa el –tail mas el numero de lineas que desea ver.Ejemplodocker logs ID/Nombre_Contenedor --Tail N°_Lineasdocker logs 1234asd --Tail 20 Mostrara las 20 ultimas lineas ejecutadas por el contenedor.Docker TopPermite saber cual es el proceso que mas consume recursos dentro de un contenedor.docker top ID/Nombre_ContainerDocker statsPermite ver informacion sobre un contenedor, como uso de CPU y memoria, ademas de otras cosas.docker stats ID/Nombre_ContenedorDocker InspectPermite recuperar la informacion de una imagen o contenedor, a nivel de propiedades y caracteristicas.docker inspect ID_Contenedor/ImagenEste comando entregara mucha informacion por lo cual es recomendable enviar dicha informacion a un archivo, para su posterior inspeccion`.docker inspect ID_Contenedor/Imagen &gt; Nombre_Archivo.txt La informacion se entrega en formato JSON.o realizar una busqueda especifica como la direccion IP.docker inspect --format='{ {range.NetworkSettings.Networks} } { {.IPAddress} } { {end} }' ID/Nombre_Contenedor La informacion que entrega es variada como la imagen con la cual el contenedor se genero, fecha de creacion, plataforma(linux-windows),su red, entre muchos otros.Docker imageSirve para administrar imagenes, agrupa todos los comandos que tienen relacion con las imagenes y sus Opciones son las siguientes: Comando Descripcion   build Construir una imagen a partir de un Dockerfile   history Mostrar el historial de una imagen   import Importar el contenido de una tarball para crear una imagen del sistema de archivos   inspect Mostrar información detallada sobre una o más imágenes   load Cargar una imagen de un archivo tar o STDIN   ls Listar imágenes   prune Eliminar imágenes no utilizadas   pull Extraer una imagen o un repositorio de un registro   push Empujar una imagen o un repositorio a un registro   rm Eliminar una o más imágenes   save Guardar una o más imágenes en un archivo tar (transmitidas a STDOUT por defecto)   tag Cree una etiqueta TARGET_IMAGE que haga referencia a SOURCE_IMAGE   Se puede considerar una alternativa a ciertos comandos.Ejemplo Opcion 1 Opcion 2 docker image ls docker images docker image rm docker rm Docker ContainerAl igual que docker image, docker container agrupa todos los comandos relacionados con los contenedores.Comandos Comando Descripcion attach Conecte flujos de entrada, salida y error estándar locales a un contenedor en funcionamiento. commit Crear una nueva imagen a partir de los cambios de un contenedor. cp Copiar archivos/carpetas entre un contenedor y el sistema de archivos local create Crear un nuevo contenedor diff Inspeccionar cambios en archivos o directorios en el sistema de archivos de un contenedor exec Ejecutar un comando en un contenedor en ejecución export Exportar el sistema de archivos de un contenedor como un archivo tar inspect Mostrar información detallada sobre uno o más contenedores kill Matar uno o más contenedores en marcha logs Obtener los logs de un contenedor ls Listar Contenedores pause Pausa todos los procesos dentro de uno o más contenedores port Listar mapeos de puertos o un mapeo específico para el contenedor prune Retirar todos los contenedores parados rename Renombrar un contenedor restart Reiniciar uno o más contenedores rm Retirar uno o más contenedores run Ejecutar un comando en un nuevo contenedor stats Mostrar una secuencia en vivo de estadísticas de uso de recursos del contenedor(es) stop Parar uno o más contenedores en ejecución top Mostrar los procesos en ejecución de un contenedor unpause Despausa todos los procesos dentro de uno o más contenedores update Actualizar la configuración de uno o más contenedores wait Bloquear hasta que uno o más contenedores se detengan, luego imprimir sus códigos de salida Se puede considerar una alternativa a ciertos comandos.Ejemplo Opcion 1 Opcion 2 docker container ls docker ps docker container ls -a docker ps -a Docker –helpEn caso de necesitar ayuda para saber que hace un comando se agrega el –help.Ejemplo[XXXX@XXX ~]# docker conainer ls --helpUsage: docker container ls [OPTIONS]List containersAliases: ls, ps, listOptions: -a, --all Show all containers (default shows just running) -f, --filter filter Filter output based on conditions provided --format string Pretty-print containers using a Go template -n, --last int Show n last created containers (includes all states) (default -1) -l, --latest Show the latest created container (includes all states) --no-trunc Don't truncate output -q, --quiet Only display numeric IDs -s, --size Display total file sizesEjemplo Centos 7/Ubuntu 16 Docker status(systemctl status docker): sirve para saber el estado de docker en la maquina. Docker start(systemctl start docker): arranca el servicio de docker(en linux). Docker stop(systemctl stop docker): detiene el servicio. Docker enable(systemctl enable docker): activa docker, en caso de reinicio del sistema este se ejecutara de manera automatica. Docker –version: sirve para saber que version de docker se tiene instalada actualmente en la maquina. Docker info: entrega multiples datos(Espacio, caracteristicas, etc), entre los cuales se destaca la cantidad de conetenedores e imagenes y el estado de estos. Docker run: cada vez que se ejecuta este comando, crea un nuevo contenedor, no recicla contenedores ejecutados previamente.imagenesBuscar imagen docker por CMDcon este comando se buscara y entregara una lista de imagenes que se encuentran en el HUB.docker search NombreBuscar Retorna como maximo 25 resultados.Descargar imagenpara descargar una imagen del HUB de docker al entorno local se ocupa el siguiente comando.docker pull NombreImagenVer imagenes en repositorio localpara ver las imagenes desdecargadas que tenemos en nuestro equipo, se ocupa el siguiente comando.docker imagesVer IDs de las imagenes en repositorio localEntregara una lista de todos los id de todas las imagenes que tengamos en el repositorio local de la maquina.docker images -qFiltrar imagenesSe aplica de manera similar que al filtrar los contenedores.docker images -fEliminar una ImagenPara eliminar una imagen que se encuentre en nuestro repositorio local se eejcuta el siguiente comando:docker rmi ID/Nombre_Contenedor Importante No es posible eliminar una imagen, si se creo un contenedor con dicha imagen. En resumen, si la imagen tiene asociada un contenedor, esta no podra eliminarse. En caso de querer borrar la imagen asociada, se debera eliminar primero el contenedor, que esta coupando dicha imagen. Si aun asi se desea eliminar la imagen asociada, antes que el contenedor el comando se debe forzar con la bandera ‘-f’.Borrar todas las imagenescon este comando se eliminaran TODAS las imagenes que se tengan almacenadas, en el repositorio local.docker rmi $(docker images -q)Historial cambios imagenPara saber los cambios que ha sufrido una imagen en su proceso de construccion a lo largo del tiempo se puede ocupar:docker image history Nombre_ImagenContenedoresCrear contenedorPara crear un contenedor se ocupa el siguiente comando.docker run nombre-Contenedor Un contenedor se inicia desde una imagen. Cada vez que se ocupa docker run se crea un nuevo contenedor, no reutiliza contenedores previamente ejecutados, aunque se ocupe la misma imagen. Ejemplo:Al ejecutar el siguiente comando se creara un contenedor a partir de una imagen que especifiquemos con su respectivo nombre ejemplo “hello-world”(plantilla).Si la imagen que especificamos no esta en nuestro “repositorio” de imagenes local, docker procedera a descargarla desde el HUB.dockerdocker run hello-world Docker Hub es un registro online de imagenes.Crear contenedor con nombrePara crear un contenedor con nombre se ocupa el comando –name, ejemplo:docker run -it --name ubuntu_personal ubuntu bash Nombre_Asignado ImagenCrear Contenedor InteractivoPermite crear un contenedor interactivo si la imagen asi lo permite con el comando -it(i de interactivo, t de terminal), esto permite ingresar he interactuar con el contenedor(si este lo permite), ejemplo trabajar en la terminal de una imagen como ubuntu.docker run -it ubuntu La imagen contiene una version minima de ubuntu.Crear contenedor en segundo plano (Background)Para mantener en ejecucion un container en segundo plano, sin tener que mantener activa una ventana de comandos para interactuar con el(entorno interactivo).docker run -d nginx La opción -d ejecuta el contenedor en modo independiente. También es equivalente a -d=true. Un contenedor en modo independiente no puede ser removido automáticamente cuando se detiene, esto significa que no se puede usar la opción –rm en combinación con la opción -d.Crear contenedor con eliminado automaticoPara evitar que los contenedores detenidos se acumulen, esta la opcion que se eliminen de manera automatica, una vez finalizada su funcion, el cual es agregandole el –rm al comando.docker run -it --rm --name Nombre_Contenedor Nombre_imagen Ingresara en modo interactivo y cuando uno salga de ese modo el contenedor se eliminara.Ingresar a contenedor en modo interactivoPara ingresar a un contenedor que posea el modo interactivo y que ademas se ha creado con anterioridad y este en estado de detenido ejemplo, ubuntu, se ejecuta el siguiente comando para iniciarlo y ingresar a esté. Asi no se creara un nuevo contenedor.docker start -i ID_Contenedor Cuando el contenedor se detiene no se eliminan de manera automatica.Salir de un Contenedor sin detener ejecucionpara salir del container sin detenerlo y que asi pueda seguir ejecutandose se ocupa la siguiente combinacion de teclado.Ctrl+P+QDetener contenedorPara detener un contenedor que se encuentre en ejecucion, se ocupa:docker stop ID_ContenedorDetener todos los contenedorespara detener todos los conteendores que se encuentren en ejecucion, se ocupa lo sigueinte.docker stop $(docker ps -a -q) Probado en PowerShellVer contenedores en ejecucionPara poder ver los contenedores que se estan ejecutando en la maquina se puede ocupar una de las siguientes opciones.# Primera Opciondocker container ls# Segunda Opciondocker psVer contenedores detenidosPara ver los contenedores que estan creados pero al mismo tiempo detenidos se ocupa.docker ps -a Los contendores al terminar de ejecutarse no se eliminan si no que pasan a un estado de detenido. Con este comando tambien se mostrara los que estan en ejecucion.Ver ultimo contenedor arrancadose puede visualizar el ultimo contenedor que ha realizado una operacion.docker ps -lVer ultimos contenedores que se han ejecutado(cantidad)Con esta opcion se podra ver los ultimos contenedores que han realizado alguna operacion, ademas se puede especificar la cantidad que se desea mostrar.docker ps -n 4 mostrara los ultimos 4 contenedores que hayan realizado alguna operacion. Este numero(4) se puede cambiar por cualquiera dependiendo de la necesidad.Ver IDs de containerspara visualizar solamente los ID, y asi poder crear operaciones automaticas# Opcion 1docker ps -a -q# Opcion 2docker ps -aq con esta opcion mostrara todas las IDs de los contenedores, independiente del estado en el que se encuentre.Ver tamaño del contenedorPara poder ver el tamaño que ocupa un contendor en el sistema se ocupa el -S, en este caso, se presenta un ejemplo para ver el tamaño de los ultimos 3 contenedores.docker ps -a -n 3 -sFiltrar lista de contenedores(–filter, -f)Permite agregar una o mas opciones a la busqueda de contenedores, al momento de realizar una lista de estos.A continuacion se muestran las opciones disponibles. Filtro Descripcion id ID del contenedor name Nombre del contenedor label Una cadena arbitraria que representa una llave o un par llave-valor. Expresado como &lt;key&gt; o &lt;key&gt;=&lt;value&gt; exited Un número entero que representa el código de salida del contenedor. Sólo es útil con --all status uno de created, restarting, running, removing, paused, exited, o dead ancestor Filtra los contenedores que comparten una determinada imagen como ancestros. Expresado como &lt;image-name&gt;[:&lt;tag&gt;], &lt;image id&gt;, o &lt;image@digest&gt; before o since Filtra los contenedores creados antes o después de una identificación o nombre de contenedor determinado volume Filtros que funcionan con contenedores que han montado un volumen determinado o un soporte de fijación network Filtros que funcionan con contenedores conectados a una red determinada publish o expose Filtra los contenedores que publican o exponen un puerto determinado. Expresado como &lt;port&gt;[/&lt;proto&gt;] o &lt;startport-endport&gt;/[&lt;proto&gt;] health Filtra los contenedores en función de su estado de salud. Uno de starting, healthy, unhealthy or none. isolation Sólo daemon de Windows. Uno de dafault, process o hyperv is-task Filtra los contenedores que son una “tarea” para un servicio. Opción booleana (true o false) Para obtener una descripcion mas detallada revisar el siguiente enlace filtros.Ejemplo con filtro name.docker ps -a -f \"name=XX\" XX hace referencia al nombre del contenedorEliminar un ContenedorPara eliminar un contenedor que se encuentre detenido se ocupa el siguiente comando:Opcion 1docker rm ID_ContenedorOpcion 2docker rm Nombre_ContenedorEn el extraño caso que se desee eliminar un contenedor que este en ejecucion se debe forzar la eliminacion, mediante el siguiente comando:docker rm ID_Contenedor/Nombre_Contenedor -fEliminar todos los contenedoresElimina todos los contenedores que hemos creado.En windows(Powershell)docker rm $(docker ps -a -q) Si tenemos algun contenedor en ejecucion se debe usar -f, para forzar la eliminacion o detener la ejecucion.Historial Cambios ContenedorPara saber que cambios,instalaciones o modificaciones a sufrido un contenedor, condera los archivos y directorios.# Opcion 1docker diff Nombre_Contenedor#Opcion 2docker container diff Nombre_ContenedorLos cambios se muestran con una letra al principio indicando que se le realizo: A(Adicion): Para archivo nuevo. C(Modificacion): Para archivo modificado. D(Eliminado): Para archivo eliminadoPuertos DockerLos contenedores deben ser accesibles desde afuera del contenedor para poder utilizarse(una API por ejemplo o apache), para esto se ocupan los puertos, estos por defecto son privados y no es posible acceder a ellos, por lo tanto es necesario pasarlos a publico y mapearlo con un puerto del host/sistema que aloja el contenedor.Convertir puertos en publicoal iniciar un contenedor y que este tenga luspuertos en estado publico y no privado, que es por defecto se le agrega el -P, al comando.docker run -d -P nombre_imagen Al ejecutar el comando la “P” debe ser mayuscula o entregara un error. para confirmar que el puerto es publico, se ejecuta docker ps y mostrara una columna llamada PORTS. Con P(Mayuscula), docker se encargara de mapear los puertos, por lo tanto el numero será aleatorio y p(minusula) para indicar un puerto en especifico.Explicacion Columna Ports0.0.0.0:24312-&gt;80/tcp 0.0.0.0: se podra acceder por cualquier direccion IP que posea el equipo. Este puede ser cambiado a una direccion especifica si se posee mas de una IP en el equipo. 24312: Es el puerto del equipo que aloja docker, y el cual esta mapeado con el puerto 80 del contenedor. 80/tcp: es el puerto del contenedor. Para acceder al contenedor que tenga habilitada esta configuracion, se agrega la siguiente direccion en el navegador localhost:24312. Si el contenedor fuera apache, nginx o similar.crear un contenedor con un puerto especificoLos puertos que se generan en los contenedores son aleatorios y parten del puerto 32768. Pero para poder tener un mayor control en este aspecto, es posible especificar este parametro, con el siguiente comando.docker run -d -p 8080:80 Nombre_Imagen Tambien es posible agregar un nombre personalizado al contenedor con –name.. docker run -d –name Nombre_personalizado -p 8080:80 nombre_imagen Con P(Mayuscula), docker se encargara de mapear los puertos, por lo tanto el numero será aleatorio y p(minusula) para indicar un puerto en especifico.Redes DockerPor defecto mostrara 3 redes, previemente creadas, las cuales son; Bridge: Es la red que utilizan los contenedores de manera predefinida(por defecto), a menos que se le indique lo contrario. Host: los conteendores en est red solo podran ver e interactuar con el host principal, y no podran interactuar entre ellos. Se utiliza para contenedores aislados y que funcionen de manera independiente. None: Es un contenedor que no tiene red y necesita una. Su driver es null.La columna SCOPE, muestra si el funcionamiento de la red es de manera local, o conectada a otros equipos.Ver lista de redes en dockerPara ver todas las redes en docker, se ocupa lo siguiente:docker network lsObtener direccion IP de un contenedorpara obtener informacion mas especifica de los datos devueltos por inspect, se ocupa –format, y ocupa una plantilla de Golang.docker inspect --format='{ {range.NetworkSettings.Networks} } { {.IPAddress} } { {end} }' ID/Nombre_Container la funcion de ping para comprobar que el contenedor este en la misma red, no se encuentra disponible wn windows ni en mac.Otra opcion para obtener la direccion IP, por ejemplo es.# Estructuradocker inspect Nombre/ID_Contenedor | FindStr/grep Objeto_Buscar# windowsdocker inspect Nombre/ID_Contenedor | FindStr IPAd#Linuxdocker inspect Nombre/ID_Contenedor | grep IPAdPara guardar la informacion de una inspeccion en un archivo seria de la siguiente manera.docker inspect Nombre/ID_Contenedor &gt; Nombre_Archivo.txtObtener informacion detallada de una redEntrega informacion detallada de una red seleccionada, similar al obtenido con inspect para los contenedores, ademas de incluir los contenedores que estan asociadas a la red.docker network inspect Nombre_red Para obtener el nombre de la red, puede coupar el comando docker network ls Mostrara los contenedores que esten conectados y en ejecucion en la red que se esta inspeccionando.Crear nueva redPara crear una red nueva en docker se ocupa.docker network create Nombre_Red La red tipo bridge que uno crea posee mas caracteristicas que la que se encuentra por defecto en docker. Si no se especifica un driver en especifico en la red que se esta creando este sera del tipo bridge. Esto se puede cambiar con –driver string.Crear red con rango subnetLa direccion de subnet es de ejemplo.docker network create --subnet=192.168.0.0/16Asociar contenedor a redPara ejecutar y asociar un contenedor a una red existente se ejecuta lo siguiente:docker run -it --name Nombre_Contenedor --network Nombre_Red Imagen_Contenedor El –network es el que asocia el contenedor creado, con la red especificada.Para asociar un contenedor que ya esta en ejecucion se ocupa lo siguiente:docker network connect Nombre_Red Nombre_Contenedor Un contenedor puede estar conectado a multiples redes.Para desconectar un contenedor de una red es:docker network disconnect Nombre_Red Nombre_ContenedorEnlazar contenedorSe puede enlazar de dos maneras. Bridge(Red por Defecto) Una manera de realizar el enlace es mediante –links, aunque no es recomendable, ya que perdera soporte con el tiempo. Y es recomendable cuando se usa la red por defecto.EjemploPrimero es necesario ejecutar un nuevo contenedor con una imagen que posea entorno interactivodocker run -it --rm --name Nombre_contenedor Nombre_ImagenPara saber que ip, posee el contenedor linux, se ocupa el siguiente comando[XXXX@XXX ~]# cat /etc/hostsPara conectarlo finalmente se ocupa el siguiente comando.docker run -it --rm --name Nombre_contenedor --link Nombre_contenedor_destino:alias_contenedor_destino Nombre_Imagen El –rm no es necesario de ser el caso, ya que al terminar de utilizar el contenedor este se eliminara automaticamente. Lo mismo para -it, es opcional. Los conteendores que se desean enlazar deben poseer el –name, para facilitar el proceso. Cuando se desea realizar para contenedores que esten en otra red, no es necesaria esta opcion. Tambien se ocupa para comprobar que el entorno esta funcionando de manera correcta. Si el contenedor no se creo con –link no podra reconocer el enlace a otros contenedores mediante el nombre o el alias, solo por la direccion IP. Osea es unidireccional en este modo. Red Perzonalizada Para agregar un contenedor a una red personalizada se puede ocupar.docker run -d --name Nombre_Contenedor --rm --network Nombre_Red Nombre_imagen El –rm es opcional, ayuda para no juntar contenedores detenidos.Para poder acceder al contenedor:docker exec -it Nombre_Contenedor bashBorrar Redpara borrar una red ya creada se ocupa.docker network rm Nombre_Red No es posible borrar una red que tenga contenedores asociados.Volumenes en DockerEs un componente de docker importante, por varias razones que se presentan a continuacion; Una de ellas y la mas importante es que ayuda a que la informacion de los contenedores sea Persistente. Permite respaldar o migrar informacion de manera facil. Estos funcionan en windows y linux por igual. Un volumen puede estar conectado a varios contenedores. Se puede agregar informacion a un volumen, por medio de un contenedor, antes que por un usuario. Los volumenes se administran mediante Docker. Se pueden usar y administrar de manera remota.Crear VolumenUna forma sencilla de crear un volumen , es al momento de crear un contenedor.docker run -it -v Carpeta_Volumen --name Nombre_Contenedor Nombre_Imagen bash La carpeta_volumen es donde guardara la informacion en el volumen, ejemplo “/informacion”. El lugar donde se crea, es por defecto docker/volumenes, pero puede perzonalizarse la ubicacion de ser necesario.Listar VolumenPara ver la lista de volumenes creados se ocupa:docker volume ls Se podra ver el driver y el nombre del volumen, si no se especifica este ultimo, se generara un codigo aleatorio para el nombre.Obtener informacion de volumenPara obtener informacion relacionada al volumen deseado se ocupa lo siguiente;docker volume inspect ID/Nombre_Volumen Se obtendra informacion, como fecha de creacion, tipo de driver, punto de montaje(direccion de carpeta que almacena los datos), el nombre, entre otros.Crear un directorio compartido(Carpeta)Al crear un volumen la direccion que se genera de manera automatica no es la mas “sencilla” con la que se puede trabajar ejemplo:/var/lib/docker/volumes/XXXXXXXX000XXXXXXXXXXXX/_dataAsi que para compartir recursos(Archivos, Carpetas, Etc)entre la maquina que aloja los contenedores y los mismo contenedores, de manera sencilla es especificandolo desde el inicio al crear el contenedor, como se muestra a continuacion:docker run -it -v Direccion_Maquina_Host:Direccion_Contenedor --name Nombre_Contenedor Nombre_Imagen#Ejemplodocker run -it -v /root/carpeta1:/carpeta1 Es recomendable realizarlo al momento de crear un contenedor.Se asocia el directorio entre contenedor y la maquina que lo aloja, por lo tanto no se podria considerar un volumen esto se muestra como “HostConfig/Binds” al revisar los datos del contenedorCompartir Volumen entre contenedorpara compartir un volumen entre dos contenedores.Primero creamos el contenedor con el volumen, el cual vamos a compartirdocker run -it -v /datos --name Nombre_Contenedor Nombre_Imagen bashDespues creamos el segundo contenedor, el cual se conectara al volumen del conteendor creado anteriormente:docker run -it --name Nombre_Contenedor --volumes-from Nombre_Contenedor1 Nombre_Imagen bash El contendor1, es el contenedor ya creado al cual queremos acceder a su volumen con este segundo contenedor. Tambien es posible conectarse al ultimo contenedor creado que accedio a dicho volumen, en vez de hacerlo con el primer contenedor.No es posible realizar esta accion directamente al volumen, es necesario que primero se encuentre un contenedor iniciado y conectado a dicho volumen para poder realizar esta accion.Crear Volumen de forma independiente(Nombre Personalizado, permiso de lectura, uso windows)Nombre PersonalizadoEn vez de ocupar un nombre que se genera de manera automatica, podemos ocupar uno personalizado creado por el usuario, de la siguiente manera:docker volume create Nombre_VolumePara asociarlo a un contenedor se ocupa como ejemplo lo siguiente:docker run -it --name Nombre_Contenedor Nombre_Volumen:Nombre_Directorio Nombre_Imagen bash Permiso LecturaPara que un contenedor no pueda realizar modificaciones en un directorio y solo realice lectura, se le agrega **:ro** al Nombre_Directorio.docker run -it --name Nombre_Contenedor Nombre_Volumen:Nombre_Directorio:ro Nombre_Imagen bash Uso windowsSi se desea realizar lo mismo pero en windows, se ocupa de la siguiente manera:docker run -it --name Nombre_Contenedor -v Nombre_Directorio:Nombre_Volumen Nombre_Imagen bash #Ejemplodocker run -it --name ubuntu7 -v C:\\\\Users\\\\XXXX\\\\dir1:volumenDocker ubuntu bash En windows se debe ocupar la ruta completa, ademas de cambiar el ”/” por ”\\\\“ Se debe tener la contraseña del equipo para que docker pueda acceder, ademas de los permisos en firewall.Borrar Volumen EspecificoPara borrar un volumen se ocupa:docker volume rm ID/Nombre_Volumen Para poder eliminar exitosamente el volumen no puede terner asociado o que sea dependencia de un contenedor.Borrar volumen inactivos o no asociadosPara eliminar volumenes que ya no esten en uso por almenos un contenedor o hayan quedado sin haber sido eliminados.docker volume prune Mostrara un mensaje de advertencia para confirmar la accion.Manipulacion de Imagen y ContenedorModificar ImagenUna de las primeras opciones a ocupar para crear una imagen es mediante la modificacione de conteendores.Para modificar una imagen primero se tiene que crear un contenedor, a partir de la “imagen base”, por ejemplo ubuntu:docker run -it --name Nombre_Contenedor Nombre_Imagen bashAl tener el contenedor ejecutando, posteriormente se instala los softwares requeridos/solicitados(/necesitados?), y al final al dejar el contenedor como se desea.Crear ImagenPara crear una imagen con un contenedor modificado se puede ahccer de manera automatica o manual, en este caso se mostrara la manera manual.docker commit ID/Nombre_Contenedor Nombre_Nueva_Imagen:tag si no se especifica el tag, agregara latest de manera automatica.DockerFileEs un archivo de configuracion que permite construir imagenes de manera automatica.Esta formado por un conjunto de instrucciones, que contiene para construir la imagen.Ejemplo Hello-WordFROM scratchCOPY hello /CMD [\"/hello\"]Crear imagen con DockerfilePara empezar se crea un archivo llamado Dockerfile(Se respera mayusculas).Estructura basica: FROM: Carga la imagen Base/Inicial. RUN: Comando que se desea ejecutar. Dockerfile no puede poseer comando interactivo.EjemploFROM XXXXXRUN apt-get updateRUN apt-get install -y XXXXXPosteriormente se ejecuta lo siguiente para crear la nueva imagen.docker build -t Nombre_Imagen:Tag .Directorio# Ejemplodocker build -t imagen_nueva . -t es para nombrar la nueva imagen El .Drectorio es donde puede encontrar la url donde esta el dockerfile o se desea copiar algo nuevo. Este debe estar en el directorio donde se encuentra dockerfile si solamente aparece un .(punto). Ademas puede ser una direccion de internet.En caso de estar en windows y crear un contenedor de linux mostrara la siguiente advertencia.ADVERTENCIA DE SEGURIDAD: Está creando una imagen de Docker desde Windows contra un host que no sea Docker de Windows. Todos los archivos y directorios añadidos al contexto de construcción tendrán permisos ‘-rwxr-xr-x’. Se recomienda volver a comprobar y restablecer los permisos de los archivos y directorios sensibles.Comando RUNPara ejecutar multiples comandos en una misma capa en la imagen se ocupa &amp;&amp;, ejemplo:DockerfileFROM UbuntuRUN apt-get updateRUN apt-get install -y pythonRUN echo 1.0 &gt;&gt; /etc/version &amp;&amp; apt-get install -y git \\ &amp;&amp; apt-get install -y iputils-ping Para los que no saben la \\ sirve para que siga ejecutando la linea siguiente.Comando CMDPermite indicar el comando por defecto del contenedor, Puede haber muchos CMD en un Dockerfile, pero el ultimo es el que cuenta, por lo tanto lo recomendable es tener UNO por Dockerfile.En resumen sirve para iniciar un comando.FROM XXXXXRUN apt-get updateRUN apt-get install -y XXXXXCMD XXXXXXXXXXXXXXXX# EjemploFROM XXXXXRUN apt-get updateRUN apt-get install -y XXXXXCMD echo \"XXXXXXXXXXXXXX\" El XXXXXXXX es el texto que podriamos ingresar y podra mostrar en la terminal.Tambien permite colocar corchetes, para ejecutar como exec en vez de bash, en resumen formato JSON.FROM XXXXXRUN apt-get updateRUN apt-get install -y XXXXXCMD [XXXXXXXXXXXXXXXX]# EjemploFROM XXXXXRUN apt-get updateRUN apt-get install -y XXXXXCMD [\"echo\", \"Mensaje a Mostrar\"] Esta ultima manera permite ejecutar como exec, para asi evitar posibles errores al ocupar un bash. Ademas se evita el tener que depender del bash de un conteendor, ya que es seguro que se pueda ejecutar exec de docker.EntrypointEs similar a CMD, ya que permite ejecutar algo cuando de inicia un contenedor, con la diferencia que el comando ejecutado con entrypoint se ejecutara siempre no es un comando “opcional”, a diferencia de CMD.Y al igual que CMD solo se puede tener uno por Dockerfile.En el ejemplo se mostrara el dockerfile configurado para ambos casos.Ejemplo Dokerfile CMDFROM imagenRUN apt-get updateRUN apt-get install -y ALGOCMD [\"/bin/bash\"]Ejemplo Dokerfile EntrupointFROM imagenRUN apt-get updateRUN apt-get install -y ALGOENTRYPOINT [\"/bin/bash\"]Ejemplo de ejecucion dockerfile# Ejemplo CMD [XXXX@XXX ~]# docker run -it --rm Nombre_Imagen lsbin dev home lib64 mnt proc run srv tmp sys etc# Ejemplo ENTRYPOINT[XXXX@XXX ~]# docker run -it --rm Nombre_Imagen df -h/bin/df: /bin/df: cannot excute binary file Con el CMD es posible sustituir el comando que se ingreso. Como se explico entrypoint siempre ejecutara el comando que se le coloco. Se recomienda ocupar el modo exec(JSON), para ejecutar comando con entrypoint.WorkdirEste comando permite el poder determinar el directorio de trabajo para otros comandos ejemplo entripoint, run, etc.Este comando puede estar multiples veces en un Dockerfile.EjemploFROM imagenRUN apt-get updateRUN apt-get install -y ALGORUN mkdir /infoWORKDIR /infoRUN touch archivo1.txtWORKDIR /info2RUN touch archivo2.txtENTRYPOINT [\"/bin/bash\"]Al crear el contenedor he ingresar a la bash, se encontrara en el ultimo directorio creado.[XXXX@XXX ~]# docker run -it --rm Nombre_Imagenroot@XXXXXXXXXXXX:/info2#En resumen permite crear datos o componentes en carpetas especificas.COPY-ADDCOPYPermite copiar archivos de la maquina host a un contenedor.EjemploFROM imagenRUN apt-get updateRUN apt-get install -y ALGO##WORKDIR##RUN mkdir /infoWORKDIR /infoRUN touch archivo1.txtWORKDIR /info2RUN touch archivo2.txt##COPY##COPY index.html .COPY app.log /info##ENTRYPOINT##ENTRYPOINT [\"/bin/bash\"] el punto(.) en COPY hace referencia al ultimo directorio creado El primer COPY copia el archivo index.html en /info2 a eso se refiere el punto(.). El segundo COPY, copia el archivo app.log en la carpeta /info Copy acepta metacaracteres.ADDcopia o lleva ficheros o carpetas al contenedor. similar a COPYFROM imagenRUN apt-get updateRUN apt-get install -y ALGO##WORKDIR##RUN mkdir /infoWORKDIR /infoRUN touch archivo1.txtWORKDIR /info2RUN touch archivo2.txt##COPY##COPY index.html .COPY app.log /info##ADD##ADD docs docsADD a* /info/ADD f.tar .##ENTRYPOINT##ENTRYPOINT [\"/bin/bash\"] En el primer ADD cuando se coloca una ruta como docs es relacionada al ultimo workdir ejecutado(info2), en resumen si la carptea docs no se encuentra en la carpeta info2, creara dicha carpeta(/info2/docs) y copiara su contenido. En el segundo ADD agrega todos los archivos que empiecen con “a” a la carpeta designada en resumen acepta metacaracteres(a*) ADD a diferencia de COPY puede copiar el contenido de el archivo comprimido f.tar al directorio especificado. ADD tambien tiene la opcion de traer cosas desde una URL, ejemplo archivos.ENVEs posible utilizar variables con ENV, a demas la manera mas simple de ocupar variables es al momento de crear un contenedor.# Opcion 1docker run -it --rm -v [Argumento] Nombre_Imagen# Opcion 2docker run -it --rm --env [Argumento] Nombre_Imagen# Ejemplo 1docker run -it --rm --env x=10 Nombre_Imagen# Ejemplo 2docker run -it --rm --env x=`pwd` Nombre_Imagen Es posible pasar comandos.Ejemplo Ejecucion[XXXX@XXX ~]# docker run -it --rm -e x=`pwd` Nombre_Imagenroot@XXXXXXXXXXXX:/info2#echo $x/root/XXXXXXX XXXXXX Nombre carpeta aloja proyectoEn un archivo Dockerfile se podria hacer de la siguiente manera.FROM ubuntuRUN apt-get updateRUN apt-get install -y pythonRUN echo 1.0 &gt;&gt; /etc/version &amp;&amp; apt-get install -y git \\ &amp;&amp; apt-get install -y iputils-ping##WORKDIR##RUN mkdir /infoWORKDIR /infoRUN touch archivo1.txtWORKDIR /info2RUN touch archivo2.txt##COPY##COPY index.html . COPY app.log /info##ADD##ADD docs docsADD a* /info/ADD f.tar .##ENV##ENV dir=/datos dir1=/datos1RUN mkdir $dir &amp;&amp; mkdir $dir1##ENTRYPOINT##ENTRYPOINT [\"/bin/bash\"] Al revisar se podra ver las carpetas creadas y agregadas al registro env, del contenedor.ARGPermite poner variables, es similar a env, pero arg permite recibir variables al momento de construir algo.FROM ubuntuRUN apt-get updateRUN apt-get install -y pythonRUN echo 1.0 &gt;&gt; /etc/version &amp;&amp; apt-get install -y git \\ &amp;&amp; apt-get install -y iputils-ping##WORKDIR##RUN mkdir /infoWORKDIR /infoRUN touch archivo1.txtWORKDIR /info2RUN touch archivo2.txt##COPY##COPY index.html . COPY app.log /info##ADD##ADD docs docsADD a* /info/ADD f.tar .##ENV##ENV dir=/datos dir1=/datos1RUN mkdir $dir &amp;&amp; mkdir $dir1##ARG##ARG dir2RUN mkdir $dir2##ENTRYPOINT##ENTRYPOINT [\"/bin/bash\"] dir2 da un error al no tener un valorPara solucionar el error generado por falta de informacion en dir2, se agrega dicha informacion faltante al momento de construir la imagen.docker build -t Nombre_Imagen --build-arg dir2=/datos2 .Con esto no va a generar error es posible pasar mas de una variable. Cada variable debe incluir el –build-argEXPOSEPermite exponer puertos, se le indica que un puerto en especifico es publico al crear una imagen.##EXPOSE##RUN apt-get install -y apache2EXPOSE 80 Esto instala apache y le asigna el puerto 80. De igual manera al crear el contenedor se debe asignar el puerto ejemplo, -p 8080:80.VOLUMEPermite crear volumenes de manera automatica a traves del dockerfile.##EXPOSE##RUN apt-get install -y apache2EXPOSE 80ADD entrypoint.sh /info2##VOLUME##ADD paginas /var/www/htmlVOLUME [\"/var/www/html\"]##CMD##CMD /info2/entrypoint.sh Comparte la misma direccion el volumen y el contenedor. Recordar que los volumenes son externos al contenedorDocker HubEs un repositorio de images donde encuentras imagenes creadas por empresas(repositorios oficiales) y otras creadas por usuarios.Subir imagen a Docker HUBPara poder subir la imagen primero se agrega la cuanta con el siguiente comando.docker loginPedira la cuenta de usuario y su contraseña respectiva.Al logearse correctamente aparecera Login Succeeded, y va a durar mientras este el terminal abierto o la coneccion funcionando.Para subir imagen se ocupa docker push. Docker hub solicita un nombre “especial”, para el repositorio al no ser una imagen oficial(ubuntu), por lo cual nuestra imagen seria.docker image tag Nombre_imagen:TAG NombreUsuario/Nombreimagen:tagcon esto se cambia el nombre a uno adecuado para docker hub.ejemplodocker image XXXX:1 usuariodocker/XXXX:1Posteriormente, se realiza el docker pushdocker push usuarioDocker/Nombre_Imagen:TAGDocker ComposeEs un servicio que “orquesta” servicios o componentes, mediante un archivo llamado docker-compose.yml que contiene instrucciones para crear los enlaces entre contenedores que contengan servicios(Base de datos, BackEnd, FrontEnd, etc.).En resumen, permite gestionar/simplificar una arquitectura de manera sencilla, ejemplo el Stack MEAN (MongoDB, Express, Angular, Nodejs).Instalar Docker ComposeDocker Compose ya esta instalado en windows, al instalar docker, para mac y linux se realiza manualmente, para mas detalles ver documentacion.Docker-compose - Comandosdocker-compose upSirve para iniciar compose, con la configuracion del archivo docker-compose.ymldocker-compose updocker-compose psEntrega informacion similar a docker ps, muestra los contenedores que conforman un servicio y su estadodocker-compose psdocker-compose imagesPermite ver las imagenes que se utilizan para los contenedores.docker-compose imagesdocker-compose configPermite saber si el archivo docker-compose.yml es correcto.# Muestra la informacion contenido dentro del archivo.docker-compose config# Muestra solo los errores.docker-compose config -q#Muestra los servicios del archivo.docker-compose config --service Para ejecutarlo de manera correcta se debe estar en la carpeta donde se encuentra dicho archivo.docker-compose startPermite iniciar los contenedores que componen un servicio.docker-compose startdocker-compose logsPermite ver los logs(registros de sucesos que hizo el servicio incluye notas, warning, errores, etc.) de un servicio en especifico.docker-compose logs Nombre_Serviciodocker-compose topMuestra los procesos mas pesados de un servicio.docker-compose top Nombre_Serviciodocker-compose pauseSe puede pausar de manera temporal, los contenedores y servicios que se esten ejecutando en docker.docker-compose pausePara volver a activarlos, se ocupa.docker-compose unpausedocker-compose restartreinicia los servicios.docker-compose restart Se debe ejecutar con cuidado ya que es posible que pierda, servicios.docker-compose stopPara detener los servicios que actualmente se ejecutan en compose.docker-compose stopdocker-compose rmSirve para eliminar servicios que se esten ejecutando en compose.docker-compose rmdocker-compose downDetiene los servicios, ademas borra los servicios, contenedores, redes. Para eliminar los volumenes asociados al servicio que se estaba ejecutando, se ocupa docker volume prune.Estructura fichero Docker-ComposeEl fichero docker-compose.yml consta de una estructura que similar a la siguiente. Servicio: Es para especificar la version de docker donde se lanzara docker-compose. Services: Se colocan todos los servicios que contendra compose, con un nombre que pueda ser identificable. Todos los servicios que se agregen al docker-compose deben tener el comando ‘build’ o ‘images’Ejemploversion: '3'services: web: build: . ports: - \"5000:5000\" volumes: - .:/code - logvolume01:/var/log links: - redis redis: image: redisvolumes: logvolume01: {} El punto en build es la ubicacion del dockerfile, en este caso se encuentra en la misma carpeta que el docker-compose. Link al igual que en los contenedores es para unirlo a una red especifica.Construir Docker-Compose(Construir servicios)Primero se crea el archivo docker-compose.yml con las instrucciones.Ejemploversion:'3'services: nginx: image: nginx:stable-alpine ports: - \"80:80\"Despues se construye con el comando# Construir serviciosdocker-compose up# Modo Backgrounddocker-compose up -d Se recomienda ejecutarlo en modo background con el comando -dDocker Compose va a crear una red nueva por defecto si no se le especifica.Listar micro serviciosAl igual que con los contenedores uno puede listar los micro servicios de docker-compose, con el siguiente comando.docker-compose psEnlazar contenedores, servicios, puertos y variables.Se creara un micro servicio, mas completo.Ejemploversion: '3'services: wordpress: image: wordpress environment: WORDPRESS_DB_HOST: dbserver:2222 WORDPRESS_DB_PASSWORD: 123456 ports: - 8080:80 depends_on: - dbserver dbserver: image: mariadb:latest environment: MYSQL_ROOT_PASSWORD: 123456 ports: - 2222:2222 dbserver en WORDPRESS_DB_HOST es el nombre del servicio de la base de datos mariadb, configurada mas abajo. Con depends_on se le indica como se inician los contenedores, en este caso wordpress tiene una dependencia de dbserver, por lo cual este ultimo inicia primero. Docker construira una red personalizada para los contenedores sin necesidad de indicarlo, esto sucede en las ultimas versiones de docker. En caso contrario se tendra que ocupar el --link.Estructura: Servicios: Son los contenedores que se crean, basados en las especificaciones que se entregan. wordpress dbserver Puertos: Puntos de coneccion, salida y entrada de datos de los contenedores. wordpress - puerto 80 (dependen del servicio dbserver) dbserver - puerto 3306 Enviroment: Son las variables que se le pueden entregar a las imagenes al momento de generar el contenedor.Comando para ejecutar el archivo de docker-compose.ymldocker-compose upPosteriormente acceder a localhost:8080Volumenes en Docker ComposeLos volumenes en docker-compose, funcionan igual que en docker normal. La unica diferencia son los comandos y la manera en la que se manejan.Ejemplo:version: \"3.2\"services: web: image: nginx:alpine volumes: - type: volume source: mydata target: /data volume: nocopy: true - type: bind source: ./static target: /opt/app/static ports: - 80:80 db: image: postgres:latest volumes: - \"/var/run/postgres/postgres.sock:/var/run/postgres/postgres.sock\" - \"dbdata:/var/lib/postgresql/data\"volumes: mydata: dbdata: volumen de nombre mydata esta asociado a la carpeta del volumen /data. volumen de tipo bind ./static (el punto es donde esta docker-compose donde tendra una carpeta llamada static) es una carpeta en el equipo principal que estara escaneada que esta asociado/compartido con el directorio /opt/app/static que esta dentro del contenedor. Este es directorio completo.En resumen, el contenido de las dos carpetas es identico. En la primera opcion se mapea el socket del equipo que aloja docker con el socket del contenedor En el segundo dbdata(del equipo principal) esta mapeado con /var/lib/postgresql/data del contenedor. Este ultimo es nombre de volumen.Para acceder al servicio web se puede ocupar.docker-compose exec web shEstructura: volumes: es la seccion de docker-compose donde se entregan las instrucciones para la crecion de los volumenes en un servicio. type: Es donde se indica si es de typo volume o de tipo bind, la diferencia es que con volumen se crea un volumen especifico, en una ubicacion por defecto(/var/…) y el bind asocia una determinada carpeta del contenedor con una carpeta del equipo principal(host o maquina que aloja docker). volume: es donde se pueden colocar algunas opciones en este caso nocopy:true, el cual permitira que el contenedor no sea copiado. Volumes: Se declaran los volumenes que se han creado para confirmar cuales son los volumenes.Redes en Docker ComposeCreacion y configuracion de un stack con docker-compose, mostrando algunas opciones disponibles en la seccion de red.Ejemploversion: '3.3'services: app: image: client container_name: client build: . ports: - 80:3000 environment: - MONGO_URI=mongodb://mongo_db/sample depends_on: - db networks: - net3 db: image: mongo:3.0.15 container_name: mongo_db volumes: - ./db:/data/db networks: net3: aliases: - \"mongo_db\" - \"mongo_server\" ipv4_address: 172.16.238.10 ipv6_address: 2001:3984:3989::10networks: net3: driver: bridge ipam: driver: default config: - subnet: 172.16.238.0/24 - subnet: 2001:3984:3989::/64Estructura: Servicio APP: Image: nombre de la imagen que se va a crear. Container_image: Nombre del contenedor Build: es para especificar que construya la imagen, a partir del dockerfile que se encuentra en la misma carpeta(por eso el punto). Ports: los puetos de acceso, en este caso el puerto 80 del host, se conecta al puerto 3000 del contenedor. Environment: es una variable de entorno que solicita la imagen, en este caso MONGO_URI, que apunta a la base de datos, en este caso la direccion proviene del nombre del contenedor de la base de datos. Depends_on: son dependencias o requisitos previos para la ejecucion del contenedor en este caso que la base de datos se ejecute primero. Networks: Se indica que red se va a ocupar, que va a ser propia y no generada de manera automatica. Su configuracion va a ser por defecto Servicio DB: Volumes: se crea un volumen mapeado ./db:/data/db Networks: el net3 no llevara guion, ya que llevara una mayor configuracion. ya que llevara propiedades especificas. Aliases: Es un nombre alternativo para el servicio dentro de la red, es el nombre con el que se va a reconocer el servicio dentro de la red. ipv4_address/ipv6_address: Ip fija para el servicio. Networks: Configuracion de la red que se va a ocupar. net3: es el nombre de la red. driver: bridge(predefinido), none. enable_ipv6: es para habilitar la opcion de ipv6 en una version anterior a 3.3 de docker compose, si se cumple una version posterior a 3.3, esta la opcion de eliminar. ipam: sirve para configurar una subred de ipv4/ipv6. Si se ocupan ip fijas en los servicios es obligatorio el ipam para poder configurar y que funcionen las redes a ocupar. driver: el driver de la subred, en este caso la opcion es default. config: contiene las ip de la subnet de la red, de la ipv4 y ipv6. Cambiar Nombre de Archivo y Proyecto de docker-composeOcupar fichero docker-compose con otro nombrePara personalizar el nombre de docker compose basta con renombrar el archivo y ejecutar el siguiente comando:docker-compose -f Nuevo_Nombre_Archivo.ymlCambiar nombre ProyectoAl ejecutar docker-compose siempre ocupara el nombre del la carpeta que contiene los archivos, en caso de querer cambiarlos se puede ocupar lo siguientedocker-compose -p Nombre_ProyectoEjecutar de manera correcta nuevo docker-composePara ejecutar docker-compose con las nuevas opciones mostradas anteriormente, se ejecuta de la siguiente manera.docker-compose -f Nuevo_Nombre_Archivo.yml -p Nombre_Proyecto up agregar -d si se desea ejecutarlo en modo backgroundVer lista con nuevo nombre de proyectoAl momento de ejecutar docker-compose ps, no deberia mostrar nada si se ocupo el -p, ya que buscara los servicios que contengan el nombre de la carpeta, que contiene el archivo. para poder ver estos servicios con nombre personalizado se ejecuta de la siguiente manera.docker-compose -p Nombre_Proyecto pseste cambio se aplicara a la mayoria de los comandos de docker-compose, por lo tanto se le debe agregar -p Nombre_proyecto para poder ejecutar de manera correcta, dichos comandos. Si no se realiza de esta manera, volvera a bsucar con el nombre de la carpeta contenedora del archivo.Docker RegistryEs una “alternativa” a hub.docker.com, el cual permite crear nuestro propio repositorio de imagenes privado, esto permite la posibilidad de poder usarse a nivel de empresas, en su propia red privada.Por lo tanto permite crear multiples registros, el cual cada uno sera un “hub” privado. Ademas cada uno de los registros puede almacenar imagenes diferentes dependiendo de las necesidades.Crear registro de imagenesPara crear un registro es necesario descargar la imagen Registry de docker hub, y ejecutar un contenedor con este.Descargar imagendocker pull registry:latestCrear contenedordocker run -d -p 5000:5000 --name Nombre_Contenedor registry El numero del puerto es modificable a gusto del usuario.Subir/Bajar imagen a un registroEs similar a subir una imagen a docker hub, con la diferencia que en vez de colocar nuestro usuario, colocamos la direccion/Nombre Equipo y puerto del registro.Crear TagComo requisito previo al igual que en HUB, es necesario ocupar docker tag.Ejemplo# Estructuradocker tag Imagen_Etiquetar Direccion/Nombre:Puerto/Nombre_Imagen# Ejemplodocker tag ubuntu localhost:5555/nuevo-ubuntu No es recomendable ocupar localhost, solo referencia para ejemplo. para buscar la imagen es docker images Nombre_Imagen ejemplo docker images localhost:5555/* y mostrara todos las imagenes que esten en el registro.Subir imagenEjemplo subir imagen a registro# HUB Dockerdocker push nombre_usuario/nombre_imagen:tag# Registrodocker push Direccion/NombreMaquina:Puerto/Nombre_Imagen:tag# Ejemplo \"Real\"docker push localhost:5555/nuevo-ubuntu:latest Docker sabra a que repostiorio subira la imagen. por lo tanto no es un dato que pida. Descargar imagenEs igual como a cualquier imagen.docker pull nombre_usuario/nombre_imagen:tag# Registrodocker pull Direccion/NombreMaquina:Puerto/Nombre_Imagen:tag# Ejemplo \"Real\"docker pull localhost:5555/nuevo-ubuntu:latest El tag por defecto es latest.Almacenamiento Docker RegistryRegistry al igual que cualquier imagen de docker, se puede especificar la opcion de donde se almacena la informacion de la imagen, con el volumen.Por defecto es donde docker guarda los volumenes/var/lib/docker/volumes/xxxxxxxxx/_data para saber la direccion y mas informacion se ocupa docker inspect Nombre_imagenPara dejar las imagenes en un lugar especifico, se realiza lo mismo que en cualquier imagen.# crear carpetamkdir /Nombre_carpeta_equipo_local# Comando para crear contenedor con volumen relacionadodocker run -d --name Nombre_Contenedor -p 5000:5000 -v /Nombre_carpeta_equipo_local:/Nombre_carpeta_equipo_local Nombre_Imagen# Ejemplomkdir /Registrosdocker run -d --name registro_ejemplo -p 5000:5000 -v /Registros:/var/lib/registry registry “Destination” es el que contiene la direccion /var/lib/registry, en la informacion del contenedor, y es donde por defecto registry guarda las imagenes.Docker SwarmPermite crear un cluster de multiples nodos docker, permitiendo disponer de manera replicada, los “servicios”(Componente que se replica) que creamos, en varios nodos del cluster. Ademas de funcionar de manera independiente. Cada nodos es un entorno como vps, server dedicado o similar. Servicios Swarm: El servicio es en resumen un contenedor que se esta ejecutando, como cuando se inicia un docker-compose y se especifican los servicios.Crear Cluster (Docker Swarm) No es posible colocar mas de un nodo dentro de un equipo (fisico, vps, etc.). No es posible mas de un nodo en un equipo ya que es necesario, una direccion IP.El siguiente comando:docker swarm permitira la gestion del cluster. docker services Permite crear servicios y tareas dentro del cluster.Finalmente para crear un Cluster se ocupa lo siguiente:# Inicio Normaldocker swarm init# Inicio al poseer multipes IPdocker swarm init --advertise-addr xxx.xxx.xx.xxx Cambiar las X por la direccion IP seleccionada. Inicia un nuevo cluster, y asigna el equipo como maetro, ademas de entregar un token, que permite unir los equipos esclavos al maestro. En caso de que se inicie en una VM(Ya que se dispone de multiples IP), se le debe asignar la direccion IP para iniciar correctamente. Para evitar problemas iniciar swarm en equipos con IP estaticas, no dinamicas.Al ejecutar el comando entregara la siguiente informacion: Mostrará que es manager(maestro) o esclavo. entregara el comando con el cual se podra agregar un worker, un equipo esclavo al maestro, este incluye un token.Se recomienda copiar el comando incluyendo el token, en caso de perderse, se puede obtener con el comando presentado a continuacion:docker infoDonde mostrara, que docker swarm esta activado, ademas de algunas otras opciones como las siguientes: NodeID Is Manager ClusterID Managers Nodes workers El swarm que esta como maestro(manager), tambien se puede ocupar como worker(esclavo). NO SE RECOMIENDA Finalmente, en caso de perder el comando se ocupa:docker swarm join-token workerAñadir nodosPara ver la informacion relacionada a los nodos se ocupa docker info en la seecion swarm.Nodo 1 (Manager/Maestro)Para añadir los nodos primero se debe iniciar el docker swarm con la direccion IP, especifica en caso de poseer mas de una, en el PRIMER nodo a ocupar.# Inicio generaldocker swarm init# Inicio con IP especificadocker swarm init --advertise-addr xxx.xxx.xx.xxx Reemplazar las X con los numeros de la direccion IP.Se copia el docker swarm join --token XXXX(Las XXXX son el resto de la informacion del token).Nodo 2 o posterior(Worker/Esclavo)En los nodos que desea unir al primero se debe tener docker instalado y agregar el docker swarm join --token XXXX que se obtuvo previamente.Al realizar, el ingreso anterior se mostrara el mensaje This node joined a swarm as a worker, confirmando la union al primer nodo.Trabajar con Nodos/ClusterPara poder trabajar de manera comoda y obtener mejor informacion, en vez de ocupar el comando docker info, se ocupa el docker node, con el cual permitira algunas de las siguientes opciones: Listar/Ver nodos de un cluster. Inspeccionar uno o mas nodos. Promover un nodo a Manager desde el modo WorkerComandos NodoDocker node lspermite listar los nodos worker que estan unidos al manager, entregando la siguiente informacion. ID (Numero de identificacion unico) HOSTNAME (Muestra lso nombres del nodo, ejemplo nodo1, nodo2) STATUS AVAILABILITY MANAGER STATUS ENGINE VERSIONDocker node inspectpara saber la informacion de un nodo especifico se ocupa.docker node inspect HOSTNAME# Ejemplodocker node inspect nodo2 HOSTNAME es el numero del nodo, ejemplo nodo 3.Para obtener la informacion que entrega mas ordenada y no en formato JSON.docker node inspect --pretty HOSTNAMEDocker node promotePara administar los manager(puede existir mas de uno), y colocar otro nodo existente como lider, ejemplo en caso de que se caiga el servicio.docker node promote HOSTNAME# Ejemplodocker node promote node6 Promueve el nodo6 a manager. En el caso de que se promueva un nodo(Que seria el segundo nodo o posterior), posteriormente ademas del nodo lider(El inicial el cual en el status manager aparecera como Leader), este aparecera como Reachable(Alcanzable), esto confirma que en caso de que el primer nodo que esta como lider se caiga, o se le quite su status de Leader, el nodo6 tendra el control. –&gt;docker node ls HOSTNAME MANAGER STATUS nodo1 Leader nodo2   nodo3   nodo4   nodo5   nodo6 Reachable Docker node DemoteQuita el privilegio de manager de un nodo y lo pasa a worker.docker node demote HOSTNAME # Ejemplodocker node demote node1 En caso de quitar un nodo de lider, este no aceptara comandos ya que no posee los privilegios (en este caso, Leader), por lo tanto uno debe conectarse al nodo lider, que este disponible(con docker node ls se puede saber quien es el lider). –&gt;docker node ls HOSTNAME MANAGER STATUS nodo1   nodo2   nodo3   nodo4   nodo5   nodo6 Leader Docker Swarm leaveEste comando sirve para que un nodo determinado se de, dé baja de un cluster existente.docker swarm leave Este comando es necesario que se ejecute en el nodo, el cual se desea dar de baja del cluster. No sale del cluster solo, se da de baja, pero posteriormente es posible ingresarlo con el comando JOIN. HOSTNAME STATUS nodo1 Ready nodo2 Down Docker node rmSirve para sacar un nodo de manera permanente de un cluster existente.docker node rm HOSTNAME# Ejemplodocker node rm nodo3 En caso, de querer añadir nuevamente el nodo al cluster, se ocupa docker swarm join-token worker/manager(Se puede elegir como se desea agregar un nodo a un cluster worker/manager), en el nodo lider y asi obtener el token(el comando completo, el cual se pegara y ejecutara en el nodo a agregar), en el nodo que se desea agregar.Servicios (Docker Swarm)Para trabajar con servicios se utiliza docker service. Y se deben ejecutar en el nodo Leader. Ya que otros nodos no permitiran su ejecucion.Crear servicio (docker service create)Crear un servicio se utiliza el comando:docker service create.Pero es posible personalizar el servicio desde la linea de comando al crear dicho servicio.docker service create --replicas N° --name NOMBRE_SERVICIO IMAGEN_DOCKER COMANDO_EJECUTAR# Ejemplodocker service create --replicas 1 --servicio0 alphine-linux ping google.comDescripcion: –replicas: es la cantidad de veces que el servicio se ejecutara en los nodos disponibles. N°: Es el numero de replicas, con el cual se ejecutara. –name: El nombre que llevara el servicio el cual se va a crear. Imagen_Docker: La imagen “base” que se ocupara para el servicio. Comando: Lo que se ejecutara en la imagen del servicio.Ver servicios (Docker Service ls)Para ver los servicios que estan en ejecucion se utiliza:docker service ls. ID NAME MODE REPLICAS IMAGE PORTS xxxXXxxx Servicio0 Replicated 1/1 alphine-linux   Ver Informacion Servicio especifico (docker service ps)Para Sirve para ver mas informacion de un servicio en especifico como el nodo en el que se encuentra, hace cuanto tiempo se creo dicho servicio, etc.docker service ps NOMBRE_SERVICIO# EJEMPLOdocker service ps Servicio0Ver Informacion sobre ejecucion de un servicio (docker service logs)Para poder ver lo que ha realizado un servicio en ejecucion, se debe obtener el log de dicho servicio, con el siguiente comando:docker service logs NOMBRE_SERVICIO# Ejemplodocker serveice logs Servicio0Ver toda la informacion relacionada a un servicio (docker service inspect)funciona como cualquier otro inspect.docker service inspect --pretty Nombre_Servicio –pretty sirve para ver de manera mas ordenada la informacion que se entrega.Escalar Serviciopara escalar, replicar o repetir un servicio, se ocupa:docker service scale Nombre_Servicio=Nuevo_N°_Replicas# Ejemplodocker service scale Servicio0=3 cada vez que se inicia un servicio este es una tarea. Solo se puede escalar el servicio el numero de nodos, mientras los recursos lo permitan. Si no posee recursos suficientes, entregara un error.Si se desea disminuir el numero de replicas se vuelve a ejecutar el comando anterior con un nuevo numero de replicas, pero en este caso un N° inferior.docker service scale Service0=1Borrar un servicioPara borrar un servicio se ocupa:docker service rm Nombre_Servicio# Ejemplodocker service rm Service0" }, { "title": "Yii2 Primeros pasos", "url": "/posts/yii2-primeros-pasos/", "categories": "yii2", "tags": "yii2, frameworks, programacion, php", "date": "2023-01-26 02:00:00 -0600", "snippet": "Yii2 Primeros pasosYii2https://www.yiiframework.com/¿Qué es Yii?Yii es un framework de PHP de alto rendimiento, basado en componentes para desarrollar aplicaciones web modernas en poco tiempo. El n...", "content": "Yii2 Primeros pasosYii2https://www.yiiframework.com/¿Qué es Yii?Yii es un framework de PHP de alto rendimiento, basado en componentes para desarrollar aplicaciones web modernas en poco tiempo. El nombre Yii significa “simple y evolutivo” en chino. También se puede considerar como el acrónimo de Yes It Is (que en inglés significa Sí, lo es)!¿En qué es mejor Yii?Yii es un framework genérico de programación web, lo que significa que se puede utilizar para desarrollar todo tipo de aplicaciones web en PHP. Debido a su arquitectura basada en componentes y a su sofisticada compatibilidad de caché, es especialmente apropiado para el desarrollo de aplicaciones de gran envergadura, como páginas web, foros, sistemas de gestión de contenidos (CMS), proyectos de comercio electrónico, servicios web compatibles con la arquitectura REST y muchos más.¿Cómo se compara Yii con otros frameworks?Si estás ya familiarizado con otros framework, puedes apreciar como se compara Yii con ellos: Como la mayoría de los framework de PHP, Yii implementa el patrón de diseño MVC (Modelo-Vista-Controlador) y promueve la organización de código basada en este patrón. La filosofía de Yii consiste en escribir el código de manera simple y elegante, sin sobrediseñar nunca por el mero hecho de seguir un patrón de diseño determinado. Yii es un framework completo (full stack) que provee muchas características probadas y listas para usar, como los constructores de consultas y la clase ActiveRecord para las bases de datos relacionales y NoSQL, la compatibilidad con la arquitectura REST para desarrollar API, la compatibilidad de caché en varios niveles y muchas más. Yii es extremadamente extensible. Puedes personalizar o reemplazar prácticamente cualquier pieza de código de base, como se puede también aprovechar su sólida arquitectura de extensiones para utilizar o desarrollar extensiones distribuibles. El alto rendimiento es siempre la meta principal de Yii.Yii no es un proyecto de un sola persona, detrás de Yii hay un sólido equipo de desarrollo, así como una gran comunidad en la que numerosos profesionales contribuyen constantemente a su desarrollo. El equipo de desarrollo de Yii se mantiene atento a las últimas tendencias de desarrollo web, así como a las mejores prácticas y características de otros frameworks y proyectos. Las buenas prácticas y características más relevantes de otros proyectos se incorporan regularmente a la base del framework y se exponen a través de interfaces simples y elegantes.Versiones de YiiActualmente existen dos versiones principales de Yii: la versión 1.1 y la versión 2.0. Para la versión 1.1, que es de la generación anterior, actualmente solo se ofrece mantenimiento. La versión 2.0 está completamente reescrita y adopta las últimas tecnologías y protocolos, incluidos Composer, PSR, namespaces, traits, etc. La versión 2.0 representa la actual generación del framework y su desarrollo recibirá el principal esfuerzo en los próximos años. Esta guía está basada principalmente en la versión 2.0. del framework.Requisitos y PrerequisitosYii 2.0 requiere PHP 5.4.0 o una versión posterior y corre de mejor manera en la última versión de PHP. Se pueden encontrar requisitos más detallados de características individuales ejecutando el script de comprobación incluido en cada lanzamiento de Yii.Para utilizar Yii se requieren conocimientos básicos de programación orientada a objetos (POO), porque el framework Yii se basa íntegramente en esta tecnología. Yii 2.0 hace uso también de las últimas características de PHP, como namespaces y traits. Comprender estos conceptos te ayudará a entender mejor Yii 2.0. Guía Definitiva de Yii 2.0: https://www.yiiframework.com/doc/guide/2.0/es Guía de instalación para plantilla basica: https://www.yiiframework.com/doc/guide/2.0/es/start-installation Guía de instalación para plantilla avanzada: https://www.yiiframework.com/extension/yiisoft/yii2-app-advanced/doc/guide/2.0/es/start-installation Característica Básica Avanzada Estructura del proyecto ✓ ✓ Controlador site ✓ ✓ Usuario login/logout ✓ ✓ Formularios ✓ ✓ Conexión DB ✓ ✓ Comandos de consola ✓ ✓ Asset bundle ✓ ✓ Tests con Codeception ✓ ✓ Twitter Bootstrap ✓ ✓ Front- y back-end apps   ✓ Modelo User listo para usar   ✓ Registro de usuarios y restablecimiento de contraseña   ✓ Estructura de la aplicaciónLos archivos y directorios más importantes en tu aplicación son (asumiendo que la raíz de la aplicación es basic):basic/ base path de la aplicación composer.json archivo utilizado por Composer, describe información de sus paquetes y librerías config/ contiene la configuración de las aplicaciones (y otras) console.php configuración de la aplicación de consola web.php configuración de la aplicación web commands/ contiene las clases de comandos de consola controllers/ contiene las clases de los controladores models/ contienes las clases del modelo runtime/ contiene archivos generados por Yii en tiempo de ejecución, como archivos de log y cache vendor/ contiene los paquetes y librerías instalados por Composer, incluyendo el propio núcleo de Yii views/ contiene los archivos de vistas (templates) web/ raíz web de la aplicación, contiene los archivos accesibles vía Web assets/ contiene los assets publicados (javascript y css) por Yii index.php el script de entrada (o bootstrap) de la aplicación yii el script de ejecución de los comandos de consola de YiiEn general, los archivos de la aplicación pueden ser divididos en dos: aquellos bajo basic/web y aquellos bajo otros directorios. Los primeros pueden accederse directo por HTTP (ej., en un navegador), mientras que los últimos no pueden ni deben ser accedidos así.Yii implementa el patrón de diseño modelo-vista-controlador (MVC), que es reflejado en la estructura de directorios utilizada. El directorio models contiene todas las clases del modelo, el directorio views contiene todas las vistas (templates), y el directorio controllers contiene todas las clases de controladores.El siguiente diagrama muestra la estructura estática de una aplicación.Diagrama Yii2Cada aplicación tiene un script de entrada web/index.php que es el único script PHP accesible vía web. El script de entrada toma una petición (request) entrante y crea una instancia de una aplicación para manejarlo. La aplicación resuelve la petición (request) con la ayuda de sus componentes, y la envía al resto de los elementos MVC. Los widgets son usados en las vistas para ayudar a construir elementos de interfaz complejos y dinámicos.Ciclo de Vida de una Petición (Request)El siguiente diagrama muestra cómo una aplicación maneja una petición.Diagrama Yii2 Un usuario realiza una petición al script de entrada web/index.php. El script de entrada carga la configuración de la aplicación y crea una instancia de la aplicación para manejar la consulta. La aplicación resuelve la ruta solicitada con la ayuda del componente request de la aplicación. La aplicación crea una instancia de un controlador para manejar la petición. El controlador crea una instancia de una acción y ejecuta los filtros de dicha acción. Si alguno de los filtros falla, la acción es cancelada. Si todos los filtros pasan, la acción es ejecutada. La acción carga datos del modelo, posiblemente de la base de datos. La acción renderiza una vista, pasándole los datos del modelo cargado. El resultado de la renderización es pasado al componente response de la aplicación. El componente response envía el resultado de la renderización al navegador del usuario.Hola Mundo! Crear archivo Controllers/InicioController.php &lt;?phpnamespace app\\controllers;use app\\models\\InicioForm;use Yii;use yii\\filters\\AccessControl;use yii\\web\\Response;use yii\\filters\\VerbFilter;use yii\\web\\Controller;class InicioController extends Controller{ public function actionIndex() { echo \"Hola Mundo\"! }}Controlador / Vista Crear archivo views/inicio/index.php&lt;div class=\"site-index\"&gt; &lt;div class=\"jumbotron\"&gt; &lt;h1&gt;&lt;?= $mensaje ?&gt;&lt;/h1&gt; &lt;h2&gt;&lt;?= $h2 ?&gt;&lt;/h2&gt; &lt;h2&gt;&lt;?= date_format($dateTime, 'Y-m-d H:i:s'); ?&gt;&lt;/h2&gt; &lt;/div&gt;&lt;/div&gt; Modificar archivo Controllers/InicioController.php &lt;?phpnamespace app\\controllers;use app\\models\\InicioForm;use Yii;use yii\\filters\\AccessControl;use yii\\web\\Response;use yii\\filters\\VerbFilter;use yii\\web\\Controller;class InicioController extends Controller{ public function actionIndex() { $mensaje = 'Yes, it is'; $h2 = 'UNIVO'; $dateTime = new \\DateTime(); return $this-&gt;render( 'index', [ 'mensaje' =&gt; $mensaje, 'h2' =&gt; $h2, 'dateTime' =&gt; $dateTime, ] ); }}Ejemplo de Resta Crear vista views/inicio/resta.php&lt;div class=\"site-index\"&gt; &lt;div class=\"jumbotron\"&gt; &lt;h1&gt;&lt;?= $resultado ?&gt;&lt;/h1&gt; &lt;/div&gt;&lt;/div&gt; Modificar archivo Controllers/InicioController.php &lt;?phpnamespace app\\controllers;use app\\models\\InicioForm;use Yii;use yii\\filters\\AccessControl;use yii\\web\\Response;use yii\\filters\\VerbFilter;use yii\\web\\Controller;class InicioController extends Controller{ public function actionIndex() { $mensaje = 'Yes, it is'; $h2 = 'UNIVO'; $dateTime = new \\DateTime(); return $this-&gt;render( 'index', [ 'mensaje' =&gt; $mensaje, 'h2' =&gt; $h2, 'dateTime' =&gt; $dateTime, ] ); } public function actionResta() { $valor_a = 60; $valor_b = 8; $resultado = $valor_a - $valor_b; return $this-&gt;render('resta', ['resultado' =&gt; $resultado]); }}Modelo / Vista / Controlador Crear archivo models/inicioForm.php&lt;?phpnamespace app\\models;use Yii;use yii\\base\\Model;class InicioForm extends Model{ public $valor_a; public $valor_b; public function rules() { return [ [['valor_a', 'valor_b'], 'required'], [['valor_a', 'valor_b'], 'number'], ]; }} Crear vista views/inicio/suma.php &lt;?phpuse yii\\helpers\\Html;use yii\\widgets\\ActiveForm;?&gt;&lt;?phpif (isset($respuesta)) { echo Html::tag('div', Html::encode($respuesta), ['class' =&gt; 'alert alert-warning']);}?&gt;&lt;div class=\"row\"&gt; &lt;div class=\"container\"&gt; &lt;?php $formulario = ActiveForm::begin(); ?&gt; &lt;?= $formulario-&gt;field($model, 'valor_a') ?&gt; &lt;?= $formulario-&gt;field($model, 'valor_b') ?&gt; &lt;div class=\"form-group\"&gt; &lt;?= Html::submitButton('Aceptar', ['class' =&gt; 'btn btn-success']) ?&gt; &lt;/div&gt; &lt;?php ActiveForm::end(); ?&gt; &lt;/div&gt;&lt;/div&gt; Modificar archivo Controllers/InicioController.php &lt;?phpnamespace app\\controllers;use app\\models\\InicioForm;use Yii;use yii\\filters\\AccessControl;use yii\\web\\Response;use yii\\filters\\VerbFilter;use yii\\web\\Controller;class InicioController extends Controller{ public function actionIndex() { $mensaje = 'Yes, it is'; $h2 = 'UNIVO'; $dateTime = new \\DateTime(); return $this-&gt;render( 'index', [ 'mensaje' =&gt; $mensaje, 'h2' =&gt; $h2, 'dateTime' =&gt; $dateTime, ] ); } public function actionResta() { $valor_a = 60; $valor_b = 8; $resultado = $valor_a - $valor_b; return $this-&gt;render('resta', ['resultado' =&gt; $resultado]); } public function actionSuma() { $model = new InicioForm(); if ($model-&gt;load(Yii::$app-&gt;request-&gt;post()) &amp;&amp; $model-&gt;validate()) { $resultado = $model-&gt;valor_a + $model-&gt;valor_b; $respuesta = (\"El resultado es: \" . $resultado); return $this-&gt;render('suma', ['model' =&gt; $model, 'respuesta' =&gt; $respuesta]); } return $this-&gt;render('suma', ['model' =&gt; $model]); }}" }, { "title": "Personalización de Terminales", "url": "/posts/terminales/", "categories": "GCS", "tags": "windows, linux, shell, gestion de calidad de software", "date": "2023-01-22 23:00:00 -0600", "snippet": "TerminalWindows Terminal vs. PowerShell: ¿Qué los hace diferentes? Se ven similares, pero bajo el capó, Windows Terminal y PowerShell actúan de manera muy diferente.Si usa Windows 10 u 11, encontra...", "content": "TerminalWindows Terminal vs. PowerShell: ¿Qué los hace diferentes? Se ven similares, pero bajo el capó, Windows Terminal y PowerShell actúan de manera muy diferente.Si usa Windows 10 u 11, encontrará PowerShell y Windows Terminal preinstalados en su sistema. En esencia, son esencialmente herramientas de línea de comandos para ingresar instrucciones (comandos) que le permiten realizar una variedad de tareas en su PC con Windows. Estas tareas incluyen la resolución de problemas, la automatización de tareas, la gestión de sistemas, la ejecución de diagnósticos y la administración de redes.PowerShell es una mejora sobre el símbolo del sistemaMicrosoft introdujo PowerShell en 2006 y hace todo lo que hace el símbolo del sistema (cmd) y algo más. Dado que Microsoft creó PowerShell sobre .NET Framework, puede usar lenguajes .NET, además de comandos basados ​​en texto, en la aplicación para interactuar con su sistema operativo. El lenguaje más popular para PowerShell es C# y le permite desbloquear las funciones avanzadas de la herramienta y aumentar su productividad.Además de los comandos estándar, PowerShell tiene más de 200 cmdlets, un tipo especial de clase de C# que Microsoft define como “comandos ligeros”. Cuando PowerShell los ejecuta, devuelven un objeto .NET que puede manipular.Esto, por ejemplo, le permite no solo interactuar con programas en su computadora que funcionan con .Net Core, sino también procesar su entrada sin tener que escribir ningún código especial o complicado.Además, si bien PowerShell puede ejecutar archivos por lotes como cmd, también permite una mayor automatización al permitirle programar cuándo se ejecutan las tareas. De esa manera, puede alinear tareas por adelantado y hacer otras cosas mientras deja que PowerShell haga lo suyo.Estas son solo algunas de las formas en que PowerShell es mucho más poderoso que el símbolo del sistema. Entonces, mientras que Microsoft nos trajo PowerShell para llevar CommandPrompt al siguiente nivel, ¿cuál es el propósito de Windows Terminal?Terminal de Windows trajo BASH a Windows Microsoft presentó Windows Terminal en 2019 con Windows 10, y es un operador de terminal que admite casi cualquier shell de línea de comandos. La aplicación es más notable por traer una herramienta de línea de comandos a Windows que la comunidad ha envidiado durante mucho tiempo sobre Linux: BASH (Bourne Again Shell).Además, otra gran característica de Windows Terminal es el cambio a una interfaz con pestañas más moderna que le permite ejecutar varias utilidades de línea de comandos. Por ejemplo, puede tener varias instancias de Símbolo del sistema ejecutándose o abrir cmd, PowerShell, BASH y Azure a la vez.Además, puedes usar emojis y caracteres especiales de otros idiomas en Windows Terminal gracias a su compatibilidad con Unicode y UTF. Y con su nuevo motor de renderizado de texto de GPU acelerado, puede mostrarlos sin saltarse nada. También puede personalizar la interfaz de la aplicación dándole diferentes esquemas de color, imágenes de fondo (también admite GIF) y configuraciones.Windows Terminal es un proyecto de código abierto y la comunidad de línea de comandos de Windows lo está desarrollando activamente. Esta es una comunidad apasionada por el proyecto y apoyará continuamente la aplicación, mejorará su rendimiento y agregará más funciones (los contribuyentes priorizarán las más solicitadas, por supuesto).NerdFonts Instalar Nerd Font preferentemente con soporte con ligaturas por ejemplo FiraCode https://www.nerdfonts.com/Windows Terminal Descargar e instalar Terminal para Windows / PowerShellTerminal Abrir Terminal en windows y cambiar el perfil por defecto, inicialmente es Command Prompt. Seleccionar una de las opciones decargadas en el paso anterior Terminal Configurar preferencias por terminal por ejemplo imagen de fondo, transparencia de la ventana, tipo de fuente (NerdFont), etc.TerminalOh My Posh Instalar Oh My Posh https://ohmyposh.dev/docs/installation/windows Instalacion globalwinget install JanDeDobbeleer.OhMyPosh -s winget Instalacion por Usuario Install-Module oh-my-posh -Scope CurrentUser Para utilizar Oh My Posh (https://ohmyposh.dev/docs/installation/prompt) se necesita crear/editar el archivo $PROFILE notepad $PROFILETerminal Agregrar la siguiente linea al archivo de perfiloh-my-posh init pwsh | Invoke-Expression Terminal hasta este momento deberia lucir asi:TerminalTemas de Oh My Posh Para obtener e instalar los temas disponibles (https://ohmyposh.dev/docs/themes) ejecutamos el comandoGet-PoshThemes Editar el archivo de perfil, donde colocamos el nombre del tema a utilizar, en este ejemplo powerlevel10k Rainbowoh-my-posh --init --shell pwsh --config ~/AppData/Local/Programs/oh-my-posh/themes/powerlevel10k_rainbow.omp.json | Invoke-ExpressionPSReadLine Este modulo permite autocompletar los comandos en la terminal y mostrar si se desea una lista de comandos usados con anterioridad Repositorio: https://github.com/PowerShell/PSReadLineInstall-Module PSReadLine Editar el archivo de perfil:oh-my-posh --init --shell pwsh --config ~/AppData/Local/Programs/oh-my-posh/themes/powerlevel10k_rainbow.omp.json | Invoke-ExpressionImport-Module PSReadLineSet-PSReadLineOption -PredictionViewStyle ListViewSet-PSReadLineOption -PredictionSource HistorySet-PSReadLineOption -EditMode WindowsIconos de Terminal Permite ver los archivos en las carpetas con sus iconos conrrespondientes Repositorio: https://github.com/devblackops/Terminal-IconsInstall-Module -Name Terminal-Icons -Repository PSGallery Editar el archivo de perfil:oh-my-posh --init --shell pwsh --config ~/AppData/Local/Programs/oh-my-posh/themes/powerlevel10k_rainbow.omp.json | Invoke-ExpressionImport-Module PSReadLineSet-PSReadLineOption -PredictionViewStyle ListViewSet-PSReadLineOption -PredictionSource HistorySet-PSReadLineOption -EditMode WindowsImport-Module -Name Terminal-Icons#Get-ChildItem | Format-List#Get-ChildItem | Format-WideWinFetch Muestra informacion del sistema al iniciar la terminal Repositorio: https://github.com/lptstr/winfetchInstall-Script winfetch Editar el archivo de perfil:oh-my-posh --init --shell pwsh --config ~/AppData/Local/Programs/oh-my-posh/themes/powerlevel10k_rainbow.omp.json | Invoke-ExpressionImport-Module PSReadLineSet-PSReadLineOption -PredictionViewStyle ListViewSet-PSReadLineOption -PredictionSource HistorySet-PSReadLineOption -EditMode WindowsImport-Module -Name Terminal-Icons#Get-ChildItem | Format-List#Get-ChildItem | Format-Widewinfetch Para personalizar la informacion que se muestra editar adecuadamente el archivo ~\\.config\\winfetch\\config.ps1 Resultado FinalTerminalPersonalizar consola de UbuntuBASH Shell Verificar actualizaciones con el comando sudo apt update Instalar neofetch muestra informacion del sistema sudo apt install neofetch Instalar git y curlsudo apt install gitsudo apt install curl Comando ls muestra lista de archivos en una carpeta, ls -la muestra los ocultos Instalar Oh My Bash https://github.com/ohmybash/oh-my-bashbash -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)\" Listado de temas https://github.com/ohmybash/oh-my-bash/tree/master/themes Instalar fuentes e iconos https://github.com/powerline/fontssudo apt-get install fonts-powerline editar el archivo .bashrcnano .bashrc Editar linea del tema: OSH_THEME=\"powerline-multiline\" Agregar al final del archivo neofetchZSH Shell el comando echo $SHELL muestra la shell que actualmente se esta utilizando Instalar Shel ZSHsudo apt install zsh Cambiar shell con el comando chsh/bin/zsh Crear archivo de configuracion con opcion 0 Verificar archivo creado con cat ~/.zshrc Instalar Oh My ZSH https://github.com/ohmyzsh/ohmyzshsh -c \"$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" Instalar autosugerencias para ZSH https://github.com/zsh-users/zsh-autosuggestionsgit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions Instalar Syntax Highlinghting para ZSH https://github.com/zsh-users/zsh-syntax-highlightinggit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting Editar archivo .zshrc nano .zshrc Editar linea en el archivo plugins=(git zsh-autosuggestions zsh-syntax-highlighting)  Instalar font awesome sudo apt install -y fonts-font-awesome Instalar Powerlevel10k https://github.com/romkatv/powerlevel10k#oh-my-zshgit clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k Editar archivo .zshrc modificar la linea ZSH_THEME=\"powerlevel10k/powerlevel10k\"  Al reiniciar la terminal se nos mostrara la configuracion paso a paso, en caso de no aparecer escribir el comando p10k configure Para agregar NeoFetch agragamos las siguientes lineas al archivo .zshrcneofetchtypeset -g POWERLEVEL9K_INSTANT_PROMPT=offResultado final:Terminal" }, { "title": "NuxtJS", "url": "/posts/nuxtjs/", "categories": "vue", "tags": "vue, frontend, programacion, nuxtjs", "date": "2022-12-04 00:00:00 -0600", "snippet": "NuxtJSNuxt es un marco de código abierto bajo licencia MIT para crear aplicaciones web modernas y de alto rendimiento que se pueden implementar en cualquier plataforma que ejecute JavaScript. ¿Qué ...", "content": "NuxtJSNuxt es un marco de código abierto bajo licencia MIT para crear aplicaciones web modernas y de alto rendimiento que se pueden implementar en cualquier plataforma que ejecute JavaScript. ¿Qué es Nuxt? Para comprender qué es Nuxt, debemos comprender qué necesitamos para crear una aplicación moderna: Marco de JavaScript: Un marco de JavaScript para brindar reactividad y componentes web, elegimos Vue.js. Webpack y Vite: Un paquete para admitir el reemplazo de módulos calientes en desarrollo y agrupar su código para producción, admitimos webpack 5 y Vite. Última sintaxis de JavaScript: Un transpilador para escribir la última sintaxis de JavaScript mientras se admite navegadores heredados, usamos esbuild para eso. Lado del servidor: Un servidor para servir su aplicación en desarrollo, pero también para admitir la representación del lado del servidor o las rutas API, Nuxt usa h3 para la versatilidad de implementación, como sin servidor, trabajadores, Node.js y un rendimiento inigualable. Biblioteca de enrutamiento: Una biblioteca de enrutamiento para manejar la navegación del lado del cliente, elegimos vue-router.Esto es solo la punta del iceberg, imagine tener que configurar todo esto para su proyecto, hacer que funcione y luego mantenerlo a lo largo del tiempo. Hemos estado haciendo esto desde octubre de 2016, ajustando todas las configuraciones para brindar la mejor optimización y rendimiento para cualquier aplicación de Vue.Nuxt se encarga de esto y proporciona funcionalidad tanto de frontend como de backend para que pueda concentrarse en lo que importa: crear su aplicación web.https://nuxt.com/docs/getting-started/introductionhttps://nuxt.com/docs/getting-started/installationInstalación Crear proyecto con el siguente comandonpx nuxi init nombre-proyecto Entrar a la carpeta e instalar dependenciasnpm install La estructura inicial de Nuxt incluye un archivo typeScript llamado nuxt.config.ts el cual es recomendado dejarlo con dicha extension, los demas archivos puedes ser de tipo javascript Probar la aplicacionnpm run dev Modificar app.vue&lt;template&gt; &lt;div&gt; &lt;p&gt;Hello World!&lt;/p&gt; &lt;/div&gt;&lt;/template&gt;Agregando paginas Nuxt permite la creacion dinamica de contenido dependiendo de lo que se vaya necesitando Eliminar app.vue Crear carpeta pages en la raiz del proyecto Crear pages/index.vue  &lt;template&gt; &lt;div&gt; &lt;h2&gt;Inicio&lt;/h2&gt; &lt;p&gt; Lorem ipsum dolor sit amet consectetur, adipisicing elit. Obcaecati, placeat, quasi, saepe perspiciatis facilis possimus delectus excepturi officia ex ullam adipisci? Ratione repudiandae et doloribus numquam, quasi quam ullam cum. &lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;&lt;/script&gt;&lt;style scoped&gt;h2 { margin-bottom: 20px; font-size: 36px;}p { margin: 20px 0;}&lt;/style&gt; Crear pages/about.vue&lt;template&gt; &lt;div&gt; &lt;h2&gt;Acerca de...&lt;/h2&gt; &lt;p&gt; Lorem ipsum dolor sit amet consectetur, adipisicing elit. Obcaecati, placeat, quasi, saepe perspiciatis facilis possimus delectus excepturi officia ex ullam adipisci? Ratione repudiandae et doloribus numquam, quasi quam ullam cum. &lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;&lt;/script&gt;&lt;style scoped&gt;h2 { margin-bottom: 20px; font-size: 36px;}p { margin: 20px 0;}&lt;/style&gt; Crear componente pages/productos/index.vue &lt;template&gt; &lt;div&gt; &lt;h2&gt;Productos&lt;/h2&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;&lt;/script&gt;&lt;style scoped&gt;h2 { margin-bottom: 20px; font-size: 36px;}p { margin: 20px 0;}&lt;/style&gt;Parametros de rutas Crear componente productos/[id].vue &lt;template&gt; &lt;div&gt; &lt;p&gt;Detalles para el producto con id: { { id_producto } }&lt;/p&gt;&lt;br&gt; &lt;p&gt; Lorem, ipsum dolor sit amet consectetur adipisicing elit. Ratione consectetur voluptatum magnam quasi, est dolorum. Quo saepe minus voluptate nemo? &lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;const { id_producto } = useRoute().params;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;Navegación (NuxtLink) Modificar page/index.vue &lt;template&gt; &lt;div&gt; &lt;header&gt; &lt;nav&gt; &lt;NuxtLink to=\"/\"&gt;&lt;img src=\"~/assets/images/logo.png\" /&gt;&lt;/NuxtLink&gt; &lt;ul&gt; &lt;li&gt;&lt;NuxtLink to=\"/\"&gt;Inicio&lt;/NuxtLink&gt;&lt;/li&gt; &lt;li&gt;&lt;NuxtLink to=\"/about\"&gt;Acerca de&lt;/NuxtLink&gt;&lt;/li&gt; &lt;li&gt;&lt;NuxtLink to=\"/productos\"&gt;Productos&lt;/NuxtLink&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;/header&gt; &lt;h2&gt;Inicio&lt;/h2&gt; &lt;p&gt; Lorem ipsum dolor sit amet consectetur, adipisicing elit. Obcaecati, placeat, quasi, saepe perspiciatis facilis possimus delectus excepturi officia ex ullam adipisci? Ratione repudiandae et doloribus numquam, quasi quam ullam cum. &lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;&lt;/script&gt;&lt;style scoped&gt;h2 { margin-bottom: 20px; font-size: 36px;}p { margin: 20px 0;}&lt;/style&gt;Plantillas/diseños Crear componente layouts/default.vue&lt;template&gt; &lt;div&gt; &lt;header&gt; &lt;nav&gt; &lt;NuxtLink to=\"/\"&gt; &lt;img src=\"~/assets/images/logo.png\" /&gt; &lt;/NuxtLink&gt; &lt;ul&gt; &lt;li&gt;&lt;NuxtLink to=\"/\"&gt;Inicio&lt;/NuxtLink&gt;&lt;/li&gt; &lt;li&gt;&lt;NuxtLink to=\"/about\"&gt;Acerca de&lt;/NuxtLink&gt;&lt;/li&gt; &lt;li&gt;&lt;NuxtLink to=\"/productos\"&gt;Productos&lt;/NuxtLink&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;/header&gt; &lt;div&gt; &lt;slot /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;style scoped&gt;.router-link-exact-active { color: fuchsia;}&lt;/style&gt;Plantilla/diseño personalizado Crear componente layouts/productos-layout.vue&lt;template&gt; &lt;div&gt; &lt;header&gt; &lt;nav&gt; &lt;NuxtLink to=\"/productos\"&gt; &lt;img src=\"~/assets/images/logo.png\" /&gt; &lt;/NuxtLink&gt; &lt;ul&gt; &lt;li&gt;&lt;NuxtLink to=\"/\"&gt;Inicio&lt;/NuxtLink&gt;&lt;/li&gt; &lt;li&gt;&lt;NuxtLink to=\"/about\"&gt;Acerca de&lt;/NuxtLink&gt;&lt;/li&gt; &lt;li&gt;&lt;NuxtLink to=\"/productos\"&gt;Productos&lt;/NuxtLink&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;/header&gt; &lt;div&gt; &lt;slot /&gt; &lt;/div&gt; &lt;footer&gt; &lt;ul&gt; &lt;li&gt;&lt;NuxtLink to=\"/\"&gt;Inicio&lt;/NuxtLink&gt;&lt;/li&gt; &lt;li&gt;&lt;NuxtLink to=\"/about\"&gt;Acerca de&lt;/NuxtLink&gt;&lt;/li&gt; &lt;li&gt;&lt;NuxtLink to=\"/productos\"&gt;Productos&lt;/NuxtLink&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/footer&gt; &lt;/div&gt;&lt;/template&gt;&lt;style scoped&gt;.router-link-exact-active { color: fuchsia;}&lt;/style&gt; Modificar productos/index.vue &lt;template&gt; &lt;div&gt; &lt;h2&gt;Productos&lt;/h2&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;definePageMeta({ layout: \"productos-layout\",})&lt;/script&gt;&lt;style scoped&gt;h2 { margin-bottom: 20px; font-size: 36px;}p { margin: 20px 0;}&lt;/style&gt; Modificar productos/[id_producto].vue &lt;template&gt; &lt;div&gt; &lt;p&gt;Detalles para el producto con id: { { id_producto } } &lt;/p&gt;&lt;br&gt; &lt;p&gt; Lorem, ipsum dolor sit amet consectetur adipisicing elit. Ratione consectetur voluptatum magnam quasi, est dolorum. Quo saepe minus voluptate nemo? &lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;const { id_producto } = useRoute().paramsdefinePageMeta({ layout: \"productos-layout\",})&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;Integrando TailwindCSShttps://nuxt.com/moduleshttps://nuxt.com/modules/tailwindcss Instalar la dependencianpm install --save-dev @nuxtjs/tailwindcss Agregar el modulo en nuxt.config.tsexport default defineNuxtConfig({ modules: ['@nuxtjs/tailwindcss']}) Modificar layouts/default.vue&lt;template&gt; &lt;div&gt; &lt;header class=\"shadow-sm bg-sky-900\"&gt; &lt;nav class=\"container mx-auto p-4 flex items-center justify-between\"&gt; &lt;NuxtLink to=\"/\"&gt; &lt;img class=\"w-auto h-10\" src=\"~/assets/images/logo.png\" /&gt; &lt;/NuxtLink&gt; &lt;ul class=\"flex gap-4\"&gt; &lt;li&gt; &lt;NuxtLink class=\"text-white hover:text-sky-500\" to=\"/\"&gt;Inicio&lt;/NuxtLink&gt; &lt;/li&gt; &lt;li&gt; &lt;NuxtLink class=\"text-white hover:text-sky-500\" to=\"/about\"&gt;Acerca de&lt;/NuxtLink&gt; &lt;/li&gt; &lt;li&gt; &lt;NuxtLink class=\"text-white hover:text-sky-500\" to=\"/productos\"&gt;Productos&lt;/NuxtLink&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;/header&gt; &lt;div class=\"container mx-auto p-4\"&gt; &lt;slot /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;style scoped&gt;.router-link-exact-active { font-weight: bolder;}&lt;/style&gt; Modificar layouts/productos-layout.vue&lt;template&gt; &lt;div&gt; &lt;header class=\"shadow-sm bg-sky-900\"&gt; &lt;nav class=\"container mx-auto p-4 flex items-center justify-between\"&gt; &lt;NuxtLink to=\"/productos\"&gt; &lt;img class=\"w-auto h-10\" src=\"~/assets/images/logo.png\" /&gt; &lt;/NuxtLink&gt; &lt;ul class=\"flex gap-4\"&gt; &lt;li&gt; &lt;NuxtLink class=\"text-white hover:text-sky-500\" to=\"/\"&gt;Inicio&lt;/NuxtLink&gt; &lt;/li&gt; &lt;li&gt; &lt;NuxtLink class=\"text-white hover:text-sky-500\" to=\"/about\"&gt;Acerca de&lt;/NuxtLink&gt; &lt;/li&gt; &lt;li&gt; &lt;NuxtLink class=\"text-white hover:text-sky-500\" to=\"/productos\"&gt;Productos&lt;/NuxtLink&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;/header&gt; &lt;div class=\"container mx-auto p-4\"&gt; &lt;slot /&gt; &lt;/div&gt; &lt;footer class=\"container mx-auto p-4 flex justify-between border-t-2 border-orange-900\"&gt; &lt;ul class=\"flex gap-4\"&gt; &lt;li&gt;&lt;NuxtLink to=\"/\"&gt;Inicio&lt;/NuxtLink&gt;&lt;/li&gt; &lt;li&gt;&lt;NuxtLink to=\"/about\"&gt;Acerca de&lt;/NuxtLink&gt;&lt;/li&gt; &lt;li&gt;&lt;NuxtLink to=\"/productos\"&gt;Productos&lt;/NuxtLink&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/footer&gt; &lt;/div&gt;&lt;/template&gt;&lt;style scoped&gt;.router-link-exact-active { font-weight: bolder;}&lt;/style&gt; Extender el alcance de TailwindCSS, crear assets/css/taildwind.css @tailwind base;@tailwind components;@tailwind utilities;body { @apply bg-gray-200;}@layer components { .btn { @apply bg-sky-900 text-white px-3 py-2 rounded-md text-sm hover:font-bold; }}Fetch data https://fakestoreapi.com/docs Obtener todos los productos fetch('https://fakestoreapi.com/products') .then(res=&gt;res.json()) .then(json=&gt;console.log(json)) Obtener solo un productofetch('https://fakestoreapi.com/products/1') .then(res=&gt;res.json()) .then(json=&gt;console.log(json)) Modificar productos/index.vue &lt;template&gt; &lt;div&gt; &lt;h2&gt;Productos&lt;/h2&gt; &lt;div class=\"grid grid-cols-4 gap-5\"&gt; &lt;div v-for=\"producto in productos\"&gt; &lt;NuxtLink :to=\"`/productos/${producto.id}`\"&gt;{ { producto.title } }&lt;/NuxtLink&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;definePageMeta({ layout: \"productos-layout\",})// fetch los productos de la apiconst { data : productos } = await useFetch('https://fakestoreapi.com/products')&lt;/script&gt;&lt;style scoped&gt;h2 { margin-bottom: 20px; font-size: 36px;}p { margin: 20px 0;}&lt;/style&gt; Modificar productos/[id_producto].vue &lt;template&gt; &lt;div&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;const { id_producto } = useRoute().paramsconst uri = 'https://fakestoreapi.com/products/' + id_producto//fetch el productoconst { data: producto } = await useFetch(uri, { key: id_producto } )definePageMeta({ layout: \"productos-layout\",})&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;Componentes reusablesEl directorio components/ es donde coloca todos sus componentes de Vue que luego se pueden importar dentro de sus páginas u otros componentes. Nuxt importa automáticamente cualquier componente en su directorio components/ (junto con los componentes que están registrados por cualquier módulo que pueda estar usando). Crear components/ProductoCard.vue&lt;template&gt; &lt;div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt; Modificar productos/index.vue&lt;template&gt; &lt;div&gt; &lt;h2&gt;Productos&lt;/h2&gt; &lt;div class=\"grid grid-cols-4 gap-5\"&gt; &lt;div v-for=\"producto in productos\"&gt; &lt;ProductoCard :p=\"producto\"/&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;definePageMeta({ layout: \"productos-layout\",})// fetch los productos de la apiconst { data : productos } = await useFetch('https://fakestoreapi.com/products')&lt;/script&gt;&lt;style scoped&gt;h2 { margin-bottom: 20px; font-size: 36px;}p { margin: 20px 0;}&lt;/style&gt; Modificar assets/css/tailwind.css@tailwind base;@tailwind components;@tailwind utilities;body { @apply bg-gray-200;}@layer components { .btn { @apply bg-sky-900 text-white px-3 py-2 rounded-md text-sm hover:font-bold; } .card { @apply p-3 rounded-md bg-white shadow-md h-full; }} Modificar components/ProductoCard.vue&lt;template&gt; &lt;div class=\"card text-center\"&gt; &lt;img :src=\"p.image\" alt=\"imagen del producto\" class=\"object-scale-down h-48 w-96\"&gt; &lt;p class=\"font-bold text-gra-500 m4 truncate\"&gt;{ { p.title } }&lt;/p&gt; &lt;NuxtLink :to=\"`/productos/${p.id}`\"&gt; &lt;p class=\"btn my-4\"&gt;Ver Detalles&lt;/p&gt; &lt;/NuxtLink&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt; const { p } = defineProps(['p'])&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt; Crear components/ProductoDetalles.vue!&lt;template&gt; &lt;div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt; Modificar productos/[id_producto].vue &lt;template&gt; &lt;div&gt; &lt;ProductoDetalles :p = \"producto\"/&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;const { id_producto } = useRoute().paramsconst uri = 'https://fakestoreapi.com/products/' + id_producto//fetch el productoconst { data: producto } = await useFetch(uri, { key: id_producto } )definePageMeta({ layout: \"productos-layout\",})&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt; Modificar components/ProductoDetalles.vue&lt;template&gt; &lt;div class=\"card\"&gt; &lt;div class=\"grid grid-cols-2 gap-10\"&gt; &lt;div class=\"p-7\"&gt; &lt;img :src=\"p.image\" alt=\"imagen del producto\" class=\"mx-auto my-7\"&gt; &lt;/div&gt; &lt;div class=\"p-7\"&gt; &lt;h1 class=\"text-4xl my-7\"&gt;{ { p.title } }&lt;/h1&gt; &lt;p class=\"text-xl my-7\"&gt;Precio - ${ { p.price } }&lt;/p&gt; &lt;h3 class=\"font-bold border-b-2 mb-4 pb-2\"&gt;Descripción del producto:&lt;/h3&gt; &lt;p class=\"mb-7\"&gt;{ {p.description} }&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt; const { p } = defineProps(['p'])&lt;/script&gt;&lt;style scoped&gt; img { max-width: 400px; }&lt;/style&gt;Pagina de error Crear error.vue&lt;template&gt; &lt;div class=\"mt-7 max-w-sm mx-auto text-center card\"&gt; &lt;p class=\"mt-7 text-7xl text-red-700 font-bold\"&gt;{ { error.statusCode } }&lt;/p&gt; &lt;p class=\"mt-7 text-3xl\"&gt;Lo sentimos algo salio mal =( &lt;/p&gt; &lt;p class=\"mt-7\"&gt;{ { error.message } }&lt;/p&gt; &lt;button class=\"btn my-7\" @click=\"handleError\"&gt;Volver al inicio...&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt; defineProps(['error']) const handleError = () =&gt; clearError({ redirect: '/' })&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt; Modificar productos/[id_producto].vue &lt;template&gt; &lt;div&gt; &lt;ProductoDetalles :p = \"producto\"/&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;const { id_producto } = useRoute().paramsconst uri = 'https://fakestoreapi.com/products/' + id_producto//fetch el productoconst { data: producto } = await useFetch(uri, { key: id_producto } )//Crear mensaje de error personalizadoif(!producto.value) { throw createError({ statusCode: 404, statusMessage: 'Producto no encontrado...', fatal: true })}definePageMeta({ layout: \"productos-layout\",})&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;Metadata y cabeceras Crear directorio public y copiar favicon.png a esa ubicacion modificar nuxt.config.ts // https://nuxt.com/docs/api/configuration/nuxt-configexport default defineNuxtConfig({ modules: ['@nuxtjs/tailwindcss'], app: { head: { title: 'Tienda UNIVO', meta: [ { name: 'description', content: 'Tienda de mercaderia UNIVO' } ], link: [ { rel: 'icon', type: 'image/png', href: 'icon_100x100.png' }, { rel: 'stylesheet', href: 'https://fonts.googleapis.com/icon?family=Material+Icons' } ] } }}) Modificar productos/Producto.detalle.vue&lt;template&gt; &lt;div class=\"card\"&gt; &lt;div class=\"grid grid-cols-2 gap-10\"&gt; &lt;div class=\"P-7\"&gt; &lt;img :src=\"p.image\" alt=\"imagen del producto\" class=\"mx-auto my-7\"&gt; &lt;/div&gt; &lt;div class=\"p-7\"&gt; &lt;h1 class=\"text-4xl my-7\"&gt;&lt;/h1&gt; &lt;p class=\"text-xl my-7\"&gt;Precio - $&lt;/p&gt; &lt;h3 class=\"font-bold border-b-2 mb-4 pb-2 border-orange-900\"&gt;Descripcion del producto:&lt;/h3&gt; &lt;p class=\"mb-7\"&gt;&lt;/p&gt; &lt;button class=\"btn flex\"&gt;&lt;i class=\"material-icons mr-2\"&gt;add_shopping_cart&lt;/i&gt; Agregar al carrito&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;const { p } = defineProps(['p'])&lt;/script&gt;&lt;style scoped&gt;img { max-width: 400px;}&lt;/style&gt; Modificar productos/index.vue &lt;template&gt; &lt;div&gt; &lt;h2&gt;Productos&lt;/h2&gt; &lt;div class=\"grid grid-cols-4 gap-5\"&gt; &lt;div v-for=\"producto in productos\"&gt; &lt;ProductoCard :p=\"producto\" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;useHead({ title: 'Tienda UNIVO | Productos', meta: [ { name: 'description', content: 'Listado de productos UNIVO' } ],})definePageMeta({ layout: \"productos-layout\",})// fetch los productos de la apiconst { data: productos } = await useFetch('https://fakestoreapi.com/products')&lt;/script&gt;&lt;style scoped&gt;h2 { margin-bottom: 20px; font-size: 36px;}p { margin: 20px 0;}&lt;/style&gt; Modificar productos/[id_producto].vue &lt;template&gt; &lt;div&gt; &lt;Head&gt; &lt;Title&gt;Tienda UNIVO | { { producto.title } }&lt;/Title&gt; &lt;Meta name=\"description\" :content=\"producto.description\"/&gt; &lt;/Head&gt; &lt;ProductoDetalles :p = \"producto\"/&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;const { id_producto } = useRoute().paramsconst uri = 'https://fakestoreapi.com/products/' + id_producto//fetch el productoconst { data: producto } = await useFetch(uri, { key: id_producto } )//Crear mensaje de error personalizadoif(!producto.value) { throw createError({ statusCode: 404, statusMessage: 'Producto no encontrado...', fatal: true })}definePageMeta({ layout: \"productos-layout\",})&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;" }, { "title": "Electron - parte 2", "url": "/posts/electron-parte-2/", "categories": "Electron", "tags": "javascript, electron, nodeJS, programacion", "date": "2022-12-01 23:00:00 -0600", "snippet": "App redimensionador de imagenes Crear un nuevo boilerplate de electron e instalar las dependenciasnpm initnpm install resize-img toastify-js npm install --save-dev npx electron electronmon electro...", "content": "App redimensionador de imagenes Crear un nuevo boilerplate de electron e instalar las dependenciasnpm initnpm install resize-img toastify-js npm install --save-dev npx electron electronmon electron-builder @electron-forge/cli npx electron-forge import Archivo package.json{ \"name\": \"imagen-univo-v2\", \"productName\": \"ImagenUNIVO\", \"version\": \"2.0.0\", \"description\": \"Redimensionador de imagenes\", \"main\": \"main.js\", \"scripts\": { \"test\": \"npx electronmon .\", \"start\": \"electron-forge start\", \"package\": \"electron-forge package\", \"make\": \"electron-forge make\" }, \"keywords\": [ \"UNIVO\", \"Electron\" ], \"author\": \"Jaime Guevara\", \"license\": \"MIT\", \"dependencies\": { \"electron-squirrel-startup\": \"^1.0.0\", \"resize-img\": \"^2.0.0\", \"toastify-js\": \"^1.12.0\" }, \"devDependencies\": { \"@electron-forge/cli\": \"^7.1.0\", \"@electron-forge/maker-deb\": \"^7.1.0\", \"@electron-forge/maker-rpm\": \"^7.1.0\", \"@electron-forge/maker-squirrel\": \"^7.1.0\", \"@electron-forge/maker-zip\": \"^7.1.0\", \"@electron-forge/plugin-auto-unpack-natives\": \"^7.1.0\", \"electron\": \"^27.1.2\", \"electron-builder\": \"^24.9.1\", \"electronmon\": \"^2.0.2\", \"npx\": \"^10.2.2\" }} Crear main.jsconst { app, BrowserWindow } = require('electron')const path = require('path')process.env.NODE_ENV = 'dev'const isMac = process.platform !== 'darwin'const isDev = process.env.NODE_ENV === 'dev'// Crear ventana Principalfunction createMainWindow() { const mainWindow = new BrowserWindow({ title: 'Redimensionar Imagen', width: isDev ? 1200 : 600, height: 800 }) //Abre DevTools si esta en env dev if (isDev) { mainWindow.webContents.openDevTools() } mainWindow.loadFile(path.join(__dirname, './renderer/index.html'))}// Cuando la app esta lista cre la ventanaapp.whenReady().then(() =&gt; { createMainWindow() app.on('activate', () =&gt; { if (BrowserWindow.getAllWindows().length === 0) { createMainWindow() } })})app.on('window-all-closed', () =&gt; { if (!isMac) app.quit()}) Crear renderer/index.html &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Redimensionar imagen&lt;/title&gt;&lt;/head&gt;&lt;body&gt; Hello World!&lt;/body&gt;&lt;/html&gt; Probar app con npm run test Personalizar UI Modificar index.html &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self' 'unsafe-inline';\" /&gt; &lt;link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" /&gt; &lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin /&gt; &lt;link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;700&amp;display=swap\" rel=\"stylesheet\" /&gt; &lt;link rel=\"stylesheet\" href=\"css/style.css\" /&gt; &lt;script src=\"js/script.js\" defer&gt;&lt;/script&gt; &lt;title&gt;Redimensionar imagen&lt;/title&gt;&lt;/head&gt;&lt;body class=\"bg-dark\"&gt; &lt;div class=\"max-w-xl m-auto h-screen flex flex-col align-center justify-center\"&gt; &lt;div class=\"flex flex-col w-full items-center justify-center bg-grey-lighter\"&gt; &lt;label class=\"w-64 flex flex-col items-center px-4 py-7 bg-white text-gray-500 rounded-lg shadow-lg tracking-wide uppercase border border-blue cursor-pointer\"&gt; &lt;img src=\"./images/folder.png\" width=\"32\" /&gt; &lt;span class=\"mt-2 leading-normal\"&gt;Abrir imagen&lt;/span&gt; &lt;input id=\"img\" type=\"file\" class=\"hidden\" /&gt; &lt;/label&gt; &lt;/div&gt; &lt;!-- Form --&gt; &lt;form id=\"img-form\" class=\"hidden\"&gt; &lt;div class=\"mt-6\"&gt; &lt;label class=\"mt-1 block text-white text-center w-80 m-auto py-3 shadow-sm border-gray-300 rounded-md\"&gt;Ancho&lt;/label&gt; &lt;input type=\"number\" name=\"width\" id=\"width\" class=\"mt-1 block w-80 m-auto p-3 shadow-sm border-gray-300 rounded-md\" placeholder=\"Ancho\" /&gt; &lt;/div&gt; &lt;div class=\"mt-4\"&gt; &lt;label class=\"mt-1 block text-white text-center w-80 m-auto py-3 shadow-sm border-gray-300 rounded-md\"&gt;Alto&lt;/label&gt; &lt;input type=\"number\" name=\"height\" id=\"height\" class=\"mt-1 block w-80 m-auto p-3 shadow-sm border-gray-300 rounded-md\" placeholder=\"Alto\" /&gt; &lt;/div&gt; &lt;!-- Button --&gt; &lt;div class=\"mt-6\"&gt; &lt;button type=\"submit\" class=\"w-80 m-auto flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-teal-500 hover:bg-teal-900 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"&gt; Redimensionar &lt;/button&gt; &lt;/form&gt; &lt;p class=\"text-white text-lg text-center font-mono mt-6\"&gt;&lt;strong&gt;Archivo: &lt;/strong&gt;&lt;span id=\"filename\"&gt;&lt;/span&gt;&lt;/p&gt; &lt;!-- Delete hardcoded path --&gt; &lt;p class=\"text-white text-lg text-center font-mono mt-2\"&gt;&lt;strong&gt;Salida: &lt;/strong&gt;&lt;span id=\"output-path\"&gt;&lt;/span&gt;&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; Crear css/style.css /*! tailwindcss v3.1.8 | MIT License | https://tailwindcss.com*/*,::before,::after { box-sizing: border-box; border-width: 0; border-style: solid; border-color: #e5e7eb;}::before,::after { --tw-content: '';}html { line-height: 1.5; -webkit-text-size-adjust: 100%; -moz-tab-size: 4; -o-tab-size: 4; tab-size: 4; font-family: Poppins, sans-serif;}body { margin: 0; line-height: inherit; overflow: hidden;}hr { height: 0; color: inherit; border-top-width: 1px;}abbr:where([title]) { -webkit-text-decoration: underline dotted; text-decoration: underline dotted;}h1,h2,h3,h4,h5,h6 { font-size: inherit; font-weight: inherit;}a { color: inherit; text-decoration: inherit;}b,strong { font-weight: bolder;}code,kbd,samp,pre { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace; font-size: 1em;}small { font-size: 80%;}sub,sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline;}sub { bottom: -0.25em;}sup { top: -0.5em;}table { text-indent: 0; border-color: inherit; border-collapse: collapse;}button,input,optgroup,select,textarea { font-family: inherit; font-size: 100%; font-weight: inherit; line-height: inherit; color: inherit; margin: 0; padding: 0;}button,select { text-transform: none;}button,[type='button'],[type='reset'],[type='submit'] { -webkit-appearance: button; background-color: transparent; background-image: none;}:-moz-focusring { outline: auto;}:-moz-ui-invalid { box-shadow: none;}progress { vertical-align: baseline;}::-webkit-inner-spin-button,::-webkit-outer-spin-button { height: auto;}[type='search'] { -webkit-appearance: textfield; outline-offset: -2px;}::-webkit-search-decoration { -webkit-appearance: none;}::-webkit-file-upload-button { -webkit-appearance: button; font: inherit;}summary { display: list-item;}blockquote,dl,dd,h1,h2,h3,h4,h5,h6,hr,figure,p,pre { margin: 0;}fieldset { margin: 0; padding: 0;}legend { padding: 0;}ol,ul,menu { list-style: none; margin: 0; padding: 0;}textarea { resize: vertical;}input::-moz-placeholder,textarea::-moz-placeholder { opacity: 1; color: #9ca3af;}input::placeholder,textarea::placeholder { opacity: 1; color: #9ca3af;}button,[role='button'] { cursor: pointer;}:disabled { cursor: default;}img,svg,video,canvas,audio,iframe,embed,object { display: block; vertical-align: middle;}/*Constrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)*/img,video { max-width: 100%; height: auto;}*,::before,::after { --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness: proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgb(59 130 246 / 0.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; --tw-shadow: 0 0 #0000; --tw-shadow-colored: 0 0 #0000; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ;}::-webkit-backdrop { --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness: proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgb(59 130 246 / 0.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; --tw-shadow: 0 0 #0000; --tw-shadow-colored: 0 0 #0000; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ;}::backdrop { --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness: proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgb(59 130 246 / 0.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; --tw-shadow: 0 0 #0000; --tw-shadow-colored: 0 0 #0000; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ;}.m-auto { margin: auto;}.mx-auto { margin-left: auto; margin-right: auto;}.mb-5 { margin-bottom: 1.25rem;}.mt-2 { margin-top: 0.5rem;}.mt-6 { margin-top: 1.5rem;}.mt-1 { margin-top: 0.25rem;}.mt-4 { margin-top: 1rem;}.block { display: block;}.flex { display: flex;}.hidden { display: none;}.h-screen { height: 100vh;}.w-full { width: 100%;}.w-64 { width: 16rem;}.w-80 { width: 20rem;}.max-w-xl { max-width: 36rem;}.cursor-pointer { cursor: pointer;}.resize { resize: both;}.flex-col { flex-direction: column;}.items-center { align-items: center;}.justify-center { justify-content: center;}.rounded-lg { border-radius: 0.5rem;}.rounded-md { border-radius: 0.375rem;}.border { border-width: 1px;}.border-gray-300 { --tw-border-opacity: 1; border-color: rgb(209 213 219 / var(--tw-border-opacity));}.border-transparent { border-color: transparent;}.bg-dark { --tw-bg-opacity: 1; background-color: rgb(50 47 47 / var(--tw-bg-opacity));}.bg-white { --tw-bg-opacity: 1; background-color: rgb(255 255 255 / var(--tw-bg-opacity));}.bg-purple-500 { --tw-bg-opacity: 1; background-color: rgb(138 98 193 / var(--tw-bg-opacity));}.p-3 { padding: 0.75rem;}.px-4 { padding-left: 1rem; padding-right: 1rem;}.py-7 { padding-top: 1.75rem; padding-bottom: 1.75rem;}.py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem;}.text-center { text-align: center;}.font-mono { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace;}.text-xl { font-size: 1.25rem; line-height: 1.75rem;}.text-sm { font-size: 0.875rem; line-height: 1.25rem;}.text-lg { font-size: 1.125rem; line-height: 1.75rem;}.font-medium { font-weight: 500;}.uppercase { text-transform: uppercase;}.leading-normal { line-height: 1.5;}.tracking-wide { letter-spacing: 0.025em;}.text-teal-100 { --tw-text-opacity: 1; color: rgb(204 251 241 / var(--tw-text-opacity));}.text-teal-300 { --tw-text-opacity: 1; color: rgb(94 234 212 / var(--tw-text-opacity));}.text-gray-500 { --tw-text-opacity: 1; color: rgb(107 114 128 / var(--tw-text-opacity));}.text-white { --tw-text-opacity: 1; color: rgb(255 255 255 / var(--tw-text-opacity));}.shadow-lg { --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1); --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color); box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);}.shadow-sm { --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05); --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color); box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);}.focus\\:outline-none:focus { outline: 2px solid transparent; outline-offset: 2px;}.focus\\:ring-2:focus { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color); box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);}.focus\\:ring-blue-500:focus { --tw-ring-opacity: 1; --tw-ring-color: rgb(59 130 246 / var(--tw-ring-opacity));}.focus\\:ring-offset-2:focus { --tw-ring-offset-width: 2px;}Ventana Acerca de modificar main.jsconst { app, BrowserWindow } = require('electron')const path = require('path')process.env.NODE_ENV = 'dev'const isMac = process.platform !== 'darwin'const isDev = process.env.NODE_ENV === 'dev'// Crear ventana Principalfunction createMainWindow() { const mainWindow = new BrowserWindow({ title: 'Redimensionar Imagen', width: isDev ? 1200 : 600, height: 800 }) //Abre DevTools si esta en env dev if (isDev) { mainWindow.webContents.openDevTools() } mainWindow.loadFile(path.join(__dirname, './renderer/index.html'))}// Ventana Aboutfunction createAboutWindow() { aboutWindow = new BrowserWindow({ width: 300, height: 300, title: 'Acerca', icon: `${__dirname}/assets/icons/icon_256x256.png`, }); aboutWindow.loadFile(path.join(__dirname, './renderer/about.html')) aboutWindow.setMenuBarVisibility(false) }// Cuando la app esta lista cre la ventanaapp.whenReady().then(() =&gt; { createMainWindow() app.on('activate', () =&gt; { if (BrowserWindow.getAllWindows().length === 0) { createMainWindow() } })})app.on('window-all-closed', () =&gt; { if (!isMac) app.quit()}) Crear renderer/about.html&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self' 'unsafe-inline';\" /&gt; &lt;link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" /&gt; &lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin /&gt; &lt;link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;700&amp;display=swap\" rel=\"stylesheet\" /&gt; &lt;link rel=\"stylesheet\" href=\"css/style.css\" /&gt; &lt;script src=\"js/script.js\" defer&gt;&lt;/script&gt; &lt;title&gt;ImagenUNIVO&lt;/title&gt;&lt;/head&gt;&lt;body class=\"bg-dark\"&gt; &lt;div class=\"max-w-xl m-auto h-screen flex flex-col align-center justify-center text-center\" &gt; &lt;img src=\"./images/logo.png\" alt=\"ImageResizer\" width=\"100\" class=\"mx-auto mb-5\" /&gt; &lt;h2 class=\"text-xl text-teal-100 text-center\"&gt;ImagenUNIVO App&lt;/h2&gt; &lt;p class=\"text-xl text-teal-100 mt-2\"&gt;Version 2.0.0&lt;/p&gt; &lt;p class=\"text-xl text-teal-100 mt-2\"&gt;MIT License&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;Menu en electron Modificar main.jsconst { app, BrowserWindow, Menu } = require('electron')const path = require('path')process.env.NODE_ENV = 'dev'const isMAc = process.platform !== 'darwin'const isDev = process.env.NODE_ENV === 'dev'// Crear ventana Principalfunction createMainWindow() { const mainWindow = new BrowserWindow({ title: 'Redimensionar Imagen', width: isDev ? 1200 : 600, height: 800 }) //Abre DevTools si esta en env dev if (isDev) { mainWindow.webContents.openDevTools() } mainWindow.loadFile(path.join(__dirname, './renderer/index.html'))}// Ventana Aboutfunction createAboutWindow() { aboutWindow = new BrowserWindow({ width: 300, height: 300, title: 'Acerca', icon: `${__dirname}/assets/icons/icon_256x256.png`, }); aboutWindow.loadFile(path.join(__dirname, './renderer/about.html')) aboutWindow.setMenuBarVisibility(false) }// Cuando la app esta lista cre la ventanaapp.whenReady().then(() =&gt; { createMainWindow() //Implementacion del menu const mainMenu = Menu.buildFromTemplate(menu) Menu.setApplicationMenu(mainMenu) app.on('activate', () =&gt; { if (BrowserWindow.getAllWindows().length === 0) { createMainWindow() } })})// Plantilla de menuconst menu = [ /*{ role: 'fileMenu', },*/ { label: 'Archivo', submenu: [ { label: 'Salir', click: () =&gt; app.quit(), accelerator: 'CmdOrCtrl+W', }, ], },]app.on('window-all-closed', () =&gt; { if (!isMAc) app.quit()}) Plantilla de menu para Mac y Windows// Plantilla de menuconst menu = [ ...(isMac ? [ { label: app.name, submenu: [ { label: 'Acerca', click: createAboutWindow, }, ], }, ] : []), ...(!isMac ? [ { label: 'Ayuda', submenu: [ { label: 'Acerca', click: createAboutWindow, }, ], }, ] : []), ...(isDev ? [ { label: 'Developer', submenu: [ { role: 'reload' }, { role: 'forcereload' }, { type: 'separator' }, { role: 'toggledevtools' }, ], }, ] : []),]Abrir imagen Crear js/script.jsconst form = document.querySelector('#img-form')const widthInput = document.querySelector('#width')const heightInput = document.querySelector('#height')const filename = document.querySelector('#filename')const img = document.querySelector('#img')const outputPath = document.querySelector('#output-path')function cargarImagen(e) { const file = e.target.files[0] if (!esImagen(file)) { //console.log('archivo no valido') alert('Por favor seleccionar una imagen!') return; } //console.log('Exito') //Obtener dimensiones const image = new Image(); image.src = URL.createObjectURL(file) image.onload = function () { widthInput.value = this.width heightInput.value = this.height } form.style.display = 'block'; filename.innerHTML = file.name}function esImagen(file) { const formatosAceptados = ['image/gif', 'image/jpeg', 'image/png'] return file &amp;&amp; formatosAceptados.includes(file['type'])}img.addEventListener('change', cargarImagen) Crear archivo preload.js en raiz del proyectoconst { contextBridge } = require('electron')const os = require('os');const path = require('path');//Modulo OScontextBridge.exposeInMainWorld('os', { homedir: () =&gt; os.homedir(),})//Modulo RutacontextBridge.exposeInMainWorld('path', { join: (...args) =&gt; path.join(...args),}) Modificar main.js // Crear ventana Principalfunction createMainWindow() { const mainWindow = new BrowserWindow({ title: 'Redimensionar Imagen', width: isDev ? 1200 : 600, height: 800, icon: `${__dirname}/assets/icons/icon_256x256.png`, resizable: isDev, webPreferences: { nodeIntegration: true, contextIsolation: true, preload: path.join(__dirname, 'preload.js'), }, }) //Abre DevTools si esta en env dev if (isDev) { mainWindow.webContents.openDevTools() } mainWindow.loadFile(path.join(__dirname, './renderer/index.html'))} Modificar script.jsconst form = document.querySelector('#img-form')const widthInput = document.querySelector('#width')const heightInput = document.querySelector('#height')const filename = document.querySelector('#filename')const img = document.querySelector('#img')const outputPath = document.querySelector('#output-path')function cargarImagen(e) { const file = e.target.files[0] if (!esImagen(file)) { //console.log('archivo no valido') alert('Por favor seleccionar una imagen!') return; } //console.log('Exito') //Obtener dimensiones const image = new Image(); image.src = URL.createObjectURL(file) image.onload = function () { widthInput.value = this.width heightInput.value = this.height } form.style.display = 'block'; filename.innerHTML = file.name outputPath.innerHTML = path.join(os.homedir(), 'imagen_univo')}function esImagen(file) { const formatosAceptados = ['image/gif', 'image/jpeg', 'image/png'] return file &amp;&amp; formatosAceptados.includes(file['type'])}img.addEventListener('change', cargarImagen)Alertas Modiicar preload.jsconst { contextBridge } = require('electron')const os = require('os');const path = require('path');const Toastify = require('toastify-js')//Modulo OScontextBridge.exposeInMainWorld('os', { homedir: () =&gt; os.homedir(),})//Modulo RutacontextBridge.exposeInMainWorld('path', { join: (...args) =&gt; path.join(...args),})//ToastifycontextBridge.exposeInMainWorld('Toastify', { toast: (options) =&gt; Toastify(options).showToast(),}) Modificar script.js// const os = require('os');const form = document.querySelector('#img-form')const widthInput = document.querySelector('#width')const heightInput = document.querySelector('#height')const filename = document.querySelector('#filename')const img = document.querySelector('#img')const outputPath = document.querySelector('#output-path')//console.log(versions.node())function cargarImagen(e) { const file = e.target.files[0] if (!esImagen(file)) { //console.log('archivo no valido') alertError('Por favor seleccionar una imagen!') return; } //console.log('Exito') //Obtener dimensiones const image = new Image(); image.src = URL.createObjectURL(file) image.onload = function () { widthInput.value = this.width heightInput.value = this.height } form.style.display = 'block'; filename.innerHTML = file.name outputPath.innerHTML = path.join(os.homedir(), 'imagen_univo')}function esImagen(file) { const formatosAceptados = ['image/gif', 'image/jpeg', 'image/jpg', 'image/png'] return file &amp;&amp; formatosAceptados.includes(file['type'])}function alertSuccess(message) { Toastify.toast({ text: message, duration: 5000, close: false, style: { background: 'green', color: 'white', textAlign: 'center', }, });}function alertError(message) { Toastify.toast({ text: message, duration: 5000, close: false, style: { background: 'red', color: 'white', textAlign: 'center', }, });}img.addEventListener('change', cargarImagen)Enviando la data de imagen Modiicar preload.jsconst { contextBridge, ipcRenderer } = require('electron')const os = require('os');const path = require('path');const Toastify = require('toastify-js')//Modulo OScontextBridge.exposeInMainWorld('os', { homedir: () =&gt; os.homedir(),})//Modulo RutacontextBridge.exposeInMainWorld('path', { join: (...args) =&gt; path.join(...args),})//ToastifycontextBridge.exposeInMainWorld('Toastify', { toast: (options) =&gt; Toastify(options).showToast(),})//IPCcontextBridge.exposeInMainWorld('ipcRenderer', { send: (channel, data) =&gt; ipcRenderer.send(channel, data), on: (channel, func) =&gt; ipcRenderer.on(channel, (event, ...args) =&gt; func(...args)),}) Modificar script.js// const os = require('os');const form = document.querySelector('#img-form')const widthInput = document.querySelector('#width')const heightInput = document.querySelector('#height')const filename = document.querySelector('#filename')const img = document.querySelector('#img')const outputPath = document.querySelector('#output-path')//console.log(versions.node())function cargarImagen(e) { const file = e.target.files[0] if (!esImagen(file)) { //console.log('archivo no valido') alertError('Por favor seleccionar una imagen!') return; } //console.log('Exito') //Obtener dimensiones const image = new Image(); image.src = URL.createObjectURL(file) image.onload = function () { widthInput.value = this.width heightInput.value = this.height } form.style.display = 'block'; filename.innerHTML = file.name outputPath.innerHTML = path.join(os.homedir(), 'imagen_univo')}// envio de imagefunction enviarImagen(e) { e.preventDefault(); if (!img.files[0]) { alertError('Por favor subir una imagen'); return; } if (widthInput.value === '' || heightInput.value === '') { alertError('Por favor introduzaca Ancho y Alto'); return; } const imgPath = img.files[0].path; const width = widthInput.value; const height = heightInput.value; ipcRenderer.send('image:resize', { imgPath, height, width, });}function esImagen(file) { const formatosAceptados = ['image/gif', 'image/jpeg', 'image/jpg', 'image/png'] return file &amp;&amp; formatosAceptados.includes(file['type'])}function alertSuccess(message) { Toastify.toast({ text: message, duration: 5000, close: false, style: { background: 'green', color: 'white', textAlign: 'center', }, });}function alertError(message) { Toastify.toast({ text: message, duration: 5000, close: false, style: { background: 'red', color: 'white', textAlign: 'center', }, });}// Seleccionar archivo listenerimg.addEventListener('change', cargarImagen)// Formulario listenerform.addEventListener('submit', enviarImagen); Modificar main.jsconst { app, BrowserWindow, Menu, ipcMain } = require('electron')const path = require('path')const os = require('os')const fs = require('fs')process.env.NODE_ENV = 'dev'const isMac = process.platform !== 'darwin'const isDev = process.env.NODE_ENV === 'dev'// Crear ventana Principalfunction createMainWindow() { const mainWindow = new BrowserWindow({ title: 'Redimensionar Imagen', width: isDev ? 1200 : 600, height: 800, icon: `${__dirname}/assets/icons/icon_256x256.png`, resizable: isDev, webPreferences: { nodeIntegration: true, contextIsolation: true, preload: path.join(__dirname, 'preload.js'), }, }) //Abre DevTools si esta en env dev if (isDev) { mainWindow.webContents.openDevTools() } mainWindow.loadFile(path.join(__dirname, './renderer/index.html'))}// Ventana Aboutfunction createAboutWindow() { aboutWindow = new BrowserWindow({ width: 300, height: 300, title: 'Acerca', icon: `${__dirname}/assets/icons/icon_100x100.png`, }); aboutWindow.loadFile(path.join(__dirname, './renderer/about.html')) aboutWindow.setMenuBarVisibility(false)}// Cuando la app esta lista cre la ventanaapp.whenReady().then(() =&gt; { createMainWindow() //Implementacion del menu const mainMenu = Menu.buildFromTemplate(menu) Menu.setApplicationMenu(mainMenu) app.on('activate', () =&gt; { if (BrowserWindow.getAllWindows().length === 0) { createMainWindow() } })})// Plantilla de menuconst menu = [ ...(isMac ? [ { label: app.name, submenu: [ { label: 'Acerca', click: createAboutWindow, }, ], }, ] : []), ...(!isMac ? [ { label: 'Ayuda', submenu: [ { label: 'Acerca', click: createAboutWindow, }, ], }, ] : []), ...(isDev ? [ { label: 'Developer', submenu: [ { role: 'reload' }, { role: 'forcereload' }, { type: 'separator' }, { role: 'toggledevtools' }, ], }, ] : []),]//Respuesta a IPCipcMain.on('image:resize', (e, options) =&gt; { //console.log(options); options.dest = path.join(os.homedir(), 'imagen_univo'); resizeImage(options);})app.on('window-all-closed', () =&gt; { if (!isMac) app.quit()})Modificar y guardar imagen Modificar main.jsconst { app, BrowserWindow, Menu, ipcMain, shell } = require('electron')const path = require('path')const os = require('os')const fs = require('fs')const resizeImg = require('resize-img')process.env.NODE_ENV = 'dev'const isMac = process.platform !== 'darwin'const isDev = process.env.NODE_ENV === 'dev'let mainWindowlet aboutWindow// Crear ventana Principalfunction createMainWindow() { mainWindow = new BrowserWindow({ title: 'Redimensionar Imagen', width: isDev ? 1200 : 600, height: 800, icon: `${__dirname}/assets/icons/icon_512x512.png`, resizable: isDev, webPreferences: { nodeIntegration: true, contextIsolation: true, preload: path.join(__dirname, 'preload.js'), }, }) //console.log (icon); //Abre DevTools si esta en env dev if (isDev) { mainWindow.webContents.openDevTools() } mainWindow.loadFile(path.join(__dirname, './renderer/index.html'))}// Ventana Aboutfunction createAboutWindow() { aboutWindow = new BrowserWindow({ width: 300, height: 300, title: 'Acerca', icon: `${__dirname}/assets/icons/icon_100x100.png`, }); aboutWindow.loadFile(path.join(__dirname, './renderer/about.html')) aboutWindow.setMenuBarVisibility(false)}// Cuando la app esta lista crea la ventanaapp.whenReady().then(() =&gt; { createMainWindow() //Implementacion del menu const mainMenu = Menu.buildFromTemplate(menu) Menu.setApplicationMenu(mainMenu) // Remover variable de memoria mainWindow.on('closed', () =&gt; (mainWindow = null)); app.on('activate', () =&gt; { if (BrowserWindow.getAllWindows().length === 0) { createMainWindow() } })})// Plantilla de menuconst menu = [ ...(isMac ? [ { label: app.name, submenu: [ { label: 'Acerca', click: createAboutWindow, }, ], }, ] : []), ...(!isMac ? [ { label: 'Ayuda', submenu: [ { label: 'Acerca', click: createAboutWindow, }, ], }, ] : []), ...(isDev ? [ { label: 'Developer', submenu: [ { role: 'reload' }, { role: 'forcereload' }, { type: 'separator' }, { role: 'toggledevtools' }, ], }, ] : []),]//Respuesta a IPCipcMain.on('image:resize', (e, options) =&gt; { //console.log(options); options.dest = path.join(os.homedir(), 'imagen_univo'); resizeImage(options);})// Modificar y guardar imagenasync function resizeImage({ imgPath, height, width, dest }) { try { // console.log(imgPath, height, width, dest); // Resize image const newPath = await resizeImg(fs.readFileSync(imgPath), { width: +width, height: +height, }); // Get filename const filename = path.basename(imgPath); // Create destination folder if it doesn't exist if (!fs.existsSync(dest)) { fs.mkdirSync(dest); } // Write the file to the destination folder fs.writeFileSync(path.join(dest, filename), newPath); // Send success to renderer mainWindow.webContents.send('image:done'); // Open the folder in the file explorer shell.openPath(dest); } catch (err) { console.log(err); }}app.on('window-all-closed', () =&gt; { if (!isMac) { app.quit() }}) Modificar script.js// const os = require('os');const form = document.querySelector('#img-form')const widthInput = document.querySelector('#width')const heightInput = document.querySelector('#height')const filename = document.querySelector('#filename')const img = document.querySelector('#img')const outputPath = document.querySelector('#output-path')//console.log(versions.node())function cargarImagen(e) { const file = e.target.files[0] if (!esImagen(file)) { //console.log('archivo no valido') alertError('Por favor seleccionar una imagen!') return; } //console.log('Exito') //Obtener dimensiones const image = new Image(); image.src = URL.createObjectURL(file) image.onload = function () { widthInput.value = this.width heightInput.value = this.height } form.style.display = 'block'; filename.innerHTML = file.name outputPath.innerHTML = path.join(os.homedir(), 'imagen_univo')}// envio de imagefunction enviarImagen(e) { e.preventDefault(); if (!img.files[0]) { alertError('Por favor subir una imagen'); return; } if (widthInput.value === '' || heightInput.value === '') { alertError('Por favor introduzaca Ancho y Alto'); return; } const imgPath = img.files[0].path; const width = widthInput.value; const height = heightInput.value; ipcRenderer.send('image:resize', { imgPath, height, width, });}function esImagen(file) { const formatosAceptados = ['image/gif', 'image/jpeg', 'image/jpg', 'image/png'] return file &amp;&amp; formatosAceptados.includes(file['type'])}// Al finalizar mostrar mensajeipcRenderer.on('image:done', () =&gt; alertSuccess(`Imagen redimensionada a ${heightInput.value} x ${widthInput.value}`));function alertSuccess(message) { Toastify.toast({ text: message, duration: 5000, close: false, style: { background: 'green', color: 'white', textAlign: 'center', }, });}function alertError(message) { Toastify.toast({ text: message, duration: 5000, close: false, style: { background: 'red', color: 'white', textAlign: 'center', }, });}// Seleccionar archivo listenerimg.addEventListener('change', cargarImagen)// Formulario listenerform.addEventListener('submit', enviarImagen); Modificar forge.config.jsconst path = require('path')module.exports = { packagerConfig: { asar: true, icon: path.join(__dirname, 'assets/icons/mac/icon.icns'), }, rebuildConfig: {}, makers: [ { name: '@electron-forge/maker-squirrel', config: {}, }, { name: '@electron-forge/maker-zip', platforms: ['darwin'], }, { name: '@electron-forge/maker-deb', config: {}, }, { name: '@electron-forge/maker-rpm', config: {}, }, ], plugins: [ { name: '@electron-forge/plugin-auto-unpack-natives', config: {}, }, ],};" }, { "title": "Tauri", "url": "/posts/tauri/", "categories": "Tauri", "tags": "javascript, tauri, nodeJS, programacion", "date": "2022-11-24 23:00:00 -0600", "snippet": "TauriHace nueve años, el equipo de Electron revolucionó la forma en que creamos aplicaciones de escritorio al presentar un marco que nos permite crear una rápidamente con conocimientos básicos de H...", "content": "TauriHace nueve años, el equipo de Electron revolucionó la forma en que creamos aplicaciones de escritorio al presentar un marco que nos permite crear una rápidamente con conocimientos básicos de HTML, CSS y JavaScript. Salvo sus críticas válidas, Electron hace el trabajo y lo hemos visto utilizado por varias empresas, incluidas Slack, WhatsApp (escritorio) e incluso el editor de texto favorito de la comunidad de desarrolladores, VS Code. Recientemente, sin embargo, Tauri se introdujo como una alternativa a Electron.¿Qué es Tauri?Tauri es un framework relativamente nuevo que permite crear rápidamente aplicaciones multiplataforma aprovechando las tecnologías web básicas, así como el lenguaje de programación Rust. Tauri se basa en Rust, es seguro y tiene un gran rendimiento por diseño, es compatible con cualquier framework de front-end y permite crear aplicaciones ejecutables para todas las principales plataformas de escritorio, incluidos macOS, Windows y el sistema operativo Linux.Cómo funciona Tauri Cada aplicación Tauri contiene un proceso central que sirve como punto de entrada de la aplicación y es el único componente con acceso completo al sistema operativo. Sin embargo, el proceso central no representa la interfaz de la aplicación real; en su lugar, lanza subprocesos que utilizan bibliotecas WebView proporcionadas por el sistema operativo, lo que permite crear aplicaciones Tauri con tecnologías web. A diferencia de Electron, que empaqueta y procesa sus aplicaciones usando el motor Chromium independientemente del sistema operativo subyacente, Tauri usa las bibliotecas WebView del sistema operativo. La ventaja del enfoque de Tauri es que las bibliotecas de WebView no se incluyen en el ejecutable final, sino que se vinculan dinámicamente en tiempo de ejecución, lo que reduce en gran medida el tamaño y el rendimiento de la aplicación incluida.Ventajas de Tauri Como se indicó anteriormente, las aplicaciones Tauri son mucho más livianas que las aplicaciones Electron debido a su enfoque de vista web. De hecho, una aplicación de muestra construida con Electron que pesa más de 52 MB pesaría mucho menos, alrededor de 3 MB, cuando se construye con Tauri. Algunos otros beneficios importantes del marco Tauri incluyen: Mejor rendimiento: las aplicaciones de Tauri también superan a las aplicaciones de Electron en términos de rendimiento, tiempo de inicio y consumo de memoria. Auto actualizador: Tauri incluye una función de autoactualización que puede integrar rápidamente en su aplicación sin depender de bibliotecas de terceros Multiplataforma: puede generar ejecutables para todos los principales sistemas operativos de escritorio Los principales inconvenientes de Tauri Compatibilidad del navegador: uno de los principales inconvenientes de Tauri es que tendrás que preocuparte por la compatibilidad del navegador. Hay algunas API web que funcionan con macOS WebView y es posible que no funcionen con Windows y viceversa. Además, el diseño de los elementos web, como entradas, botones, etc., varía ligeramente según el sistema operativo WebView. Querrás tener en cuenta estas diferencias Recursos y ecosistema: Tauri todavía es bastante nuevo, al igual que sus recursos y ecosistema. A diferencia de cómo puede encontrar rápidamente complementos y respuestas de StackOverflow para la mayoría de los problemas de Electron, Tauri aún no tiene eso. Sin embargo, esto sin duda cambiará en el futuro. Conocimiento de Rust: cuando trabaje con Tauri, no necesitará Rust en su mayor parte. Sin embargo, es posible que deba aprenderlo a medida que se profundice en cosas avanzadas, como tener que realizar llamadas de sistema operativo de orden superior con Rust si los complementos de JavaScript de Tauri no son compatibles.Creación de aplicaciones TauriAntes de que pueda comenzar a crear aplicaciones Tauri, primero debe instalar algunos paquetes/dependencias de requisitos previos, en particular, las herramientas de compilación de Microsoft Visual Studio C++ y WebView 2 en Windows, las dependencias de desarrollo de CLang y Xcode para macOS y Rust, independientemente del sistema operativo. Puede encontrar instrucciones sobre cómo configurar todo esto en su página de requisitos previos (también se incluyen instrucciones para diferentes distribuciones de Linux). Una vez que haya instalado todos los requisitos previos, puede crear una nueva aplicación Tauri con:npm create tauri-appAl ejecutar este comando, se le pedirá que elija el nombre de su aplicación, gestor de paquetes y receta preferida, es decir, si prefiere usar HTML, CSS y JavaScript básicos u otros frameworks de JavaScript como React, Vue y Svelte.Tauri-setupSe procede a instalar dependencias con:npm installUna vez que se completa el proceso, puede ejecutar la aplicación con el siguiente comando:npm run tauri devEjecutar este comando por primera vez tomará un par de minutos, y una vez que se complete, deberías ver tu nueva aplicación de escritorio aparecer en una nueva ventana, como la vista previa a continuación:Tauri-appY, por supuesto, se admite la recarga en caliente, lo que significa que podemos realizar cambios en nuestro código y se verán reflejados en nuestra aplicación de inmediato.Estructura de archivosSi abre la nueva carpeta de la aplicación en su editor de texto favorito, debería ver los siguientes archivos y directorios:Tauri-filesDonde src sera la carpeta con los archivos HTML/CSS3/JS y la carpeta src-tauri contendrá los archivos de configuración de Tauri. src/main.rs — este archivo rust es el punto de entrada de nuestra aplicación Tauri; básicamente contiene el código para arrancar nuestra aplicación. Aquí, también podríamos incluir funciones personalizadas de Rust a las que podemos llamar directamente a través de JavaScript, como veremos más adelante.Cargo.toml — este archivo es similar a un manifiesto PWA.json y contiene los metadatos de nuestra aplicación.target/ — después de ejecutar el comando de compilación, esta carpeta contendrá los ejecutables de nuestra aplicacióntauri.conf.json - este archivo le permite configurar y personalizar varios aspectos de su aplicación Tauri, como el nombre de la aplicación, tamaño de la ventas, la lista de API permitidas, etc.RUSTAdemás de ejecutar su código normal relacionado con la web (HTML, CSS y JavaScript), Tauri proporciona una característica útil llamada Command Básicamente, le permite crear funciones personalizadas de Rust e invocarlas a través de JavaScript. Esto es particularmente útil si necesita manejar un procesamiento pesado o realizar llamadas al sistema operativo en un código Rust mucho más eficiente.Construyendo la aplicaciónEmpaquetar su proyecto Tauri como una aplicación de escritorio independiente es bastante sencillo, pero primero deberá cambiar el identificador tauri.bundle.identifier en el archivo tauri.config.json de com.tauri.dev a su identificador único preferido. Después de eso, puede continuar ejecutando el siguiente comando:npm run tauri buildnpx tauri buildAl ejecutar el comando de compilación, Tauri detectará automáticamente su sistema operativo y generará la aplicación ejecutable independiente en consecuencia." }, { "title": "BackEnd con NodeJS - parte 3", "url": "/posts/backend-nodejs-parte-3/", "categories": "nodeJS", "tags": "javascript, backend, nodeJS, express, JWT, programacion", "date": "2022-11-19 23:00:00 -0600", "snippet": "Refresh TokenComo se mencionó, por motivos de seguridad, los tokens de acceso pueden ser válidos por un corto período de tiempo. Una vez que caducan, las aplicaciones cliente pueden usar un token d...", "content": "Refresh TokenComo se mencionó, por motivos de seguridad, los tokens de acceso pueden ser válidos por un corto período de tiempo. Una vez que caducan, las aplicaciones cliente pueden usar un token de actualización para “actualizar” el token de acceso. Es decir, un token de actualización es un artefacto de credencial que permite que una aplicación cliente obtenga nuevos tokens de acceso sin tener que pedirle al usuario que inicie sesión nuevamente. La aplicación cliente puede obtener un nuevo token de acceso siempre que el token de actualización sea válido y no haya caducado.Un token de acceso de corta duración ayuda a mejorar la seguridad de nuestras aplicaciones, pero tiene un costo: cuando caduca, el usuario debe iniciar sesión nuevamente para obtener uno nuevo. La reautenticación frecuente puede disminuir la experiencia de usuario percibida de su aplicación. Incluso si lo hace para proteger sus datos, los usuarios pueden encontrar su servicio frustrante o difícil de usar. Un token de actualización puede ayudarlo a equilibrar la seguridad con la usabilidad. Dado que los tokens de actualización suelen tener una vida más larga, puede usarlos para solicitar nuevos tokens de acceso después de que caduquen los tokens de acceso más cortos. Modificar protected.html para cambiar el tipo de verificación del token, incluyendo la cookie en el método request con la propiedad credentials&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Ruta protegida&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Ruta protegida&lt;/h1&gt; &lt;div id=\"app\"&gt; &lt;h2&gt;Email&lt;/h2&gt; &lt;h3&gt;UID&lt;/h3&gt; &lt;/div&gt; &lt;button id=\"logout\"&gt;Logout&lt;/button&gt; &lt;script&gt; document.addEventListener(\"DOMContentLoaded\", async (e) =&gt; { const app = document.getElementById(\"app\") try { //const token = localStorage.getItem('token') const res = await fetch(\"/api/v1/auth/protected\", { method: 'GET', headers: { //\"Authorization\": \"Bearer \" + token, \"Content-Type\": \"application/json\", }, credentials: \"include\" }) console.log(res.ok, res.status) const data = await res.json() console.log(data) app.innerHTML = ` &lt;h2&gt;Email: ${data.email}&lt;/h2&gt; &lt;h3&gt;UID: ${data.uid}&lt;/h3&gt; `; } catch (error) { console.log(error) } }) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; Añadir una nueva variable de entorno: JWT_REFRESH Modificamos tokenManager.js para poder generar el refresh tokenimport jwt from \"jsonwebtoken\"export const generateToken = (uid) =&gt; { const expiresIn = 60 * 15 // 15 min try { const token = jwt.sign({ uid }, process.env.JWT_SECRET, { expiresIn }) return { token, expiresIn } } catch (error) { console.log(error) }}export const generateRefreshToken = (uid, res) =&gt; { const expiresIn = 60 * 60 * 24 * 30 // 30 dias try { const refreshToken = jwt.sign({ uid }, process.env.JWT_REFRESH, { expiresIn }) res.cookie(\"refreshToken\", refreshToken, { httpOnly: true, //evitar document.cookie en consola secure: !(process.env.MODE === \"dev\"), //https sameSite: true, expires: new Date(Date.now() + expiresIn * 1000) }) } catch (error) { console.log(error) return res.status(403).json({ error: error.message }) }} Modificamos la acción de login en auth_controller.js export const login = async (req, res) =&gt; { try { const { email, password } = req.body let usuario = await User.findOne({ email }) if (!usuario) return res.status(403).json({ error: \"No existe este usuario\" }) const respuestaPassword = await usuario.comparePassword(password) if (!respuestaPassword) return res.status(403).json({ error: \"Contraseña incorrecta\" }) // Generacion de JWT const { token, expiresIn } = generateToken(usuario._id) generateRefreshToken(usuario._id, res) return res.json({ token, expiresIn }) //return res.status(201).json({ ok: \"inicio de sesion exitoso\" }) } catch (error) { console.log(error) return res.status(403).json({ error: error.message }) }} Probar en navegador que el refreshToken se ha creadoUso del Refresh Token Crear middleware para generación de refresh token middlewares/requireRefreshToken.jsimport jwt from 'jsonwebtoken'import { errorTokens } from \"../utils/errorsToken.js\"export const requireRefreshToken = (req, res, next) =&gt; { try { const refreshTokenCookie = req.cookies?.refreshToken if(!refreshTokenCookie) throw new Error(\"No existe el refreshToken\") const { uid } = jwt.verify(refreshTokenCookie, process.env.JWT_REFRESH) req.uid = uid next() } catch(error) { console.log(error); const data = errorTokens(error); return res.status(401).json({ error: data }); }} Modificamos  auth_controller.js import { User } from \"../models/User.js\"import { generateRefreshToken, generateToken } from \"../utils/tokenManager.js\"import jwt from \"jsonwebtoken\"export const register = async (req, res) =&gt; { const { email, password } = req.body try { let usuario = new User({ email, password }) await usuario.save() return res.status(201).json({ ok: \"dato almacenado\" }) } catch (error) { console.log(error) return res.status(400).json({ error: error.message }) }}export const login = async (req, res) =&gt; { try { const { email, password } = req.body let usuario = await User.findOne({ email }) if (!usuario) return res.status(403).json({ error: \"No existe este usuario\" }) const respuestaPassword = await usuario.comparePassword(password) if (!respuestaPassword) return res.status(403).json({ error: \"Contraseña incorrecta\" }) // Generacion de JWT const { token, expiresIn } = generateToken(usuario._id) generateRefreshToken(usuario._id, res) return res.json( { token, expiresIn } ) //return res.status(201).json({ ok: \"inicio de sesion exitoso\" }) } catch (error) { console.log(error) return res.status(403).json({ error: error.message }) }}export const infoUser = async (req, res) =&gt; { try { const user = await User.findById(req.uid) //return res.json({ user }) return res.json({ email: user.email, uid: user.id }) } catch (error) { return res.status(500).json({ error: \"error de servidor\" }) }}export const refreshToken = (req, res) =&gt; { try { const { token, expiresIn} = generateToken(req.uid) return res.json({token, expiresIn}) } catch (error) { console.log(error) return res.status(500).json({ error: \"error de servidor.....\" }) }} Agregar nueva ruta para generación del refreshToken en auth.route.js import express from \"express\"import { infoUser, login, refreshToken, register } from \"../controllers/auth_controller.js\"import { validatorExpress } from \"../middlewares/validatorExpress.js\"import { body } from \"express-validator\"import { requireToken } from \"../middlewares/requireToken.js\"import { requireRefreshToken } from \"../middlewares/requireRefreshToken.js\"const router = express.Router()router.post(\"/register\", [ body(\"email\", \"Ingrese un email válido\") .trim() .isEmail() .normalizeEmail(), body(\"password\", \"Contraseña mínimo 6 carácteres\") .trim() .isLength({ min: 6 }) .custom((value, { req }) =&gt; { if (value !== req.body.reEnterPassword) { throw new Error(\"No coinciden las contraseñas\") } return value; }), ], validatorExpress, register)router.post(\"/login\", [ body(\"email\", \"Ingrese un email válido\") .trim() .isEmail() .normalizeEmail(), body(\"password\", \"Contraseña mínimo 6 carácteres\") .trim() .isLength({ min: 6 }), ], validatorExpress, login)router.get(\"/protected\", requireToken, infoUser)router.get(\"/refresh\", requireRefreshToken, refreshToken)export default router Modificar protected.html&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Ruta protegida&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Ruta protegida&lt;/h1&gt; &lt;div id=\"app\"&gt; &lt;h2&gt;Email&lt;/h2&gt; &lt;h3&gt;UID&lt;/h3&gt; &lt;/div&gt; &lt;button id=\"logout\"&gt;Logout&lt;/button&gt; &lt;script&gt; document.addEventListener(\"DOMContentLoaded\", async (e) =&gt; { const app = document.getElementById(\"app\") try { const resToken = await fetch(\"/api/v1/auth/refresh\", { method: 'GET', credentials: \"include\" }) //console.log(resToken.ok, resToken.status); const { token } = await resToken.json() //const token = localStorage.getItem('token') const res = await fetch(\"/api/v1/auth/protected\", { method: 'GET', headers: { \"Authorization\": \"Bearer \" + token, \"Content-Type\": \"application/json\", }, //credentials: \"include\" }) //console.log(res.ok, res.status) const data = await res.json() //console.log(data) app.innerHTML = ` &lt;h2&gt;Email: ${data.email}&lt;/h2&gt; &lt;h3&gt;UID: ${data.uid}&lt;/h3&gt; `; } catch (error) { console.log(error) } }) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;Cerrar sesión Modificamos  auth_controller.js export const logout = (req, res) =&gt; { res.clearCookie(\"refreshToken\") return res.json({ ok: true })} Agregamos ruta a auth_route.jsrouter.get(\"/logout\", logout) Modificamos protected.html&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Ruta protegida&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Ruta protegida&lt;/h1&gt; &lt;div id=\"app\"&gt; &lt;h2&gt;Email&lt;/h2&gt; &lt;h3&gt;UID&lt;/h3&gt; &lt;/div&gt; &lt;button id=\"logout\"&gt;Logout&lt;/button&gt; &lt;script&gt; document.addEventListener(\"DOMContentLoaded\", async (e) =&gt; { const app = document.getElementById(\"app\") try { const resToken = await fetch(\"/api/v1/auth/refresh\", { method: 'GET', credentials: \"include\" }) //console.log(resToken.ok, resToken.status); const { token } = await resToken.json() //const token = localStorage.getItem('token') const res = await fetch(\"/api/v1/auth/protected\", { method: 'GET', headers: { \"Authorization\": \"Bearer \" + token, \"Content-Type\": \"application/json\", }, //credentials: \"include\" }) //console.log(res.ok, res.status) const data = await res.json() //console.log(data) app.innerHTML = ` &lt;h2&gt;Email: ${data.email}&lt;/h2&gt; &lt;h3&gt;UID: ${data.uid}&lt;/h3&gt; `; } catch (error) { console.log(error) } const logout = document.querySelector(\"#logout\"); logout.addEventListener(\"click\", async () =&gt; { const res = await fetch(\"/api/v1/auth/logout\"); console.log(res.ok, res.status); if (res.ok) { window.location.href = \"/\"; } }) }) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;" }, { "title": "Electron - parte 1", "url": "/posts/electron-parte-1/", "categories": "Electron", "tags": "javascript, electron, nodeJS, programacion", "date": "2022-11-10 23:00:00 -0600", "snippet": "Introducción a ElectronElectron es un marco para crear aplicaciones de escritorio utilizando JavaScript, HTML y CSS. Al incorporar Chromium y Node.js en su binario, Electron le permite mantener una...", "content": "Introducción a ElectronElectron es un marco para crear aplicaciones de escritorio utilizando JavaScript, HTML y CSS. Al incorporar Chromium y Node.js en su binario, Electron le permite mantener una base de código JavaScript y crear aplicaciones multiplataforma que funcionan en Windows, macOS y Linux, sin necesidad de experiencia en desarrollo nativo. Sitio OficialElectron Iniciar proyecto con Node.js⁠npm init package name: app-electronversion: (1.0.0)description: app en electronentry point: (index.js) main.jstest command:git repository:keywords: electron, app, UNIVOauthor: Jaime Guevaralicense: (ISC) MIT Instalar dependencias npm i electron Crear main.jsconsole.log(\"Hola Mundo!\") Modificar package.json { \"name\": \"app-electron\", \"productName\": \"app-electron\", \"version\": \"1.0.0\", \"description\": \"app en electron\", \"main\": \"main.js\", \"scripts\": { \"start\": \"electron .\" }, \"keywords\": [ \"electron\", \"app\", \"UNIVO\" ], \"author\": \"Jaime Guevara\", \"license\": \"MIT\"} Ejecutar a aplicación con el comando npm start se detiene con Ctrl+CElectron Boilerplate Copiar contenido según se describa en la documentación oficial: https://www.electronjs.org/docs/latest Modificar main.jsconst { app, BrowserWindow } = require('electron')const path = require('path')function createWindow () { const win = new BrowserWindow({ width: 800, height: 600, webPreferences: { preload: path.join(__dirname, 'preload.js') } }) win.loadFile('index.html')}app.whenReady().then(() =&gt; { createWindow() app.on('activate', () =&gt; { if (BrowserWindow.getAllWindows().length === 0) { createWindow() } })})app.on('window-all-closed', () =&gt; { if (process.platform !== 'darwin') { app.quit() }}) Crear preload.jswindow.addEventListener('DOMContentLoaded', () =&gt; { const replaceText = (selector, text) =&gt; { const element = document.getElementById(selector) if (element) element.innerText = text } for (const type of ['chrome', 'node', 'electron']) { replaceText(`${type}-version`, process.versions[type]) }}) Crear index.html&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Hello World!&lt;/title&gt; &lt;meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self' 'unsafe-inline';\" /&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Hello World!&lt;/h1&gt; &lt;p&gt; We are using Node.js &lt;span id=\"node-version\"&gt;&lt;/span&gt;, Chromium &lt;span id=\"chrome-version\"&gt;&lt;/span&gt;, and Electron &lt;span id=\"electron-version\"&gt;&lt;/span&gt;. &lt;/p&gt;&lt;/body&gt;&lt;/html&gt; Personalizar el comportamiento de comprobación de sistema operativo Mac y uso de DevTools modificando el archivo main.jsconst { app, BrowserWindow } = require('electron')const path = require('path')process.env.NODE_ENV = 'dev'const isMAc = process.platform !== 'darwin'const isDev = process.env.NODE_ENV !== 'production'function createWindow () { const win = new BrowserWindow({ width: isDev ? 1200 : 800, height: 600, webPreferences: { preload: path.join(__dirname, 'preload.js') } }) //Abre DevTools si esta en env dev if (isDev) { win.webContents.openDevTools() } win.loadFile('index.html')}app.whenReady().then(() =&gt; { createWindow() app.on('activate', () =&gt; { if (BrowserWindow.getAllWindows().length === 0) { createWindow() } })})app.on('window-all-closed', () =&gt; { if (!isMAc) { app.quit() }}) Establecer hotreload con el comando npx electronmon . esto instala un nuevo paquete. Se puede cambiar el script en el archivo package.json { \"name\": \"app-electron\", \"productName\": \"app-electron\", \"version\": \"1.0.0\", \"description\": \"app en electron\", \"main\": \"main.js\", \"scripts\": { \"start\": \"npx electronmon .\" }, \"keywords\": [ \"electron\", \"app\", \"UNIVO\" ], \"author\": \"Jaime Guevara\", \"license\": \"MIT\", \"dependencies\": { \"electron\": \"^6.1.12\" }}Calculadora en Electron Crear un nuevo boilerplate de electron e instalar las dependenciasnpm initnpm i npx electronmonnpm install --save-dev electron Modificar package.json { \"name\": \"calc-electron\", \"productName\": \"calc-electron\", \"version\": \"1.0.0\", \"description\": \"calculadora en electron\", \"main\": \"main.js\", \"scripts\": { \"start\": \"npx electronmon .\" }, \"keywords\": [], \"author\": \"Jaime Guevara\", \"license\": \"MIT\", \"dependencies\": { \"electron\": \"^21.2.3\", \"electronmon\": \"^2.0.2\", \"npx\": \"^10.2.2\" }} Crear main.jsconst { app, BrowserWindow } = require('electron')const path = require('path')process.env.NODE_ENV = 'dev'const isMAc = process.platform !== 'darwin'const isDev = process.env.NODE_ENV !== 'production'function createMainWindow () { const mainWindow = new BrowserWindow({ width: isDev ? 1200 : 350, height: 800 }) //Abre DevTools si esta en env dev if (isDev) { mainWindow.webContents.openDevTools() } mainWindow.loadFile(path.join(__dirname, './renderer/index.html'))}app.whenReady().then(() =&gt; { createMainWindow() app.on('activate', () =&gt; { if (BrowserWindow.getAllWindows().length === 0) { createMainWindow() } })})app.on('window-all-closed', () =&gt; { if (!isMAc) { app.quit() }}) Crear carpeta renderer en el proyecto y copiar los archivos de la calculadora creada en JavaScript anteriormente Modificar renderer/index.html &lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" /&gt; &lt;title&gt;Calculadora - Vanilla JS&lt;/title&gt; &lt;meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self' 'unsafe-inline';\" /&gt; &lt;link rel=\"stylesheet\" href=\"assets/css/style.css\"&gt; &lt;link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"assets/img/favicon-32x32.png\"&gt; &lt;/head&gt; Modificar tamaño de venta y ocultar barra de menu modificando main.jsconst { app, BrowserWindow } = require('electron')const path = require('path')process.env.NODE_ENV = 'dev'const isMAc = process.platform !== 'darwin'const isDev = process.env.NODE_ENV !== 'production'function createMainWindow () { const mainWindow = new BrowserWindow({ width: isDev ? 1200 : 350, height: isDev ? 800 : 550 }) //Abre DevTools si esta en env dev if (isDev) { mainWindow.webContents.openDevTools() } mainWindow.loadFile(path.join(__dirname, './renderer/index.html')) mainWindow.setMenuBarVisibility(false)}app.whenReady().then(() =&gt; { createMainWindow() app.on('ready', () =&gt; { if (BrowserWindow.getAllWindows().length === 0) { createMainWindow() } })})app.on('window-all-closed', () =&gt; { if (!isMAc) { app.quit() }})Empaquetado con Electron Builder Instalar dependenciasnpm install --save-dev electron-builder Modificar package.json{ \"name\": \"calc-electron\", \"productName\": \"calc-electron\", \"version\": \"1.0.0\", \"description\": \"calculadora en electron\", \"main\": \"main.js\", \"scripts\": { \"iniciar\": \"npx electronmon .\", \"package\": \"electron-builder --win\" }, \"keywords\": [], \"author\": \"Jaime Guevara\", \"license\": \"MIT\", \"dependencies\": { \"electronmon\": \"^2.0.2\", \"npx\": \"^10.2.2\" }, \"devDependencies\": { \"electron\": \"^21.2.3\", \"electron-builder\": \"^23.6.0\" }} Ejecutar comando npm run packageEmpaquetado con Electron ForgeElectron no tiene ninguna herramienta para empaquetado y distribución incluida en sus módulos principales. Una vez que tenga una aplicación Electron en funcionamiento en modo de desarrollo, debe usar herramientas adicionales para crear una aplicación empaquetada que pueda distribuir a sus usuarios (también conocida como distribuible). Los distribuibles pueden ser instaladores (p. ej., MSI en Windows) o archivos ejecutables portátiles (p. ej., .app en macOS). Electron Forge es una herramienta todo en uno que maneja el empaquetado y la distribución de las aplicaciones de Electron. Bajo el capó, combina una gran cantidad de herramientas Electron existentes (por ejemplo, electron-packager, @electron/osx-sign, electron-winstaller, etc.) en una única interfaz para que no tenga que preocuparse por conectarlas todas juntas.Importación de su proyecto en Forge Puede instalar la CLI de Electron Forge en las dependencias de desarrollo de su proyecto e importar su proyecto existente con un práctico script de conversión. npm install --save-dev @electron-forge/clinpx electron-forge import Una vez que se realiza el script de conversión, Forge debería haber agregado algunos scripts a su archivo package.json { \"name\": \"calc-electron\", \"productName\": \"calc-electron\", \"version\": \"1.0.0\", \"description\": \"calculadora en electron\", \"main\": \"main.js\", \"scripts\": { \"iniciar\": \"npx electronmon .\", \"start\": \"electron-forge start\", \"package\": \"electron-forge package\", \"make\": \"electron-forge make\" }, \"keywords\": [], \"author\": \"Jaime Guevara\", \"license\": \"MIT\", \"dependencies\": { \"electron-squirrel-startup\": \"^1.0.0\", \"electronmon\": \"^2.0.2\", \"npx\": \"^10.2.2\" }, \"devDependencies\": { \"@electron-forge/cli\": \"^6.0.1\", \"@electron-forge/maker-deb\": \"^6.0.1\", \"@electron-forge/maker-rpm\": \"^6.0.1\", \"@electron-forge/maker-squirrel\": \"^6.0.1\", \"@electron-forge/maker-zip\": \"^6.0.1\", \"electron\": \"^21.2.3\" }}También debe notar que su paquete.json ahora tiene algunos paquetes más instalados en sus dependencias de desarrollo y contiene un campo config.forge agregado con una variedad de creadores configurados. Los creadores son complementos de Forge que crean distribuibles a partir de su código fuente. Debería ver varios fabricantes en la configuración precargada, uno para cada plataforma de destino.Creando un distribuible Para crear un distribuible, use el nuevo script make de su proyecto, que ejecutando el comando ⁠npm run make Este comando make contiene dos pasos: Primero ejecutará el paquete de forja de electrones debajo del capó, que agrupa el código de su aplicación junto con el binario de Electron. El código empaquetado se genera en una carpeta. Luego usará esta carpeta de aplicaciones empaquetadas para crear un distribuible separado para cada fabricante configurado.Después de que se ejecute el script, debería ver una carpeta de salida que contiene tanto el distribuible como una carpeta que contiene el código de la aplicación empaquetada." }, { "title": "BackEnd con NodeJS - parte 2", "url": "/posts/backend-nodejs-parte-2/", "categories": "nodeJS", "tags": "javascript, backend, nodeJS, express, JWT, programacion", "date": "2022-11-04 23:00:00 -0600", "snippet": "Generación y Autorización de JWT Transferir la generación del token a un archivo diferente utils/tokenManager.js import jwt from \"jsonwebtoken\"export const generateToken = (uid) =&gt; { const ...", "content": "Generación y Autorización de JWT Transferir la generación del token a un archivo diferente utils/tokenManager.js import jwt from \"jsonwebtoken\"export const generateToken = (uid) =&gt; { const expiresIn = 60 * 15 // 15 min try { const token = jwt.sign({uid}, process.env.JWT_SECRET, { expiresIn }) return {token, expiresIn} } catch (error) { console.log(error) }} Modificar auth_controller.js import { User } from \"../models/User.js\"import { generateToken } from \"../utils/tokenManager.js\"export const register = async (req, res) =&gt; { const { email, password } = req.body try { let usuario = new User({ email, password }) await usuario.save() return res.status(201).json({ ok: \"dato almacenado\" }) } catch (error) { console.log(error) return res.status(400).json({ error: error.message }) }}export const login = async (req, res) =&gt; { try { const { email, password } = req.body let usuario = await User.findOne({ email }) if (!usuario) return res.status(403).json({ error: \"No existe este usuario\" }) const respuestaPassword = await usuario.comparePassword(password) if (!respuestaPassword) return res.status(403).json({ error: \"Contraseña incorrecta\" }) // Generacion de JWT const { token, expiresIn } = generateToken(usuario._id) return res.json({ token, expiresIn }) //return res.status(201).json({ ok: \"inicio de sesion exitoso\" }) } catch (error) { console.log(error) return res.status(403).json({ error: error.message }) }} Procedemos a crear un middleware que solicite un token antes de poder mostrar alguna ruta protegida, middlewares/requireToken.jsimport jwt from \"jsonwebtoken\"export const requireToken = (req, res, next) =&gt; { try { let token = req.headers.authorization console.log(token) if (!token) throw new Error(\"No existe el token en el header. Metodo Bearer\") token = token.split(\" \")[1]; const payload = jwt.verify(token, process.env.JWT_SECRET) console.log(payload) next() } catch (error) { console.log(error.message) return res.status(401).json({ error: error.message }) }} Se actualiza auth_controller.js con la información protegidaexport const infoUser = async (req, res) =&gt; { res.json({ info: \"informacion del usuario\"})} Se define una nueva ruta protegida en auth_router.js para probar el JWT import express from \"express\"import { infoUser, login, register } from \"../controllers/auth_controller.js\"import { validatorExpress } from \"../middlewares/validatorExpress.js\"import { body } from \"express-validator\"import { requireToken } from \"../middlewares/requireToken.js\"const router = express.Router()router.post(\"/register\", [ body(\"email\", \"Ingrese un email válido\") .trim() .isEmail() .normalizeEmail(), body(\"password\", \"Contraseña mínimo 6 carácteres\") .trim() .isLength({ min: 6 }) .custom((value, { req }) =&gt; { if (value !== req.body.reEnterPassword) { throw new Error(\"No coinciden las contraseñas\") } return value; }), ], validatorExpress, register)router.post(\"/login\", [ body(\"email\", \"Ingrese un email válido\") .trim() .isEmail() .normalizeEmail(), body(\"password\", \"Contraseña mínimo 6 carácteres\") .trim() .isLength({ min: 6 }), ], validatorExpress, login)router.get(\"/protected\", requireToken, infoUser)export default router Probar con postman configurando el uso de Bearer en la parte de autorización, copiando el jwt generado.PostMan Modificar requireToken.js para extraer el uid del payload y que este este disponible al controladorimport jwt from \"jsonwebtoken\"export const requireToken = (req, res, next) =&gt; { try { let token = req.headers.authorization console.log(token) if (!token) throw new Error(\"No existe el token en el header. Metodo Bearer\") token = token.split(\" \")[1]; const { uid } = jwt.verify(token, process.env.JWT_SECRET) console.log(\"uid: \" + uid) req.uid = uid next() } catch (error) { console.log(error.message) return res.status(401).json({ error: error.message }) }} Se actualiza auth_controller.js para mostrar la información del usuarioexport const infoUser = async (req, res) =&gt; { try { const user = await User.findById(req.uid) //return res.json({ user }) return res.json({ email: user.email, uid: user.id }) } catch (error) { return res.status(500).json({ error: \"error de servidor\" }) }} Crear utilidad para el manejo de errores del JWT utils/errorsToken.js export const errorTokens = (message) =&gt; { switch (message) { case \"jwt malformed\": return \"Formato no válido\"; case \"invalid token\": return \"Token no válido\"; case \"jwt expired\": return \"Token expirado\"; case \"invalid signature\": return \"Firma invalida\"; case \"No Bearer\": return \"Utiliza formato Bearer\" default: return message; }} Modificar requireToken.js para que use la utils de erroresimport jwt from \"jsonwebtoken\"import { errorTokens } from \"../utils/errorsToken.js\"export const requireToken = (req, res, next) =&gt; { try { let token = req.headers.authorization console.log(token) if (!token) throw new Error(\"No existe el token en el header. Metodo Bearer\") token = token.split(\" \")[1]; const { uid } = jwt.verify(token, process.env.JWT_SECRET) console.log(\"uid: \" + uid) req.uid = uid next() } catch (error) { console.log(error.message) return res.status(401).json({ error: errorTokens(error.message) }) }}Persistencia del JWT Modificar index.js para permitir por medio de middleware el acceso al contenido estático en la carpeta publicimport 'dotenv/config'import './database/connect.js'import express from \"express\"import authRoutes from \"./routes/auth_route.js\"const app = express()app.use(express.json())app.use('/api/v1/auth', authRoutes)app.use(express.static(\"public\"))const PORT = process.env.PORT || 3000 app.listen(PORT, () =&gt; console.log(\"🔥🔥🔥 servidor disponible en: http://localhost:\" + PORT)) Crear carpeta public y archivo index.html  Fetch &amp; JSON&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Inicio&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form id=\"formLogin\"&gt; &lt;input type=\"email\" value=\"jrg.correo@correo.com\" id=\"email\" /&gt; &lt;input type=\"password\" value=\"123456\" id=\"password\" /&gt; &lt;button type=\"submit\"&gt;Acceder&lt;/button&gt; &lt;/form&gt; &lt;script&gt; const formLogin = document.querySelector(\"#formLogin\") const email = document.querySelector(\"#email\") const password = document.querySelector(\"#password\") formLogin.addEventListener(\"submit\", async (e) =&gt; { e.preventDefault() try { // console.log(password.value) // console.log(email.value) const res = await fetch(\"/api/v1/auth/login\", { method: \"post\", headers: { \"Content-Type\": \"application/json\", }, body: JSON.stringify({ email: email.value, password: password.value, }), }); // console.log(res) console.log(res.ok, res.status) // const data = await res.json() // console.log(data) const { token } = await res.json() console.log(token) //window.location.href = \"/protected.html\" } catch (error) { console.log(error) } }); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; Crear en public archivo protected.html&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Ruta protegida&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Ruta protegida&lt;/h1&gt; &lt;div id=\"app\"&gt; &lt;h2&gt;Email&lt;/h2&gt; &lt;h3&gt;UID&lt;/h3&gt; &lt;/div&gt; &lt;button id=\"logout\"&gt;Logout&lt;/button&gt; &lt;script&gt; document.addEventListener(\"DOMContentLoaded\", async (e) =&gt; { const app = document.getElementById(\"app\") try { const token = \"???\" const res = await fetch(\"/api/v1/auth/protected\", { method: 'GET', headers: { \"Authorization\": \"Bearer \" + token, \"Content-Type\": \"application/json\", }, }) console.log(res.ok, res.status) const data = await res.json() console.log(data) } catch (error) { console.log(error) } }) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;JWT en Local Storage Modificar index.html &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Inicio&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form id=\"formLogin\"&gt; &lt;input type=\"email\" value=\"jrg.correo@correo.com\" id=\"email\" /&gt; &lt;input type=\"password\" value=\"123456\" id=\"password\" /&gt; &lt;button type=\"submit\"&gt;Acceder&lt;/button&gt; &lt;/form&gt; &lt;script&gt; const formLogin = document.getElementById(\"formLogin\") const email = document.getElementById(\"email\") const password = document.getElementById(\"password\") formLogin.addEventListener(\"submit\", async (e) =&gt; { e.preventDefault() try { // console.log(password.value) // console.log(email.value) const res = await fetch(\"/api/v1/auth/login\", { method: \"post\", headers: { \"Content-Type\": \"application/json\", }, body: JSON.stringify({ email: email.value, password: password.value, }), }); // console.log(res) console.log(res.ok, res.status) // const data = await res.json() // console.log(data) const { token } = await res.json() console.log(token) localStorage.setItem(\"token\", token) window.location.href = \"/protected.html\" } catch (error) { console.log(error) } }); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; Modificar protected.html &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Ruta protegida&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Ruta protegida&lt;/h1&gt; &lt;div id=\"app\"&gt; &lt;h2&gt;Email&lt;/h2&gt; &lt;h3&gt;UID&lt;/h3&gt; &lt;/div&gt; &lt;button id=\"logout\"&gt;Logout&lt;/button&gt; &lt;script&gt; document.addEventListener(\"DOMContentLoaded\", async (e) =&gt; { const app = document.getElementById(\"app\") try { const token = localStorage.getItem('token') const res = await fetch(\"/api/v1/auth/protected\", { method: 'GET', headers: { \"Authorization\": \"Bearer \" + token, \"Content-Type\": \"application/json\", }, }) console.log(res.ok, res.status) const data = await res.json() console.log(data) app.innerHTML = ` &lt;h2&gt;Email: ${data.email}&lt;/h2&gt; &lt;h3&gt;UID: ${data.uid}&lt;/h3&gt; `; } catch (error) { console.log(error) } }) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;JWT en Cookie 🍪 Modificar index.js para el uso de cookieParserimport 'dotenv/config'import './database/connect.js'import express from \"express\"import authRoutes from \"./routes/auth_route.js\"import cookieParser from 'cookie-parser'const app = express()app.use(express.json())app.use('/api/v1/auth', authRoutes)app.use(express.static(\"public\"))app.use(cookieParser())const PORT = process.env.PORT || 3000 app.listen(PORT, () =&gt; console.log(\"🔥🔥🔥 servidor disponible en: http://localhost:\" + PORT)) Modificar auth_controller.js para generar cookie en el login Manejo de cookiesexport const login = async (req, res) =&gt; { try { const { email, password } = req.body let usuario = await User.findOne({ email }) if (!usuario) return res.status(403).json({ error: \"No existe este usuario\" }) const respuestaPassword = await usuario.comparePassword(password) if (!respuestaPassword) return res.status(403).json({ error: \"Contraseña incorrecta\" }) // Generacion de JWT const { token, expiresIn } = generateToken(usuario._id) res.cookie(\"token\", token, { httpOnly: true, //evitar document.cookie en consola secure: !(process.env.MODE === \"dev\"), //https sameSite: true }) return res.json({ token, expiresIn }) //return res.status(201).json({ ok: \"inicio de sesion exitoso\" }) } catch (error) { console.log(error) return res.status(403).json({ error: error.message }) }}" }, { "title": "VUE Router", "url": "/posts/vue-router/", "categories": "vue", "tags": "vue, frontend, programacion", "date": "2022-10-22 00:00:00 -0600", "snippet": "Vite RouterVue Router es el enrutador oficial de Vue.js. Se integra profundamente con el núcleo de Vue.js para facilitar la creación de aplicaciones de una sola página con Vue.js. Las característic...", "content": "Vite RouterVue Router es el enrutador oficial de Vue.js. Se integra profundamente con el núcleo de Vue.js para facilitar la creación de aplicaciones de una sola página con Vue.js. Las características incluyen:   Mapeo de rutas anidadas  Enrutamiento dinámico Configuración de enrutador modular basada en componentes  Parámetros de ruta, consulta, comodines Control de navegación detallado Enlaces con clases CSS activas automáticas  Modo historial HTML5 o modo hash   Comportamiento de desplazamiento personalizable  Codificación adecuada para URL Crear proyectonpm init vue@latest Agregar CDN de BootStrap y de Font Awesome a index.html Font Awesome BootStrap&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;link rel=\"icon\" href=\"/favicon.ico\"&gt; &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css\" integrity=\"sha512-KfkfwYDsLkIlwQp6LFnl8zNdLGxu9YAA1QvwINks4PhcElQSvqcyVLLD9aMhXd13uQjoXtEKNosOWaZqXgel0g==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" /&gt; &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor\" crossorigin=\"anonymous\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Vite App&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"app\"&gt;&lt;/div&gt; &lt;script type=\"module\" src=\"/src/main.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; Limpiar App.vue⁠&lt;script setup&gt;&lt;/script&gt;&lt;template&gt;&lt;/template&gt; Borrar contenido de la carpeta ⁠components⁠  Borrar contenido de la carpeta views Borrar contenido de archivo /src/router/index.js  Editar archivo /src/main.jsimport { createApp } from 'vue'import { createPinia } from 'pinia'import App from './App.vue'import router from './router'//import './assets/main.css'const app = createApp(App)app.use(createPinia())app.use(router)app.mount('#app')crear archivo en src/data.json[ { \"id\": 1, \"marca\": \"Ford\", \"estilo\": \"coupe\", \"precio\": 45323, \"anio\": 2020 }, { \"id\": 3, \"marca\": \"Porsche\", \"estilo\": \"SUV\", \"precio\": 77693, \"anio\": 2018 }, { \"id\": 5, \"marca\": \"Audi\", \"estilo\": \"SUV\", \"precio\": 12242, \"anio\": 2011 }, { \"id\": 6, \"marca\": \"Ford\", \"estilo\": \"coupe\", \"precio\": 145323, \"anio\": 2023 }, { \"id\": 7, \"marca\": \"Ford\", \"estilo\": \"SUV\", \"precio\": 434, \"anio\": 2003 }, { \"id\": 8, \"marca\": \"Porsche\", \"estilo\": \"Coupe\", \"precio\": 277693, \"anio\": 2023 }, { \"id\": 9, \"marca\": \"Audi\", \"estilo\": \"sedan\", \"precio\": 82242, \"anio\": 2019 }, { \"id\": 10, \"marca\": \"Ford\", \"estilo\": \"coupe\", \"precio\": 45323, \"anio\": 2020 }] modificar App.vue&lt;script setup&gt;import { ref } from \"vue\";import vehiculosData from \"./data.json\"const vehiculos = ref(vehiculosData)&lt;/script&gt;&lt;template&gt; &lt;main class=\"container\"&gt; &lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"&gt; &lt;ul class=\"navbar-nav mr-auto\"&gt; &lt;li class=\"nav-item active\"&gt; &lt;a class=\"nav-link\" href=\"/\"&gt;Inicio&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link\" href=\"/acerca\"&gt;Quienes somos?&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;h1&gt;Nuestros Vehiculos&lt;/h1&gt; &lt;div class=\"row text-center\"&gt; &lt;div v-for=\"vehiculo in vehiculos\" :key=\"vehiculo.id\" class=\"card\"&gt; &lt;div class=\"card-body\"&gt; &lt;h3 class=\"card-title\"&gt;{ { vehiculo.marca } }&lt;/h3&gt; &lt;p class=\"lead\"&gt;${ { vehiculo.precio } }&lt;/p&gt; &lt;button class=\"btn btn-primary\"&gt;Detalles&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/main&gt;&lt;/template&gt;&lt;style scoped&gt;.card { box-shadow: 1px 1px 10px rgba(0, 0, 0, 0.207); padding: 15px; width: 200px; margin-right: 15px; margin-bottom: 20px;}.links { padding: 20px}.links a { margin: 0 5px}&lt;/style&gt;Vue Routerhttps://router.vuejs.org/⁠npm install vue-router Pasos para configurar rutas: Definir las reglas de las rutas Decirle a Vue sobre las reglas Definir donde renderizar los componentes  Crear router/index.js en nuestra aplicaciónimport {createRouter, createWebHistory} from \"vue-router\"import InicioView from \"../views/InicioView.vue\"import AcercaView from \"../views/AcercaView.vue\"const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes: [ { path: \"/\", name: \"inicio\", component: () =&gt; InicioView }, { path: \"/acerca\", name: \"acerca\", component: () =&gt; AcercaView } ] })export default router Crear views/InicioView.vue Copiar contenido de App.vue a InicioView.vue &lt;script setup&gt;import { ref } from \"vue\";import vehiculosData from \"../data.json\"const vehiculos = ref(vehiculosData)&lt;/script&gt;&lt;template&gt; &lt;main class=\"container\"&gt; &lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"&gt; &lt;ul class=\"navbar-nav mr-auto\"&gt; &lt;li class=\"nav-item active\"&gt; &lt;a class=\"nav-link\" href=\"/\"&gt;Inicio&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link\" href=\"/acerca\"&gt;Quienes somos?&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;h1&gt;Nuestros Vehiculos&lt;/h1&gt; &lt;div class=\"row text-center\"&gt; &lt;div v-for=\"vehiculo in vehiculos\" :key=\"vehiculo.id\" class=\"card\"&gt; &lt;div class=\"card-body\"&gt; &lt;h3 class=\"card-title\"&gt;{ { vehiculo.marca } }&lt;/h3&gt; &lt;p class=\"lead\"&gt;${ { vehiculo.precio } }&lt;/p&gt; &lt;button class=\"btn btn-primary\"&gt;Detalles&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/main&gt;&lt;/template&gt;&lt;style scoped&gt;.card { box-shadow: 1px 1px 10px rgba(0, 0, 0, 0.207); padding: 15px; width: 200px; margin-right: 15px; margin-bottom: 20px;}.links { padding: 20px}.links a { margin: 0 5px}&lt;/style&gt; AcercaView.vue&lt;template&gt; &lt;main class=\"container\"&gt; &lt;h1&gt;Quienes somos?&lt;/h1&gt; &lt;p&gt;\"Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit...\"&lt;/p&gt; &lt;/main&gt;&lt;/template&gt; Modificar  src/main.js import { createApp } from 'vue'import App from './App.vue'import router from './router'//import './assets/main.css'//createApp(App).mount('#app')const app = createApp(App)app.use(router)app.mount('#app') ⁠Modificar App.vue&lt;script setup&gt;import { RouterView } from \"vue-router\"&lt;/script&gt;&lt;template&gt;&lt;main&gt; &lt;RouterView /&gt;&lt;/main&gt;&lt;/template&gt; Remover nav de InicioView.vue y colocarlo en App.vue&lt;script setup&gt;import { RouterView } from \"vue-router\"&lt;/script&gt;&lt;template&gt;&lt;main&gt; &lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"&gt; &lt;ul class=\"navbar-nav mr-auto\"&gt; &lt;li class=\"nav-item active\"&gt; &lt;a class=\"nav-link\" href=\"/\"&gt;Inicio&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link\" href=\"/acerca\"&gt;Quienes somos?&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;RouterView /&gt;&lt;/main&gt;&lt;/template&gt; Añadir counter a App.vue&lt;script setup&gt;import { RouterView } from \"vue-router\"import { ref } from \"vue\"const counter = ref(0)&lt;/script&gt;&lt;template&gt;&lt;main&gt; &lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"&gt; &lt;ul class=\"navbar-nav mr-auto\"&gt; &lt;li class=\"nav-item active\"&gt; &lt;a class=\"nav-link\" href=\"/\"&gt;Inicio&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link\" href=\"/acerca\"&gt;Quienes somos?&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;h1&gt;{ { counter } }&lt;/h1&gt; &lt;button class=\"btn btn-warning\" @click=\"counter++\"&gt;Click&lt;/button&gt; &lt;RouterView /&gt;&lt;/main&gt;&lt;/template&gt;- Añadir routerLink a `App.vue`  &lt;script setup&gt;import { RouterView, RouterLink } from \"vue-router\"import { ref } from \"vue\"const counter = ref(0)&lt;/script&gt;&lt;template&gt;&lt;main&gt; &lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"&gt; &lt;ul class=\"navbar-nav mr-auto\"&gt; &lt;li class=\"nav-item active\"&gt; &lt;RouterLink class=\"nav-link\" to=\"/\"&gt;Inicio&lt;/RouterLink&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;RouterLink class=\"nav-link\" to=\"/acerca\"&gt;Quienes somos?&lt;/RouterLink&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;h1&gt;{ { counter } }&lt;/h1&gt; &lt;button class=\"btn btn-warning\" @click=\"counter++\"&gt;Click&lt;/button&gt; &lt;RouterView /&gt;&lt;/main&gt;&lt;/template&gt; Remover counter ksaLinks Dinamicos Editar src/router/index.js  import {createRouter, createWebHistory} from \"vue-router\"import InicioView from \"../views/InicioView.vue\"import AcercaView from \"../views/AcercaView.vue\"import DetallesVehiculoView from \"../views/DetallesVehiculoView.vue\"const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes: [ { path: \"/\", name: \"inicio\", component: () =&gt; InicioView }, { path: \"/acerca\", name: \"acerca\", component: () =&gt; AcercaView }, { path: \"/detalle/:id\", name: \"detalle\", component: () =&gt; DetallesVehiculoView } ] })export default router Crear DetallesVehiculoView.vue&lt;script setup&gt;import { useRoute } from 'vue-router' //permite extraer informacionimport { ref, onBeforeMount} from 'vue';import vehiculos from '../data.json'const vehiculo = ref(null)const route = useRoute()//console.log(route.params)onBeforeMount(() =&gt; { vehiculo.value = vehiculos.find(v =&gt; v.id === parseInt(id))})const { id } = route.params&lt;/script&gt;&lt;template&gt; &lt;div class=\"container\"&gt; &lt;h1&gt;Detalles de vehiculo&lt;/h1&gt; &lt;p&gt;Marca: { { vehiculo.marca } }&lt;/p&gt; &lt;p&gt;Precio: { { vehiculo.precio } }&lt;/p&gt; &lt;p&gt;Estilo: { { vehiculo.estilo } }&lt;/p&gt; &lt;p&gt;Año: { { vehiculo.anio } }&lt;/p&gt; &lt;/div&gt;&lt;/template&gt; Agregar link dinámicos a InicioView.vue&lt;script setup&gt;import { ref } from \"vue\";import vehiculosData from \"../data.json\"import { useRouter } from \"vue-router\"const router = useRouter()const vehiculos = ref(vehiculosData)&lt;/script&gt;&lt;template&gt; &lt;main class=\"container\"&gt; &lt;h1&gt;Nuestros Vehiculos&lt;/h1&gt; &lt;div class=\"row text-center\"&gt; &lt;div v-for=\"vehiculo in vehiculos\" :key=\"vehiculo.id\" class=\"card\"&gt; &lt;div class=\"card-body\"&gt; &lt;h3 class=\"card-title\"&gt;{ { vehiculo.marca } }&lt;/h3&gt; &lt;p class=\"lead\"&gt;${ { vehiculo.precio } }&lt;/p&gt; &lt;button @click=\"router.push(`/detalle/${vehiculo.id}`)\" class=\"btn btn-primary\"&gt;Detalles&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/main&gt;&lt;/template&gt;&lt;style scoped&gt;.card { box-shadow: 1px 1px 10px rgba(0, 0, 0, 0.207); padding: 15px; width: 200px; margin-right: 15px; margin-bottom: 20px;}&lt;/style&gt; id inexistente en DetallesVehiculoView.vue&lt;script setup&gt;import { useRoute } from 'vue-router' //permite extraer informacion de la rutaimport { ref, onBeforeMount } from 'vue';import vehiculos from '../data.json'const vehiculo = ref(null)const route = useRoute()//console.log(route.params)onBeforeMount(() =&gt; { vehiculo.value = vehiculos.find(v =&gt; v.id === parseInt(id))})const { id } = route.params&lt;/script&gt;&lt;template&gt; &lt;div class=\"container\"&gt; &lt;div v-if=\"vehiculo\"&gt; &lt;h1&gt;Detalles de vehiculo&lt;/h1&gt; &lt;p&gt;Marca: { { vehiculo.marca } }&lt;/p&gt; &lt;p&gt;Precio: { { vehiculo.precio } }&lt;/p&gt; &lt;p&gt;Estilo: { { vehiculo.estilo } }&lt;/p&gt; &lt;p&gt;Año: { { vehiculo.anio } }&lt;/p&gt; &lt;/div&gt; &lt;div v-else&gt; &lt;h1&gt;Vehiculo no encontrado&lt;/h1&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;Not Found (Atrapar todas las peticiones) Agregar expresión regular a  src/router/index.jsimport {createRouter, createWebHistory} from \"vue-router\"import InicioView from \"../views/InicioView.vue\"import AcercaView from \"../views/AcercaView.vue\"import DetallesVehiculoView from \"../views/DetallesVehiculoView.vue\"import notFoundView from \"../views/notFoundView.vue\"const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes: [ { path: \"/\", name: \"inicio\", component: () =&gt; InicioView }, { path: \"/acerca\", name: \"acerca\", component: () =&gt; AcercaView }, { path: \"/detalle/:id\", name: \"detalle\", component: () =&gt; DetallesVehiculoView }, { path: \"/:pathMach(.*)*\", //expresion regular name: \"notFound\", component: () =&gt; notFoundView } ] })export default router Crear NotFoundView.vue&lt;template&gt; &lt;div class=\"container\"&gt; &lt;h1&gt;404. Not Found&lt;/h1&gt; &lt;/div&gt;&lt;/template&gt;Filtros Agregar filtros de marca a InicioView.vue&lt;script setup&gt;import { ref, watch } from \"vue\";import vehiculosData from \"../data.json\"import { useRouter } from \"vue-router\"const router = useRouter()const vehiculos = ref(vehiculosData)const marca = ref(\"\")watch(marca, () =&gt; { if(marca.value){ if(marca.value == \"Todos\") vehiculos.value = vehiculosData else { vehiculos.value = vehiculosData.filter(c =&gt; c.marca === marca.value) } }})&lt;/script&gt;&lt;template&gt; &lt;main class=\"container\"&gt; &lt;h1&gt;Nuestros Vehiculos&lt;/h1&gt; &lt;select v-model=\"marca\"&gt; &lt;option value=\"Todos\"&gt;Todos&lt;/option&gt; &lt;option value=\"Ford\"&gt;Ford&lt;/option&gt; &lt;option value=\"Porsche\"&gt;Porsche&lt;/option&gt; &lt;option value=\"Audi\"&gt;Audi&lt;/option&gt; &lt;/select&gt; &lt;div class=\"row text-center\"&gt; &lt;div v-for=\"vehiculo in vehiculos\" :key=\"vehiculo.id\" class=\"card\"&gt; &lt;div class=\"card-body\"&gt; &lt;h3 class=\"card-title\"&gt;{ { vehiculo.marca } }&lt;/h3&gt; &lt;p class=\"lead\"&gt;${ { vehiculo.precio } }&lt;/p&gt; &lt;button @click=\"router.push(`/detalle/${vehiculo.id}`)\" class=\"btn btn-primary\"&gt;Detalles&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/main&gt;&lt;/template&gt;&lt;style scoped&gt;.card { box-shadow: 1px 1px 10px rgba(0, 0, 0, 0.207); padding: 15px; width: 200px; margin-right: 15px; margin-bottom: 20px;}&lt;/style&gt;Parámetros de consulta Modificar  InicioView.vue&lt;script setup&gt;import { ref, watch, onMounted } from \"vue\";import vehiculosData from \"../data.json\"import { useRouter, useRoute } from \"vue-router\"const router = useRouter()const route = useRoute()const vehiculos = ref(vehiculosData)const marca = ref(\"\")onMounted(() =&gt; { marca.value = route.query.marca || \"\"})watch(marca, () =&gt; { if(marca.value){ if(marca.value == \"Todos\") vehiculos.value = vehiculosData else { vehiculos.value = vehiculosData.filter(c =&gt; c.marca === marca.value) } }})const handleFiltro = () =&gt; { router.push({query: {marca: marca.value} })}&lt;/script&gt;&lt;template&gt; &lt;main class=\"container\"&gt; &lt;h1&gt;Nuestros Vehiculos&lt;/h1&gt; &lt;select @change=\"handleFiltro\" v-model=\"marca\"&gt; &lt;option value=\"Todos\"&gt;Todos&lt;/option&gt; &lt;option value=\"Ford\"&gt;Ford&lt;/option&gt; &lt;option value=\"Porsche\"&gt;Porsche&lt;/option&gt; &lt;option value=\"Audi\"&gt;Audi&lt;/option&gt; &lt;/select&gt; &lt;div class=\"row text-center\"&gt; &lt;div v-for=\"vehiculo in vehiculos\" :key=\"vehiculo.id\" class=\"card\"&gt; &lt;div class=\"card-body\"&gt; &lt;h3 class=\"card-title\"&gt;{ { vehiculo.marca } }&lt;/h3&gt; &lt;p class=\"lead\"&gt;${ { vehiculo.precio } }&lt;/p&gt; &lt;button @click=\"router.push(`/detalle/${vehiculo.id}`)\" class=\"btn btn-primary\"&gt;Detalles&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/main&gt;&lt;/template&gt;&lt;style scoped&gt;.card { box-shadow: 1px 1px 10px rgba(0, 0, 0, 0.207); padding: 15px; width: 200px; margin-right: 15px; margin-bottom: 20px;}&lt;/style&gt;" }, { "title": "LEMP Stack en EC2 Amazon Linux 2", "url": "/posts/LEMP-ec2-mazon-linux-2/", "categories": "aws", "tags": "LEMP, nube, aws", "date": "2022-10-06 23:00:00 -0600", "snippet": "¿Qué es LEMP?LEMP es una variación de la omnipresente pila LAMP utilizada para desarrollar e implementar aplicaciones web. Tradicionalmente, LAMP consta de Linux, Apache, MySQL y PHP. Debido a su...", "content": "¿Qué es LEMP?LEMP es una variación de la omnipresente pila LAMP utilizada para desarrollar e implementar aplicaciones web. Tradicionalmente, LAMP consta de Linux, Apache, MySQL y PHP. Debido a su naturaleza modular, los componentes se pueden intercambiar fácilmente. Con LEMP, Apache se reemplaza con el Nginx ligero pero potente.¿Por qué LEMP en lugar de LNMP?Elegimos LEMP debido a la pronunciación de Nginx: Engine-X (en-juhn-ecks). Piense en cómo en inglés, el artículo an se usa en lugar de a por hora a pesar de que comienza con una consonante. La importancia es el sonido de la primera letra más que su representación escrita. Además, LEMP es en realidad pronunciable y no suena como recitar el alfabeto.LINUXUn sistema operativo similar a Unix de código abierto proporciona la base para los componentes de la pila. Muchas distribuciones incluyen sistemas de gestión de paquetes que facilitan la instalación de las aplicaciones deseadas. Sin embargo, estas versiones del repositorio generalmente no serán las más actuales. Dos de las distribuciones de Linux más utilizadas en pilas LEMP son Debian y Ubuntu.NginxNginx es un servidor proxy inverso de código abierto para los protocolos HTTP, HTTPS, SMTP, POP3 e IMAP. También funciona como equilibrador de carga, caché HTTP y servidor web (servidor de origen). Tiene un fuerte enfoque en alta concurrencia, alto rendimiento y bajo uso de memoria. El proyecto HTML5 Boilerplate tiene archivos de configuración de servidor de muestra para mejorar el rendimiento y la seguridad.MYSQLMySQL es el segundo sistema de gestión de bases de datos relacionales de código abierto más utilizado. Una bifurcación desarrollada por la comunidad, MariaDB, está dirigida por los desarrolladores originales. Su objetivo es ser un reemplazo directo.PHPPHP es un lenguaje de secuencias de comandos del lado del servidor diseñado para el desarrollo web. La función de secuencias de comandos también se puede cumplir con Python o Perl. Los servidores como Gunicorn o uWSGI se pueden usar junto con Nginx para servir estas aplicaciones.Actualizar el servidor Amazon Linux AMI 2 Verificar actualizacionessudo suyum check-updatesudo yum update -y Verificar paquetes instaladosyum list installedyum repolist allsudo amazon-linux-extras list | grep epelsudo amazon-linux-extras enable epelsudo yum install epel-release De existir una actualización de kernel reiniciar el servidorsudo rebootInstalar Nginx web server Buscar paquete de instalaciónsudo yum list nginx*sudo yum info nginxsudo yum install nginxsudo amazon-linux-extras install nginx1 Verificar status del serviciosudo service nginx statussudo service nginx startsudo chkconfig nginx on Comandos básicossudo systemctl stop nginxsudo systemctl start nginxsudo systemctl reload nginxsudo systemctl restart nginxsudo systemctl enable nginxsudo systemctl disable nginxInstalar PHPsudo amazon-linux-extras install php8.0sudo service php-fpm startsudo chkconfig php-fpm on Añadir ec2-user al grupo nginxsudo usermod -a -G nginx ec2-userexitgroups Cambie la propiedad de grupo de /usr/share/nginx y su contenido al grupo nginxsudo chown -R ec2-user:nginx /usr/share/nginx Para agregar permisos de escritura de grupo y establecer el ID de grupo en futuros subdirectorios, cambie los permisos del directorio /usr/share/nginx y sus subdirectorios.sudo chmod 2775 /usr/share/nginxfind /usr/share/nginx -type d -exec sudo chmod 2775 {} \\; Para agregar permisos de escritura de grupo, cambie recursivamente los permisos de archivo de /usr/share/nginx y sus subdirectoriosfind /usr/share/nginx -type f -exec sudo chmod 0664 {} \\; Crear archivo phpinfo.php en la carpeta inicial de nginxecho \"&lt;?php phpinfo(); ?&gt;\" &gt; /usr/share/nginx/html/phpinfo.php Remover archivo phpinfo.phprm /usr/share/nginx/html/phpinfo.phpInstalar MariaDBsudo amazon-linux-extras install mariadb10.5sudo systemctl start mariadbsudo systemctl enable mariadbsudo mysql_secure_installationsudo systemctl stop mariadbsudo yum makecachesudo mysql_upgrademysql -u root -pInstalar phpMyAdmin Instalar dependenciassudo yum install php-mbstring php-xmlsudo service nginx restartsudo service php-fpm restart Navegar a folder cd /usr/share/nginx/html Descargar una version de phpMyAdminwget https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.tar.gz Crear folder phpMyAdmin y extraer contenido del archivo que se descargomkdir phpMyAdmin &amp;&amp; tar -xvzf phpMyAdmin-latest-all-languages.tar.gz -C phpMyAdmin --strip-components 1 Borrar archivorm phpMyAdmin-latest-all-languages.tar.gz Iniciar servicio de MariaDBsudo systemctl start mariadb Crear configuración para phpMyAdmin cp -a config.sample.inc.php config.inc.phpnano config.inc.phpmkdir tmpchmod 777 tmp Configuración de PHP-FPMsudo nano /etc/php-fpm.d/www.confuser = nginxgroup = nginxlisten = /var/run/php-fpm/www.socklisten.owner = nginxlisten.group = nginxlisten.mode = 0660;listen.acl_users = apache,nginx sudo nano /etc/nginx/nginx.confserver { listen 80; listen [::]:80; server_name localhost; root /usr/share/nginx/html;\t index\tindex.html index.htm index.php; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; error_page 404 /404.html; location = /404.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { }\tlocation ~ \\.php$ {\t\ttry_files $uri =404;\t\tinclude fastcgi_params;\t\tfastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\t\tfastcgi_split_path_info ^(.+\\.php)(/.+)$;\t\tfastcgi_index index.php;\t\t# fastcgi_intercept_errors on;\t\t# fastcgi_keep_conn on;\t\t# fastcgi_read_timeout 300;\t\t # fastcgi_pass 127.0.0.1:9000;\t\tfastcgi_pass unix:/var/run/php-fpm/www.sock;\t\t#for ubuntu unix:/var/run/php/php8.0-fpm.sock; # FastCGI cache config\t # fastcgi_cache_path /var/cache/nginx levels=1:2 keys_zone=WORDPRESS:10m max_size=1000m inactive=60m;\t\t# fastcgi_cache_key $scheme$host$request_uri$request_method;\t\t# fastcgi_cache_use_stale updating error timeout invalid_header http_500; fastcgi_cache_valid any 30m;\t}}sudo service nginx restartsudo service php-fpm restartsudo service nginx restartsudo service php-fpm statusls -al /var/run/php-fpm/www.socknetstat -al --protocol=unix |egrep \"Proto|fpm\"chmod -R 777 /var/lib/php/session" }, { "title": "Fundamentos JavaScript - parte 6", "url": "/posts/fundamentos-js-parte-6/", "categories": "javascript", "tags": "javascript, fundamentos, programacion", "date": "2022-09-16 23:00:00 -0600", "snippet": "Callbacks Callback: Una función de callback es una función que se pasa a otra función como un argumento, que luego se invoca dentro de la función externa para completar algún tipo de rutina o ...", "content": "Callbacks Callback: Una función de callback es una función que se pasa a otra función como un argumento, que luego se invoca dentro de la función externa para completar algún tipo de rutina o acción. Cada vez se ocupan menos. Pasar una función como argumento.¿Por qué necesitamos funciones de devolución de llamada? JavaScript ejecuta código secuencialmente en orden de arriba hacia abajo. Sin embargo, hay algunos casos en los que el código se ejecuta (o debe ejecutarse) después de que suceda algo más y tampoco de manera secuencial. Esto se llama programación asíncrona. Las devoluciones de llamada aseguran que una función no se ejecutará antes de que se complete una tarea, sino que se ejecutará justo después de que se complete la tarea. Nos ayuda a desarrollar código JavaScript asíncrono y nos mantiene a salvo de problemas y errores. En JavaScript, la forma de crear una función de devolución de llamada es pasarla como un parámetro a otra función y luego devolverla justo después de que algo haya sucedido o se haya completado alguna tarea.setTimeout(myFunction, 3000);function myFunction() { console.log(\"Hola mundo!\")}//myFunction se pasa como argumento a setTimeoutconst calculo = (numero1, numero2, op) =&gt; { return op(numero1, numero2)}calculo(2, 4, (a, b) =&gt; { console.log(a + b) })calculo(2, 4, (a, b) =&gt; { console.log(a - b) })calculo(2, 4, (a, b) =&gt; { console.log(a * b) })const posts = [ { userId: 1, id: 1, title: \"titulo #1\", }, { userId: 1, id: 2, title: \"titulo #2\", }, { userId: 1, id: 3, title: \"titulo #3\", },]const findPostById = (id, callback) =&gt; { const post = posts.find((item) =&gt; item.id === id) callback(post)}const printPost = (post) =&gt; { console.log(post)}findPostById(2, printPost)const findPostById = (id, callback) =&gt; { const post = posts.find((item) =&gt; item.id === id) callback(post)}//De forma anonimafindPostById(1, (post) =&gt; { console.log(post)})Manejo de Erroresconst findPostById = (id, callback) =&gt; { const post = posts.find((item) =&gt; item.id === id) if (post) { // mandamos el null ya que no existen errores callback(null, post) } else { // en caso de que no exista el post (error) callback(\"No encontrado por id: \" + id) }}// ser recibe el err como primer argumentofindPostById(4, (err, post) =&gt; { if (err) { return console.log(err) } console.log(post)})Pues hasta ahí los callbacks parecen cool e inofensivos pero cuando abusamos de ellos se genera algo llamado el Callback hellCallback HellUsar correctamente los callbacks a veces puede ser poco intuitivo y puede derivar en situaciones como las siguientes:findPostById(1, (err, post) =&gt; { if (err) { return console.log(err) } console.log(post.id) findPostById(2, (err, post2) =&gt; { if (err) { return console.log(err) } console.log(post.id, post2.id) findPostById(3, (err, post3) =&gt; { if (err) { return console.log(err) } console.log(post.id, post2.id, post3.id) findPostById(4, (err, post4) =&gt; { if (err) { return console.log(err) } console.log(post.id, post2.id, post3.id, post4.id) }) }) })})Esto pasa cuando no se tiene buenas prácticas, pero ejemplos como estos se pueden mejorar rápidamente usando técnicas de modularización y manejo de errores. Pueden ver más sobre esto en callbackhell.comPromesas promise: Una Promisa es un objeto que representa la terminación o el fracaso de una operación asíncrona.Una promesa en JavaScript es similar a una promesa en la vida real. Cuando hacemos una promesa en la vida real, es una garantía de que vamos a hacer algo en el futuro. Porque las promesas solo se pueden hacer para el futuro. Una promesa tiene 2 posibles resultados: o se cumplirá cuando llegue el momento, o no se cumplirá. Esto también es lo mismo para las promesas en JavaScript. Cuando definimos una promesa en JavaScript, se resolverá cuando llegue el momento, o se rechazará.Las promesas pueden tener 3 estados definidos: pendiente (pending): estado inicial, no cumplida o rechazada. cumplida (fulfilled): significa que la operación se completó satisfactoriamente. rechazada (rejected): significa que la operación falló.Por ejemplo, cuando solicitamos datos del servidor mediante una Promesa, estará en modo pendiente hasta que recibamos nuestros datos. Si conseguimos obtener la información del servidor, la Promesa se resolverá con éxito. Pero si no obtenemos la información, entonces la Promesa estará en estado rechazado.¿Cuál es la diferencia entre Callbacks y Promises?La principal diferencia entre las funciones de devolución de llamada y las promesas es que adjuntamos una devolución de llamada a una promesa en lugar de pasarla. Así que todavía usamos funciones de devolución de llamada con Promesas, pero de una manera diferente.const findPostById = (id) =&gt; { const post = posts.find((item) =&gt; item.id === id) // devolver la promesa return new Promise((resolve, reject) =&gt; { //resolve if (post) { resolve(post) } else { reject(\"No encontrado por id: \" + id) } })}findPostById(1) .then((post) =&gt; console.log(post)) .catch((err) =&gt; console.log(err)) .finally(() =&gt; console.log(\"fin de la promesa\"))Ahorrando codigo:const findPostById = (id) =&gt; new Promise((resolve, reject) =&gt; { const post = posts.find((item) =&gt; item.id === id) post ? resolve(post) : reject(\"No encontrado por id: \" + id) })findPostById(4) .then((post) =&gt; console.log(post)) .catch((e) =&gt; console.log(e))Promises hellfindPostById(1) .then((post) =&gt; { console.log(post.title) return findPostById(2) }) .then((post) =&gt; { console.log(post.title) return findPostById(3) }) .then((post) =&gt; { console.log(post.title) return findPostById(4) }) .then((post) =&gt; console.log(post.title)) .catch((e) =&gt; console.log(e))async await async: La declaración de función async define una función asíncrona, la cual devuelve una AsyncFunction. await: El operador await es usado para esperar a una Promise. Sólo puede ser usado dentro de una función async function. const findPostById = (id) =&gt; new Promise((resolve, reject) =&gt; { setTimeout(() =&gt; { const post = posts.find((item) =&gt; item.id === id) post ? resolve(post) : reject(\"No encontrado por id: \" + id) }, 2000); })findPostById(1) .then((post) =&gt; console.log(post)) .catch((e) =&gt; console.log(e))console.log(\"Fin del programa\")const findPostById = (id) =&gt; new Promise((resolve, reject) =&gt; { setTimeout(() =&gt; { const post = posts.find((item) =&gt; item.id === id) post ? resolve(post) : reject(\"No encontrado por id: \" + id) }, 2000) })const buscar = async (id) =&gt; { const post = await findPostById(id) console.log(post)}buscar(3)console.log(\"Fin del programa\")Con Try y Catch para que funcione el reject de la promesaconst findPostById = (id) =&gt; new Promise((resolve, reject) =&gt; { setTimeout(() =&gt; { const post = posts.find((item) =&gt; item.id === id) post ? resolve(post) : reject(\"No encontrado por id: \" + id) }, 2000) })const buscar = async (id) =&gt; {// let loading = true try { const post = await findPostById(id) console.log(post) } catch (error) { console.log(error) } finally { console.log(\"se ejecuta siempre\") // let loading = false }}buscar(4)console.log(\"Fin del programa\")Multiple llamadasconst buscar = async () =&gt; { try { const postUno = await findPostById(1) const postDos = await findPostById(2) console.log(postUno.title, postDos.title) } catch (error) { console.log(error) } finally { console.log(\"se ejecuta siempre\") }}buscar()console.log(\"Fin del programa\")Promise allconst buscar = async () =&gt; { try { // solo en el caso que no dependan una de la otra const respuestaPosts = await Promise.all([findPostById(1), findPostById(2)]) // console.log(rePosts); console.log(respuestaPosts[0].title, respuestaPosts[1].title) } catch (error) { console.log(error) }}buscar()console.log(\"Fin del programa\")Fetch Fetch es una interfaz para hacer solicitudes AJAX en JavaScript. Es usado generalmente para hacer una solicitud a un API. El método fetch() toma un argumento obligatorio, la ruta de acceso al recurso que desea recuperar.Ajax ajax JavaScript Asíncrono + XML (ahora se utiliza JSON) AJAX no es una tecnología por sí misma, es un término que describe un nuevo modo de utilizar conjuntamente varias tecnologías existentes. Esto incluye: HTML, CSS, JavaScript, DOM, JSON y lo más importante, el objeto XMLHttpRequest (XMLHttpRequest viejito ahora Fetch) Cuando estas tecnologías se combinan en un modelo AJAX, es posible lograr aplicaciones web capaces de actualizarse continuamente sin tener que volver a cargar la página completa. Esto crea aplicaciones más rápidas y con mejor respuesta a las acciones del usuario.Métodos nativos para AJAX XMLHttpRequest fetch APIFetch API Fetch api: Proporciona una interfaz JavaScript para hacer peticiones HTTP así como sus respuestas. También provee un método para obtener recursos de forma asíncrona por la red. fetch parámetros inicia el proceso de obtener un recurso de la red, devolviendo una promesa que se cumple una vez que la respuesta está disponible. Este tipo de funcionalidad se conseguía previamente haciendo uso de XMLHttpRequest.Conceptos Claves al momento de hacer una petición HTTP: HTTP: Hypertext Transfer Protocol (HTTP) (o Protocolo de Transferencia de Hipertexto en español) es el nombre de un protocolo el cual nos permite realizar una petición de datos y recurso. Ruta (PATH): Es la dirección de donde queremos obtener los recursos. Métodos Http: HTTP define un conjunto de métodos de petición para indicar la acción que se desea realizar para un recurso determinado. (GET, POST, PUT, PATCH, DELETE) Cabeceras (headers): Cabeceras HTTP opcionales, que pueden aportar información adicional a los servidores. Códigos de respuestas (Response Codes): Un código de estado, indicando si la petición ha sido exitosa, o no, y debido a que. más info cat http JSON: JavaScript Object Notation, es un formato basado en texto estándar para representar datos estructurados en la sintaxis de objetos de JavaScript. Es comúnmente utilizado para transmitir datos en aplicaciones web.const url = \"https://pokeapi.co/api/v2/pokemon/\";fetch(url) .then((res) =&gt; res.json()) .then((data) =&gt; console.log(data)); Aquí estamos recuperando un archivo JSON a través de red e imprimiendo en la consola. El uso de fetch() más simple toma un argumento (la ruta del recurso que quieres obtener) y devuelve un objeto Promise conteniendo la respuesta, un objeto Response. Esto es, por supuesto, una respuesta HTTP sin el archivo JSON. Para extraer el contenido en el cuerpo del JSON desde la respuesta, usamos el método json(), el cual está implementado por los objetos Request y ResponseRick &amp; Morty API&lt;!DOCTYPE html&gt;&lt;html lang=\"es\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Rick and Morty&lt;/title&gt; &lt;link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"assets/img/favicon-32x32.png\"&gt; &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\"&gt;&lt;/head&gt;&lt;body class=\"bg-secondary\"&gt; &lt;div class=\"container my-5\"&gt; &lt;section class=\"d-flex align-items-center text-white\" id=\"loading\"&gt; &lt;strong&gt;Cargando...&lt;/strong&gt; &lt;div class=\"spinner-border ms-auto\" role=\"status\" aria-hidden=\"true\"&gt;&lt;/div&gt; &lt;/section&gt; &lt;div class=\"row\" id=\"card-dinamica\"&gt; &lt;template id=\"template-card\"&gt; &lt;article class=\"col-md-6 col-lg-3 mb-3\"&gt; &lt;div class=\"card text-center bg-dark shadow\"&gt; &lt;img src=\"https://rickandmortyapi.com/api/character/avatar/3.jpeg\" class=\"card-img-top\" /&gt; &lt;div class=\"card-body\"&gt; &lt;h5 class=\"card-title text-white lead\"&gt; SumSum &lt;/h5&gt; &lt;p class=\"lead text-secondary\"&gt;Human&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/article&gt; &lt;/template&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=\"src/script.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;document.addEventListener(\"DOMContentLoaded\", () =&gt; { fetchData()});const cards = document.querySelector(\"#card-dinamica\")const templateCard = document.querySelector(\"#template-card\").contentconst fetchData = async () =&gt; { try { loadingData(true) const res = await fetch(\"https://rickandmortyapi.com/api/character\") const data = await res.json() showData(data) } catch (error) { console.log(error) } finally { loadingData(false) }}const loadingData = (estado) =&gt; { const loading = document.querySelector(\"#loading\") if (estado) { loading.classList.remove(\"d-none\") } else { loading.classList.add(\"d-none\") }}const showData = (data) =&gt; { const fragment = document.createDocumentFragment() cards.textContent = \"\" data.results.forEach((item) =&gt; { const clone = templateCard.cloneNode(true) clone.querySelector(\"h5\").textContent = item.name clone.querySelector(\"p\").textContent = item.species clone.querySelector(\"img\").setAttribute(\"src\", item.image) fragment.appendChild(clone) }) cards.appendChild(fragment)}" }, { "title": "Fundamentos JavaScript - parte 5", "url": "/posts/fundamentos-js-parte-5/", "categories": "javascript", "tags": "javascript, fundamentos, programacion", "date": "2022-08-31 23:00:00 -0600", "snippet": "DOM El modelo de objeto de documento DOM es una interfaz de programación para los documentos HTML. Facilita una representación estructurada del documento y define de qué manera los prog...", "content": "DOM El modelo de objeto de documento DOM es una interfaz de programación para los documentos HTML. Facilita una representación estructurada del documento y define de qué manera los programas pueden acceder, al fin de modificar, tanto su estructura, estilo y contenido. Una página web es un documento. Éste documento puede exhibirse en la ventana de un navegador o también como código fuente HTML. document document La interfaz Document representa cualquer página web cargada en el navegador y sirve como punto de entrada al contenido de la página (El árbol DOM).console.log(document)Propiedades:console.log(document.head)console.log(document.title)console.log(document.body)console.log(document.domain)Métodos: Document.getElementsByClassName(String className) Document.getElementsByTagName(String tagName) Document.getElementById(String id) Document.querySelector(String selector) Document.querySelectorAll(String selector) Document.createDocumentFragment() Document.createElement(String name)getElementById getElementById: Devuelve una referencia al elemento por su ID.&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 id=\"tituloWeb\"&gt;Lorem, ipsum dolor.&lt;/h1&gt; &lt;script src=\"app.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;console.log(document.getElementById(\"tituloWeb\"))console.log(document.getElementById(\"tituloWeb\").textContent)console.log(document.getElementById(\"tituloWeb\").innerHTML)&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;/html&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;script src=\"app.js\"&gt;&lt;/script&gt; &lt;!-- Qué sucedera?? --&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 id=\"tituloWeb\"&gt;Lorem, ipsum dolor.&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;DOMContentLoaded y defer DOMContentLoaded el navegador HTML está completamente cargado y el árbol DOM está construido, pero es posible que los recursos externos como &lt;img&gt; y hojas de estilo aún no se hayan cargado.document.addEventListener(\"DOMContentLoaded\", () =&gt; { console.log(document.getElementById(\"tituloWeb\")) console.log(document.getElementById(\"tituloWeb\").textContent)}); defer El atributo defer indica al navegador que no espere por el script. En lugar de ello, debe seguir procesando el HTML, construir el DOM. El script carga “en segundo plano” y se ejecuta cuando el DOM esta completo. Los scripts con defer siempre se ejecutan cuando el DOM esta listo (pero antes del evento DOMContentLoaded). defer no funciona igual en todos los navegadores.&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;script src=\"app.js\" defer&gt;&lt;/script&gt;&lt;/head&gt;querySelector querySelector: Devuelve el primer elemento del documento que coincida con el grupo especificado de selectores.&lt;h1 class=\"text-primary\" id=\"tituloWeb\"&gt;Lorem, ipsum dolor.&lt;/h1&gt;console.log(document.querySelector(\"h1\"));console.log(document.querySelector(\".text-primary\"));console.log(document.querySelector(\"#tituloWeb\"));&lt;div class=\"container\"&gt; &lt;p class=\"text-danger\"&gt;Lorem, ipsum dolor 1.&lt;/p&gt; &lt;p class=\"text-danger\"&gt;Lorem, ipsum dolor 2.&lt;/p&gt; &lt;p class=\"text-danger\"&gt;Lorem, ipsum dolor 3.&lt;/p&gt;&lt;/div&gt;&lt;p class=\"text-danger\"&gt;parrafo&lt;/p&gt;// El primer elemento que encuentreconsole.log(document.querySelector(\".text-danger\"));// Todosconsole.log(document.querySelectorAll(\".text-danger\"));// Todo lo que esté en \"container\"console.log(document.querySelectorAll(\".container .text-danger\"));querySelector vs getElementById El método querySelector le permite recuperar un elemento mediante una consulta de selector de CSS El método getElementById recupera un elemento por su ID DOM. Ambos métodos tienen una amplia compatibilidad con los navegadores. Debe optar por usar el método querySelector si necesita seleccionar elementos usando reglas más complejas que se representan fácilmente usando un selector CSS. Si desea seleccionar un elemento por su ID, usar getElementById es una buena opción. A menudo necesitará realizar selecciones más complejas en su HTML, y ahí es donde querySelector puede ser más útil; usarlo de manera constante también puede hacer que su código sea más fácil de leer para otros codificadores. En otras palabras, el principal beneficio de usar querySelector o querySelectorAll es que podemos seleccionar elementos usando selectores CSS, lo que nos da una forma uniforme de manejar la selección de elementos, y eso lo convierte en una forma preferida de seleccionar elementos para muchos desarrolladores. Si usa una herramienta como Babel para admitir navegadores más antiguos, entonces puede ser irrelevante, ya que las funciones más nuevas se pueden convertir a código compatible con versiones anteriores cuando compila su script.element element: eventos disponibles para los elementos HTMLAlgunas propiedades:const h1 = document.querySelector(\"#tituloWeb\");console.log(h1.className);console.log(h1.id);console.log(h1.style);console.log(h1.tagName);console.log(h1.textContent);h1.textContent = \"nuevo texto\";h1.style.backgroundColor = \"red\";h1.style.color = \"white\";Métodos: addEventListener: Registra un controlador de evento para un tipo de evento específico en un elemento. appendChild: Inserta un nodo así como el último nodo hijo de este elemento. hasAttributes: Verifica si el elemento tiene o no algún atributo.EventosEn JavaScript, la interacción con el usuario se consigue mediante la captura de los eventos que éste produce. Un evento es una acción del usuario ante la cual puede realizarse algún proceso (por ejemplo, el cambio del valor de un formulario, o la pulsación de un enlace).addEventListener addEventListener: Registra un evento a un objeto en específico. El Objeto especifico puede ser un simple elemento en un archivo, el mismo documento , una ventana o un XMLHttpRequest. Eventos estándar elemento.addEventListener(tipo, listener); tipo: tipo de evento a escuchar. listener: El objeto que recibe una notificación cuando un evento de el tipo especificado ocurre. Debe ser un objeto implementando la interfaz EventListener o solo una function en JavaScript.click&lt;button id=\"boton\"&gt;Cambiar texto&lt;/button&gt;&lt;p id=\"parrafo\"&gt;Lorem, ipsum dolor.&lt;/p&gt;const boton = document.querySelector(\"#boton\")const parrafo = document.querySelector(\"#parrafo\")boton.addEventListener(\"click\", () =&gt; { console.log(\"Haz hecho click\") parrafo.textContent = \"Nuevo texto desde evento\" parrafo.style.backgroundColor = \"red\"});createElement createElement: El método document.createElement() crea un elemento HTML especificado por su tagName.Crear un &lt;li&gt; const li = document.createElement(\"li\")li.textContent = \"item desde javascript\"console.log(li)appendChild appendChild: Agrega un nuevo nodo al final de la lista de un elemento hijo de un elemento padre especificado.&lt;ul id=\"listaDinamica\"&gt; &lt;li&gt;Elemento estático&lt;/li&gt;&lt;/ul&gt;// elemento donde vamos a incorporar los &lt;li&gt;const listaDinamica = document.querySelector(\"#listaDinamica\")// Creamos el &lt;li&gt;const li = document.createElement(\"li\")// Agregamos texto al &lt;li&gt;li.textContent = \"item desde javascript\"// Finalmente incorporamos al &lt;ul&gt;listaDinamica.appendChild(li)listaDinamica.appendChild(li)CONSIDERACIONES: Si el child hace una referencia a un nodo existente en el documento, el método appendChild se mueve de su posición actual a su nueva posición. Ésto significa que el nodo no puede estar en dos puntos del documento de manera simultánea. Así que si el nodo ya contiene un padre, primero es eliminado, y después se añade a la nueva posición. Se puede usar Node.cloneNode para hacer una copia del nodo antes de añadirlo debajo de su nuevo elemento padre.No recomendado:const listaDinamica = document.querySelector(\"#listaDinamica\")const arrayHeroes = [\"Spiderman\", \"IronMan\", \"BlackWidow\"]arrayHeroes.forEach((heroe) =&gt; { const li = document.createElement(\"li\") li.textContent = heroe listaDinamica.appendChild(li)})ReflowAquí se genera Reflow: Ocurre cuando un navegador debe procesar y renderizar parte o la totalidad de una página web nuevamente, como después de una actualización en un sitio interactivo.Fragment new DocumentFragment() createDocumentFragment() La interfaz DocumentFragment representa un objeto de documento mínimo que no tiene padre. Se utiliza como una versión ligera de Document que almacena un segmento de una estructura de documento compuesta de nodos como un documento estándar. La gran diferencia se debe al hecho de que el fragmento de documento no forma parte de la estructura de árbol del documento activo. Los cambios realizados en el fragmento no afectan el documento (incluso en reflow) ni inciden en el rendimiento cuando se realizan cambios.const listaDinamica = document.querySelector(\"#listaDinamica\")const arrayHeroes = [\"Spiderman\", \"IronMan\", \"BlackWidow\"]const fragment = document.createDocumentFragment()arrayHeroes.forEach((heroe) =&gt; { const li = document.createElement(\"li\") li.textContent = heroe fragment.appendChild(li)})listaDinamica.appendChild(fragment) insertBefore firstChild insertBeforeparentNode.insertBefore(newNode, referenceNode);arrayHeroes.forEach((heroe) =&gt; { const newNode = document.createElement(\"li\") newNode.textContent = heroe // Nos devuelve el primer elemento const referenceNode = fragment.firstChild // En caso de que no exista un nodo hijo mostrara null console.log(\"primer newNode\", referenceNode) // Si \"referenceNode\" es null, el newNode se insertará al final de la lista. fragment.insertBefore(newNode, referenceNode)})Ejemplo createElementSupongamos que necesitamos incorporar de forma dinámica este elemento:&lt;li class=\"list\"&gt; &lt;b&gt;Heroe: &lt;/b&gt; &lt;span class=\"text-primary\"&gt;aquí va el heroe&lt;/span&gt;&lt;/li&gt;const listaDinamica = document.querySelector(\"#listaDinamica\")const arrayHeroes = [\"Spiderman\", \"IronMan\", \"BlackWidow\"]const fragment = new DocumentFragment()arrayEHeroes.forEach((heroe) =&gt; { const li = document.createElement(\"li\") li.className = \"list\" const bold = document.createElement(\"b\") bold.textContent = \"Heroe: \" const span = document.createElement(\"span\") span.className = \"text-primary\" span.textContent = heroe li.appendChild(bold) li.appendChild(span) fragment.appendChild(li)})listaDinamica.appendChild(fragment)template template: es un mecanismo para mantener el contenido HTML del lado del cliente que no se renderiza cuando se carga una página, pero que posteriormente puede ser instanciado durante el tiempo de ejecución empleando JavaScript. Piensa en la plantilla como un fragmento de contenido que está siendo almacenado para un uso posterior en el documento. El analizador procesa el contenido del elemento &lt;template&gt; durante la carga de la página, pero sólo lo hace para asegurar que esos contenidos son válidos; sin embargo, estos contenidos del elemento no se renderizan. los elementos &lt;template&gt; contienen un DocumentFragment en su propiedad HTMLTemplateElement.content.&lt;ul id=\"listaDinamica\"&gt;&lt;/ul&gt; &lt;template id=\"template\"&gt; &lt;li class=\"list\"&gt; &lt;b&gt;Heroe: &lt;/b&gt; &lt;span class=\"text-primary\"&gt;aquí va el heroe&lt;/span&gt; &lt;/li&gt; &lt;/template&gt;&lt;script src=\"app.js\"&gt;&lt;/script&gt;const listaDinamica = document.querySelector(\"#listaDinamica\")const template = document.querySelector(\"#template\")// es aconsejable clonarconst clone = template.content.cloneNode(true)//console.log(clone)clone.querySelector(\"span\").textContent = \"Spiderman\"listaDinamica.appendChild(clone)Fragment + Templateconst listaDinamica = document.querySelector(\"#listaDinamica\")const fragment = document.createDocumentFragment()const template = document.querySelector(\"#template\")const arrayHeroes = [\"Spiderman\", \"IronMan\", \"BlackWidow\"]arrayHeroes.forEach((heroe) =&gt; { const clone = template.content.cloneNode(true) clone.querySelector(\"span\").textContent = heroe fragment.appendChild(clone)});listaDinamica.appendChild(fragment) OJOHTMLTemplateElement tiene una propiedad content, que es de solo lectura y DocumentFragment contiene el subárbol DOM que representa la plantilla. Tener en cuenta que el uso directo del valor de content podría provocar un comportamiento inesperado; consulte la sección Evitar el error de DocumentFragment.const listaDinamica = document.querySelector(\"#listaDinamica\")const arrayHeroes = [\"Spiderman\", \"IronMan\", \"BlackWidow\"]const fragment = document.createDocumentFragment()const template = document.querySelector(\"#template\")const clickHeroe = (e) =&gt; console.log(\"Evento click: \", e.target)arrayHeroes.forEach((heroe) =&gt; { const clone = template.content.firstElementChild.cloneNode(true) // se añade firstElementChild clone.querySelector(\"span\").textContent = heroe clone.addEventListener(\"click\", clickHeroe) fragment.appendChild(clone)});listaDinamica.appendChild(fragment)Bar con objetos&lt;!DOCTYPE html&gt;&lt;html lang=\"es\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Carrito con Objetos&lt;/title&gt; &lt;link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"assets/img/favicon-32x32.png\"&gt; &lt;link rel=\"stylesheet\" href=\"assets/css/style.css\"&gt; &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT\" crossorigin=\"anonymous\"&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-lg-12\"&gt; &lt;img src=\"assets/img/logo.png\" style=\"max-width:20%;\" class=\"img-responsive center-block d-block mx-auto\" alt=\"Sample Image\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;main class=\"container mt-5\"&gt; &lt;div class=\"row text-center\"&gt; &lt;article class=\"col-sm-4 mb-3\"&gt; &lt;div class=\"card\"&gt; &lt;div class=\"card-body\"&gt; &lt;h5 class=\"card-title\"&gt;Cóctel 🍸&lt;/h5&gt; &lt;button class=\"btn btn-primary\" data-id=\"1\" data-bebida=\"Cóctel 🍸\"&gt;Agregar&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/article&gt; &lt;article class=\"col-sm-4 mb-3\"&gt; &lt;div class=\"card\"&gt; &lt;div class=\"card-body\"&gt; &lt;h5 class=\"card-title\"&gt;Cerveza 🍺&lt;/h5&gt; &lt;button class=\"btn btn-primary\" data-id=\"2\" data-bebida=\"Cerveza 🍺\"&gt;Agregar&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/article&gt; &lt;article class=\"col-sm-4 mb-3\"&gt; &lt;div class=\"card\"&gt; &lt;div class=\"card-body\"&gt; &lt;h5 class=\"card-title\"&gt;Vino 🍷&lt;/h5&gt; &lt;button class=\"btn btn-primary\" data-id=\"3\" data-bebida=\"Vino 🍷\"&gt;Agregar&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/article&gt; &lt;/div&gt; &lt;/main&gt; &lt;section class=\"container mt-3\"&gt; &lt;ul class=\"list-group\" id=\"carrito\"&gt; &lt;!--li class=\"list-group-item d-flex justify-content-between align-items-center\"&gt; &lt;span class=\"lead\"&gt;items&lt;/span&gt; &lt;span class=\"badge bg-primary rounded-pill\"&gt;14&lt;/span&gt; &lt;/li--&gt; &lt;/ul&gt; &lt;/section&gt; &lt;template id=\"template\"&gt; &lt;li class=\"list-group-item d-flex justify-content-between align-items-center\"&gt; &lt;span class=\"lead\"&gt;items&lt;/span&gt; &lt;span class=\"badge bg-primary rounded-pill\"&gt;0&lt;/span&gt; &lt;/li&gt; &lt;/template&gt; &lt;script src=\"src/script.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;const carrito = document.querySelector(\"#carrito\")const template = document.querySelector(\"#template\")const fragment = document.createDocumentFragment()const agregar = document.querySelectorAll(\".card button\")const carritoObjeto = {}const agregarCarrito = (e) =&gt; { const producto = { titulo: e.target.dataset.bebida, id: e.target.dataset.id, cantidad: 1, } if (carritoObjeto.hasOwnProperty(producto.id)) { producto.cantidad = carritoObjeto[producto.id].cantidad + 1 } carritoObjeto[producto.id] = producto mostrarCarrito()}agregar.forEach((boton) =&gt; boton.addEventListener(\"click\", agregarCarrito))const mostrarCarrito = () =&gt; { carrito.textContent = \"\" Object.values(carritoObjeto).forEach((item) =&gt; { const clone = template.content.cloneNode(true) clone.querySelector(\".lead\").textContent = item.titulo clone.querySelector(\".rounded-pill\").textContent = item.cantidad fragment.appendChild(clone) }); carrito.appendChild(fragment)}Bar con Arraysconst carrito = document.querySelector('#carrito')const template = document.querySelector('#template')const botones = document.querySelectorAll('.card button')const fragment = document.createDocumentFragment()const footer = document.querySelector(\"#footer\")const templateFooter = document.querySelector(\"#templateFooter\")const carritoArray = []const agregarCarrito = (e) =&gt; { const producto = { id: e.target.dataset.id, titulo: e.target.dataset.bebida, cantidad: 1, } // buscamos el indice const index = carritoArray.findIndex((item) =&gt; item.id === producto.id); // si no existe empujamos el nuevo elemento if (index === -1) { carritoArray.push(producto); } else { // en caso contrario aumentamos su cantidad carritoArray[index].cantidad++; } mostrarCarrito()}botones.forEach((boton) =&gt; boton.addEventListener(\"click\", agregarCarrito))const mostrarCarrito = () =&gt; { carrito.textContent = '' carritoArray.forEach((item) =&gt; { const clone = template.content.cloneNode(true); clone.querySelector(\".lead\").textContent = item.titulo; clone.querySelector(\".rounded-pill\").textContent = item.cantidad; fragment.appendChild(clone); }); carrito.appendChild(fragment)}El burbujeo y la capturaEl burbujeo y la captura de eventos son dos mecanismos que describen lo que sucede cuando dos controladores del mismo tipo de evento se activan en un elemento.&lt;div class=\"container\"&gt; &lt;div class=\"border border-success border-5 py-5 m-3\"&gt; Elemento Padre &lt;div class=\"border border-warning border-5 py-5 m-3\"&gt; Elemento Hijo &lt;div class=\"border border-danger border-5 py-5 m-3\"&gt; Elemento Nieto &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;Fase de burbuja (bubbling): Se propaga desde el elemento hijo hasta el padre. (comportamiento por defecto)const padre = document.querySelector(\".border-success\")const hijo = document.querySelector(\".border-warning\")const nieto = document.querySelector(\".border-danger\")padre.addEventListener(\"click\", (e) =&gt; console.log(\"padre\"))hijo.addEventListener(\"click\", (e) =&gt; console.log(\"hijo\"))nieto.addEventListener(\"click\", (e) =&gt; console.log(\"nieto\"))Fase de captura: Se propaga desde el elemento padre hasta el hijo.primary.addEventListener(\"click\", (e) =&gt; console.log(\"primary\"), true)secondary.addEventListener(\"click\", (e) =&gt; console.log(\"secondary\"), true)danger.addEventListener(\"click\", (e) =&gt; console.log(\"danger\"), true)stopPropagation stopPropagation: evita la propagación adicional del evento actual en las fases de captura y bubbling.const padre = document.querySelector(\".border-success\")const hijo = document.querySelector(\".border-warning\")const nieto = document.querySelector(\".border-danger\")padre.addEventListener(\"click\", (e) =&gt; { e.stopPropagation() console.log(\"padre\")})hijo.addEventListener(\"click\", (e) =&gt; { e.stopPropagation() console.log(\"hijo\")})nieto.addEventListener(\"click\", (e) =&gt; { e.stopPropagation() console.log(\"nieto\")})const cajas = document.querySelectorAll(\".border\");cajas.forEach((item) =&gt; { item.addEventListener(\"click\", (e) =&gt; { e.stopPropagation() console.log(\"click\") });})preventDefault preventDefault: Cancela el evento si este es cancelable, sin detener el resto del funcionamiento del evento, es decir, puede ser llamado de nuevo.&lt;form&gt; &lt;input type=\"text\" name=\"nombre\"&gt; &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;&lt;/form&gt;const formulario = document.querySelector(\"form\")formulario.addEventListener(\"submit\", (e) =&gt; { e.preventDefault() console.log(\"click\")})Sirve para cualquier comportamiento por defecto del navegador:&lt;a href=\"#\"&gt;ancla&lt;/a&gt;const ancla = document.querySelector(\"a\")ancla.addEventListener(\"click\", (e) =&gt; e.preventDefault())Delegación de EventosLa delegación de eventos es básicamente un patrón para manejar eventos de manera eficiente.En lugar de agregar un detector de eventos a todos y cada uno de los elementos similares, podemos agregar un detector de eventos a un elemento principal y llamar a un evento en un objetivo en particular utilizando la propiedad .target del objeto de evento. Así evitamos la propagación&lt;div class=\"container\"&gt; &lt;div id=\"padre\" class=\"border border-success border-5 py-5 m-3\" data-div=\"divPadre\"&gt; Elemento Padre &lt;div id=\"hijo\" class=\"border border-warning border-5 py-5 m-3\" data-div=\"divHijo\"&gt; Elemento Hijo &lt;div id=\"nieto\" class=\"border border-danger border-5 py-5 m-3\" data-div=\"divNieto\"&gt; Elemento Nieto &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;const container = document.querySelector(\".container\")container.addEventListener(\"click\", (e) =&gt; { console.log(e.target);})¿Como activo un evento para un elemento en específico? matches: El método matches() comprueba si el Element sería seleccionable por el selector CSS especificado en la cadena; en caso contrario, retorna false. dataset const container = document.querySelector(\".container\")container.addEventListener(\"click\", (e) =&gt; { // console.log(e.target.id); if (e.target.id === \"nieto\") { console.log(\"diste click en el nieto\") } // console.log(e.target.matches(\".border-warning\")); if (e.target.matches(\".border-warning\")) { console.log(\"diste click en el hijo\") } // data-set // console.log(e.target.dataset[\"div\"]); // console.log(e.target.dataset.div); if (e.target.dataset[\"div\"] === \"divPadre\") { console.log(\"diste click en padre\") }})Bar con delegación de eventos&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Carrito con objetos&lt;/title&gt; &lt;link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"assets/img/favicon-32x32.png\"&gt; &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT\" crossorigin=\"anonymous\"&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-lg-12\"&gt; &lt;img src=\"assets/img/logo.png\" class=\"img-responsive center-block d-block mx-auto\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;main class=\"container mt-5\"&gt; &lt;div class=\"row text-center\"&gt; &lt;article class=\"col-sm-4 mb-3\"&gt; &lt;div class=\"card\"&gt; &lt;div class=\"card-body\"&gt; &lt;h3 class=\"card-title\"&gt;Cóctel 🍸&lt;/h3&gt; &lt;p class=\"lead\"&gt;$100&lt;/p&gt; &lt;button class=\"btn btn-primary\" data-id=\"1\" data-bebida=\"Cóctel 🍸\" data-precio=\"100\"&gt;Agregar&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/article&gt; &lt;article class=\"col-sm-4 mb-3\"&gt; &lt;div class=\"card\"&gt; &lt;div class=\"card-body\"&gt; &lt;h3 class=\"card-title\"&gt;Cerveza 🍺&lt;/h3&gt; &lt;p class=\"lead\"&gt;$200&lt;/p&gt; &lt;button class=\"btn btn-primary\" data-id=\"2\" data-bebida=\"Cerveza 🍺\" data-precio=\"200\"&gt;Agregar&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/article&gt; &lt;article class=\"col-sm-4 mb-3\"&gt; &lt;div class=\"card\"&gt; &lt;div class=\"card-body\"&gt; &lt;h3 class=\"card-title\"&gt;Vino 🍷&lt;/h3&gt; &lt;p class=\"lead\"&gt;$300&lt;/p&gt; &lt;button class=\"btn btn-primary\" data-id=\"3\" data-bebida=\"Vino 🍷\" data-precio=\"300\"&gt;Agregar&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/article&gt; &lt;section class=\"container mt-3\"&gt; &lt;table class=\"table table-striped\" id=\"header\"&gt; &lt;tbody id=\"carrito\"&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/section&gt; &lt;template id=\"templateHeader\"&gt; &lt;thead class=\"table-dark\"&gt; &lt;tr&gt; &lt;th scope=\"col\"&gt;Producto&lt;/th&gt; &lt;th scope=\"col\"&gt;Cantidad&lt;/th&gt; &lt;th scope=\"col\"&gt;Total&lt;/th&gt; &lt;th scope=\"col\"&gt;&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;/template&gt; &lt;template id=\"template\"&gt; &lt;tr&gt; &lt;td id=\"producto\"&gt;&lt;/td&gt; &lt;td id=\"cantidad\"&gt;&lt;/td&gt; &lt;td id=\"total\"&gt;$&lt;span&gt;&lt;/span&gt;&lt;/td&gt; &lt;td&gt; &lt;button id=\"btnAumentar\" class=\"btn btn-sm btn-success\"&gt;+&lt;/button&gt; &lt;button id=\"btnDisminuir\" class=\"btn btn-sm btn-danger\"&gt;-&lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/template&gt; &lt;footer id=\"footer\" class=\"container mt-3\"&gt; &lt;template id=\"templateFooter\"&gt; &lt;div class=\"card\"&gt; &lt;div class=\"card-body d-flex justify-content-between align-items-center\"&gt; &lt;p class=\"lead mb-0\"&gt;TOTAL: $&lt;span&gt;0&lt;/span&gt;&lt;/p&gt; &lt;button id=\"btnFinalizar\" class=\"btn btn-outline-primary\"&gt;Finalizar Compra&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/template&gt; &lt;/footer&gt; &lt;/div&gt; &lt;/main&gt; &lt;script src=\"src/script.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;const carrito = document.querySelector('#carrito')const template = document.querySelector('#template')const botones = document.querySelectorAll('.card button')const fragment = document.createDocumentFragment()const footer = document.querySelector(\"#footer\")const templateFooter = document.querySelector(\"#templateFooter\")const header = document.querySelector(\"#header\")const templateHeader = document.querySelector(\"#templateHeader\")let carritoArray = []document.addEventListener(\"click\", (e) =&gt; { if (e.target.matches(\".card button\")) { agregarCarrito(e) } if (e.target.matches(\"#btnAumentar\")) { btnAumentar(e) } if (e.target.matches(\"#btnDisminuir\")) { btnDisminuir(e) }})const agregarCarrito = (e) =&gt; { const producto = { id: e.target.dataset.id, titulo: e.target.dataset.bebida, cantidad: 1, precio: parseInt(e.target.dataset.precio), } const index = carritoArray.findIndex((item) =&gt; item.id === producto.id) if (index === -1) { carritoArray.push(producto) } else { carritoArray[index].cantidad++ } mostrarCarrito()}const mostrarCarrito = () =&gt; { carrito.textContent = '' carritoArray.forEach((item) =&gt; { const clone = template.content.cloneNode(true) clone.querySelector(\"#producto\").textContent = item.titulo clone.querySelector(\"#cantidad\").textContent = item.cantidad clone.querySelector(\"#total span\").textContent = item.precio * item.cantidad clone.querySelector(\".btn-success\").dataset.id = item.id clone.querySelector(\".btn-danger\").dataset.id = item.id fragment.appendChild(clone) }); carrito.appendChild(fragment) mostrarHeaderFooter()}const btnAumentar = (e) =&gt; { carritoArray = carritoArray.map((item) =&gt; { if (item.id === e.target.dataset.id) { item.cantidad++ } return item }) mostrarCarrito()};const btnDisminuir = (e) =&gt; { carritoArray = carritoArray.filter((item) =&gt; { if (item.id === e.target.dataset.id) { if (item.cantidad &gt; 0) { item.cantidad-- if (item.cantidad === 0) return return item } } else { return item } }) mostrarCarrito()};const mostrarHeaderFooter = () =&gt; { header.deleteTHead() footer.textContent = \"\" const total = carritoArray.reduce((acc, current) =&gt; acc + current.precio * current.cantidad, 0) const cloneHeader = templateHeader.content.cloneNode(true) const cloneFooter = templateFooter.content.cloneNode(true) cloneFooter.querySelector(\"p span\").textContent = total header.appendChild(cloneHeader) footer.appendChild(cloneFooter)}" }, { "title": "Fundamentos JavaScript - parte 4", "url": "/posts/fundamentos-js-parte-4/", "categories": "javascript", "tags": "javascript, fundamentos, programacion", "date": "2022-08-26 23:00:00 -0600", "snippet": "Métodos avanzados Array Estos métodos no mutan el array original, sino que nos devuelven uno nuevo.map map: El método map iterará sobre cada elemento de un arreglo y devuelve un nuevo arreglo que...", "content": "Métodos avanzados Array Estos métodos no mutan el array original, sino que nos devuelven uno nuevo.map map: El método map iterará sobre cada elemento de un arreglo y devuelve un nuevo arreglo que contiene los resultados de llamar a la función callback en cada elemento. Esto lo hace sin mutar el arreglo original. Una función de callback es una función que se pasa a otra función como un argumento, que luego se invoca dentro de la función externa para completar algún tipo de rutina o acción.Cuando se utiliza la función callback, se pasan tres argumentos. El primer argumento es el elemento actual que se está procesando. El segundo es el índice de ese elemento y el tercero es el arreglo al que se llamó el método map.const frutas = [\"banana\", \"manzana\", \"pera\"];const nuevoArray = frutas.map((item) =&gt; { return item;});console.log(nuevoArray);Reduciendo el código:const frutas = [\"banana\", \"manzana\", \"pera\"];const nuevoArray = frutas.map((item) =&gt; item);console.log(nuevoArray);¿Pero no es lo mismo que esto?const frutas = [\"banana\", \"manzana\", \"pera\"];// por referencia (revisar videos anteriores)const arrayReferencia = frutas; frutas.push(\"sandia\");console.log(arrayReferencia);// construye un nuevo array con los resultados// esto lo hace sin mutar el arreglo originalconst nuevoArray = frutas.map((item) =&gt; item);frutas.push(\"sandia\");console.log(nuevoArray);Devolver solo el name en un nuevo arrayconst users = [ { name: \"Juan\", age: 34 }, { name: \"Amy\", age: 20 }, { name: \"James\", age: 10 },];const names = users.map((user) =&gt; user.name);console.log(names);Devolver nuevo array con numeros * 2const numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];const numerosPorDos = numeros.map((item) =&gt; item * 2);console.log(numerosPorDos);filter filter: El método filter() crea un nuevo array con todos los elementos que cumplan la condición implementada por la función dada.const users = [ { uid: 1, name: \"John\", age: 34 }, { uid: 2, name: \"Amy\", age: 20 }, { uid: 3, name: \"camperCat\", age: 10 },];const mayor = users.filter((user) =&gt; user.age &gt; 30);console.log(mayor);Eliminar un usuario por uidconst users = [ { uid: 1, name: \"John\", age: 34 }, { uid: 2, name: \"Amy\", age: 20 }, { uid: 3, name: \"camperCat\", age: 10 },];const userFiltrado = users.filter((user) =&gt; user.uid !== 2);console.log(userFiltrado);find find: El método find() devuelve el valor del primer elemento del array que cumple la función de prueba proporcionada.Buscar usuario por uid:const users = [ { uid: 1, name: \"John\", age: 34 }, { uid: 2, name: \"Amy\", age: 20 }, { uid: 3, name: \"camperCat\", age: 10 },];const amy = users.find((user) =&gt; user.uid === 2);console.log(amy);Utilizando desestructuraciónconst { age } = users.find((user) =&gt; user.uid === 2);console.log(age);some some: El método some() comprueba si al menos un elemento del array cumple con la condición implementada por la función proporcionada.const users = [ { uid: 1, name: \"John\", age: 34 }, { uid: 2, name: \"Amy\", age: 20 }, { uid: 3, name: \"camperCat\", age: 10 },];const existe = users.some((user) =&gt; user.uid === 2);console.log(existe);findIndex findIndex: El método findIndex() devuelve el índice del primer elemento de un array que cumpla con la función de prueba proporcionada. En caso contrario devuelve -1.const users = [ { uid: 1, name: \"John\", age: 34 }, { uid: 2, name: \"Amy\", age: 20 }, { uid: 3, name: \"camperCat\", age: 10 },];const existe = users.findIndex((user) =&gt; user.uid === 4);console.log(existe);slice slice: El método slice() devuelve una copia de una parte del array dentro de un nuevo array empezando por inicio hasta fin (fin no incluido). El array original no se modificará.const arr = [\"Cat\", \"Dog\", \"Tiger\", \"Zebra\"];// 0 [1 2] 3const newArray = arr.slice(1, 3);console.log(newArray);concat concat: El método concat() se usa para unir dos o más arrays. Este método no cambia los arrays existentes, sino que devuelve un nuevo array.const array1 = [\"a\", \"b\", \"c\"];const array2 = [\"d\", \"e\", \"f\"];const array3 = array1.concat(array2);console.log(array3); Spread syntax: permite a un elemento iterable tal como un arreglo o cadena ser expandido en lugares donde son esperados.const array1 = [\"a\", \"b\", \"c\"];const array2 = [\"d\", \"e\", \"f\"];const array3 = [...array1, ...array2];console.log(array3);reduce reduce: El método reduce() ejecuta una función reductora sobre cada elemento de un array, devolviendo como resultado un único valor.Sumar todos los números:const numeros = [1, 2, 3, 4, 5];const sumaTodos = numeros.reduce((acc, valorActual) =&gt; acc + valorActual);console.log(sumaTodos);Aplanar matrices anidadas #01:const arrayNumeros = [ [0, 1], [2, 3], [4, 5],];const soloNumeros = arrayNumeros.reduce( (acc, current) =&gt; acc.concat(current));console.log(soloNumeros);Aplanar matrices anidadas #02:const flatSingle = [].concat(...arrayNumeros);console.log(flatSingle);Aplanar matrices anidadas #03: flat()const flatSingle = arrayNumeros.flat();console.log(flatSingle);const arrayNumeros = [1, 2, [3, 4, [5, 6]]];const arrayPlano = arrayNumeros.flat(2);console.log(arrayPlano);split split: El método split() divide un objeto de tipo String en un array, mediante un separador.const cadenaMeses = \"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\";const arrayMeses = cadenaMeses.split(\",\");console.log(arrayMeses);join join: el método join() une todos los elementos de una matriz (o un objeto similar a una matriz) en una cadena y devuelve esta cadena.const cadenaMeses = \"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\";const arrayMeses = cadenaMeses.split(\",\");console.log(arrayMeses);const nuevamenteString = arrayMeses.join(\",\");console.log(nuevamenteString);Separador: Es una cadena usada para separar cada uno de los elementos del arreglo. El separador es convertido a una cadena si es necesario. Si este se omite, los elementos del arreglo son separados con una coma (“,”).Objetos JavaScript está diseñado en un paradigma simple basado en objetos Un objeto es una colección de propiedades, y una propiedad es una asociación entre un nombre (o clave) y un valor. El valor de una propiedad puede ser una función, en cuyo caso la propiedad es conocida como un método. Además de los objetos que están predefinidos en el navegador, puedes definir tus propios objetos. Los objetos son similares a los arreglos (arrays), excepto que en lugar de usar índices para acceder y modificar sus datos, accedes a los datos en objetos a través de propiedades (properties).Objeto literal Se denomina objeto literal al objeto cuyas propiedades están declaradas textualmente en el código.const gato = { nombre: 'Michi', duerme: true, edad: 10, enemigos: [\"agua\", \"perros\"]}Acceder a los valoresNotación de punto:console.log(gato.nombre)console.log(gato.duerme)console.log(gato.enemigos[0]);Notación de corchetes (nos servirá para recorrerlo):console.log(gato['nombre'])console.log(gato['edad'])console.log(gato[\"enemigos\"][0]);CRUD (propiedades)Crear (create)gato.color = 'Blanco'Leer (read)console.log(gato)Actualizar (update)gato.edad = 11Eliminar (delete)delete gato.duermehasOwnPropertyA veces es útil comprobar si existe o no la propiedad de un objeto dado. Podemos utilizar el método .hasOwnProperty(propname) para determinar si un objeto tiene una propiedad con ese nombre. .hasOwnProperty() devuelve true o false si se encuentra la propiedad o no.const gato = { nombre: 'Michi', duerme: true, edad: 10, enemigos: [\"agua\", \"perros\"]}console.log(gato.hasOwnProperty(\"nombre\"))console.log(gato.hasOwnProperty(\"salud\"))Objetos anidadosconst gato = { nombre: 'Michi', duerme: true, edad: 10, enemigos: [\"agua\", \"perros\"], otros: { amigos: [\"Pelusa\", \"Bombi\", \"Milo\"], favoritos: { comida: { fria: \"salmón\", caliente: \"pollo\" } } }}Acceder:console.log(gato.otros.amigos[0])console.log(gato.otros.favoritos.comida.fria)Encadenamiento opcional Optional chaining: El operador de encadenamiento opcional ?. permite leer el valor de una propiedad ubicada dentro de una cadena de objetos conectados sin tener que validar expresamente que cada referencia en la cadena sea válida.const gato = { nombre: \"Michi\", duerme: true, edad: 10, enemigos: [\"agua\", \"perros\"],};console.log(gato.otros.favoritos);Encadenamiento opcional: resultado undefined.console.log(gato.otros?.favoritos);PropiedadPropiedades:const frutas = [\"sandía\", \"pera\", \"melon\"];console.log(frutas.length);Métodos:const frutas = [\"sandía\", \"pera\", \"melon\"];frutas.push(\"banana\");console.log(frutas);Métodosconst gato = { nombre: \"Michi\", duerme: true, edad: 10, enemigos: [\"agua\", \"perros\"], comer: function () { console.log(\"Ahora está comiendo\"); },};gato.comer();Reducido:const gato = { nombre: \"Michi\", duerme: true, edad: 10, enemigos: [\"agua\", \"perros\"], comer() { console.log(\"Ahora está comiendo\"); },};gato.comer();Con parámetros:const gato = { nombre: \"Michi\", duerme: true, edad: 10, enemigos: [\"agua\", \"perros\"], comer(comida) { return \"Ahora está comiendo: \" + comida; },};console.log(gato.comer(\"atun\"));¿Qué pasará con esto?const gato = { nombre: \"Michi\", duerme: true, edad: 10, enemigos: [\"agua\", \"perros\"], comer(comida) { return `${nombre} está comiendo ${comida}`; },};console.log(gato.comer(\"atun\"));Lo está buscando en el objeto globalconst nombre = \"Milo\";const gato = { nombre: \"Michi\", duerme: true, edad: 10, enemigos: [\"agua\", \"perros\"], comer(comida) { return `${nombre} está comiendo ${comida}`; },};console.log(gato.comer(\"atun\"));Objeto this:const gato = { nombre: \"Michi\", duerme: true, edad: 10, enemigos: [\"agua\", \"perros\"], comer(comida) { console.log(this); },};gato.comer(\"atun\");this this: Hace referencia al objeto contexto de JavaScript en el cual se está ejecutando el código actualconst gato = { nombre: \"Michi\", duerme: true, edad: 10, enemigos: [\"agua\", \"perros\"], comer(comida) { return `${this.nombre} está comiendo ${comida}`; },};console.log(gato.comer(\"atun\"));this con arrow function¿Error?const gato = { nombre: \"Michi\", duerme: true, edad: 10, enemigos: [\"agua\", \"perros\"], comer: (comida) =&gt; { return `${this.nombre} está comiendo ${comida}`; },};console.log(gato.comer(\"pez\"));Arrow Functions No tiene this o super y no se debe usarla como métodos. Pero si puedo utilizarla en su interior:const gato = { nombre: \"Michi\", duerme: true, edad: 10, enemigos: [\"agua\", \"perros\"], comer(comida) { return `${this.nombre} está comiendo ${comida}`; }, mostrarEnemigos() { return this.enemigos.forEach((item) =&gt; console.log(item)); },};gato.mostrarEnemigos();Recorrer un objetofor…in for in: La instrucción for-in itera sobre todas las propiedades enumerables de un objeto que está codificado por cadenasconst gato = { nombre: \"Michi\", duerme: true, edad: 10, enemigos: [\"agua\", \"perros\"],};for (const propiedad in gato) { console.log(gato[propiedad]);}¿Por qué usar for…in? Dado que for…in está construido para iterar propiedades de objeto, no se recomienda su uso con arreglos y opciones como Array.prototype.forEach() y existe for…of, ¿cuál podría ser el uso de for…in? Es posible que se utilice de forma más práctica con fines de depuración, ya que es una forma fácil de comprobar las propiedades de un objeto (mediante la salida a la consola o de otro modo) Aunque los arreglos suelen ser más prácticos para almacenar datos, en situaciones en las que se prefiere un par clave-valor para trabajar con datos (con propiedades que actúan como la “clave”), puede haber casos en los que desees comprobar si alguna de esas claves cumple un valor particular.Object.values() Object.values(): devuelve un array con los valores correspondientes a las propiedades enumerables de un objeto.console.log(Object.values(gato));Con forEach()Object.values(gato).forEach((item) =&gt; console.log(item));Existen más métodos como: Object.entries() Object.key() Object.getOwnPropertyNames()Desestructuración de Objectos desestructuración: La sintaxis de desestructuración es una expresión de JavaScript que permite desempacar valores de arreglos o propiedades de objetos en distintas variables.const gato = { nombre: \"Michi\", duerme: true, edad: 10, enemigos: [\"agua\", \"perros\"], otros: { amigos: [\"Pelusa\", \"Bombi\", \"Milo\"], favoritos: { comida: { fria: \"salmón\", caliente: \"pollo\", }, }, },};const nombreGato = gato.nombre;console.log(nombreGato);Desestructura de objetos:const gato = { nombre: \"Michi\", duerme: true, edad: 10, enemigos: [\"agua\", \"perros\"], otros: { amigos: [\"Pelusa\", \"Bombi\", \"Milo\"], favoritos: { comida: { fria: \"salmón\", caliente: \"pollo\", }, }, },};const { nombre, duerme, edad, enemigos } = gato;console.log(nombre);console.log(duerme);console.log(edad);console.log(enemigos);Alias:const { nombre: nombreGato } = gato;console.log(nombreGato);Por defecto:const gato = { // nombre: \"Michi\", duerme: true, edad: 10, enemigos: [\"agua\", \"perros\"], otros: { amigos: [\"Pelusa\", \"Bombi\", \"Milo\"], favoritos: { comida: { fria: \"salmón\", caliente: \"pollo\", }, }, },};const { nombre: nombreGato = \"Sin nombre\" } = gato;console.log(nombreGato);Anidados:const gato = { nombre: \"Michi\", duerme: true, edad: 10, enemigos: [\"agua\", \"perros\"], otros: { amigos: [\"Pelusa\", \"Bombi\", \"Milo\"], favoritos: { comida: { fria: \"salmón\", caliente: \"pollo\", }, }, },};const { otros: { amigos },} = gato;console.log(amigos);Con Array: La desestructuración también sirve para Array, solo reemplazar por []const enemigos = [\"agua\", \"perros\"]const [agua, perro] = enemigos;console.log(agua);console.log(perro);Métodos:const gato = { nombre: \"Michi\", duerme: true, edad: 10, enemigos: [\"agua\", \"perros\"], comer(comida) { return `${this.nombre} está comiendo ${comida}`; }, mostrarEnemigos() { return this.enemigos.forEach((item) =&gt; console.log(item)); },};const { comer } = gato;console.log(comer(\"pescado\"));// undefined está comiendo pescadoGetters y Setters infdrmacion de setters y getters get: Enlaza la propiedad de un objeto con una función que será llamada cuando la propiedad es buscada. set: La sintaxis set asocia la propiedad de un objeto a una función que será llamada cuando haya un intento de asignar valor a esa propiedad.GET: Tomar en cuenta lo siguiente al trabajar con la sintaxis get: Debe tener exactamente cero parámetros. No debe haber múltiples getters para una misma propiedad.SET: Tomaren cuenta lo siguiente al trabajar con setters: Debe tener exactamente un parámetroconst gato = { nombre: \"Michi\", duerme: true, edad: 10, enemigos: [\"agua\", \"perros\"], comer(comida) { return `${this.nombre} está comiendo ${comida}`; }, get nombreMayuscula() { return this.nombre.toUpperCase(); }, set nuevoEnemigo(nuevo) { this.enemigos.push(nuevo); },};// GETconsole.log(gato.nombreMayuscula);// SETgato.nuevoEnemigo = \"batman\";console.log(gato.enemigos);por valor vs por referencia Referencia por valor: Cuando asignamos valores primitivos (Boolean, Null, Undefined, Number, String y Symbol), el valor asignado es una copia del valor que estamos asignando. por referencia: Pero cuando asignamos valores NO primitivos o complejos (Object, Array y Function), JavaScript copia “la referencia”, lo que implica que no se copia el valor en sí, si no una referencia a través de la cual accedemos al valor original.Primitivos: (por valor)let a = \"hola\";let b = a;console.log(b);Si cambiamos el valor de a, b sigue siendo “hola”a = \"chao\";console.log(b);No primitivos: (por referencia)let a = [\"hola\"];let b = a;console.log(b);let a = [\"hola\"];let b = a;a.push(\"chao\");console.log(b);Lo mismo pasa con los objetos:const a = { nombre: \"hola\",};const b = a;a.nombre = \"chao\";console.log(b);" }, { "title": "Fundamentos JavaScript - parte 3", "url": "/posts/fundamentos-js-parte-3/", "categories": "javascript", "tags": "javascript, fundamentos, programacion", "date": "2022-08-18 23:00:00 -0600", "snippet": "Plantillas literalesLas plantillas literales son cadenas literales que habilitan el uso de expresiones incrustadas. Con ellas, es posible utilizar cadenas de caracteres de más de una línea, y funci...", "content": "Plantillas literalesLas plantillas literales son cadenas literales que habilitan el uso de expresiones incrustadas. Con ellas, es posible utilizar cadenas de caracteres de más de una línea, y funcionalidades de interpolación de cadenas de caracteres.En ediciones anteriores de la especificación ES2015, solían llamarse “plantillas de cadenas de caracteres”.console.log('línea 1 de cadena de texto\\n' +'línea 2 de cadena de texto');console.log(`línea 1 de la cadena de textolínea 2 de la cadena de texto`);Interpolación de expresionesPara insertar expresiones dentro de cadenas de caracteres normales, se utilizaría la siguiente sintaxis:let nombreUsuario = \"James\";console.log(\"\\nBienvenido: \\n\" + nombreUsuario);Ahora, con las plantillas literales, se pueden utilizar sus nuevas capacidades (es decir, insertar expresiones con ${ } e incluir caracteres de fin de linea literales dentro de la cadena) para simplificar la sintaxis:let nombreUsuario = \"James\";console.log(`Bienvenido: ${ nombreUsuario }`);//operaciones matematicaslet a = 23;let b = 55;console.log(`Resultado de a + b: ${ a + b }`)//uso de metodosconsole.log(`Bienvenido: ${ nombreUsuario.toUpperCase() }`)// ternariolet nombreUsuario = \"james\"let estado = falseconsole.log(`${ estado ? 'online!' : 'offline' } ${ nombreUsuario }`);var vs let vs constvarUno de los mayores problemas al declarar variables con var, es que puede sobrescribir las declaraciones de variables sin errores.var estado = true;var estado = false;console.log(estado);En una aplicación pequeña, es posible que no se encuentre con este tipo de problema, pero cuando su código se agrande, puede sobrescribir accidentalmente una variable que no tenía la intención de sobrescribir.letDebido a que este comportamiento no arroja un error, la búsqueda y corrección de errores se vuelve más difícil. Se introdujo let una nueva palabra clave llamada en ES6 para resolver este problema potencial con var.  Con let: Una variable con el mismo nombre solo se puede declarar una vez.let estado = true;let estado = false;console.log(estado); Pero si se puede cambiar su valor:let estado = true;estado = false;console.log(estado);ScopeEn simples palabras el “scope de una variable” hace referencia al lugar donde esta va a residir o donde podrá ser accesible. Cuando declaras una variable con var, se declara globalmente o localmente si se declara dentro de una función.var estado = trueif (estado) { var estado = false}console.log(estado)let se comporta de manera similar, pero con algunas características adicionales. Cuando declaras una variable con let dentro de un bloque, declaración o expresión, su alcance se limita a ese bloque, declaración o expresión.let estado = trueif (estado) { let estado = false console.log(estado)}console.log(estado)for (let i = 0; i &lt; 10; i++) { console.log(i)}console.log(i)constconst tiene todas las características de let, con la ventaja adicional de que las variables declaradas usando const son de solo lectura. Son un valor constante, lo que significa que una vez que se asigna una variable const, no se puede reasignar.//error const estado = trueestado = false//errorfor (const i = 0; i &lt; 10; i++) { console.log(i)}//validoconst estado = trueif (estado) { const estado = false console.log(estado)}console.log(estado)Algunos desarrolladores prefieren asignar todas sus variables usando const de forma predeterminada, a menos que sepan que necesitarán reasignar el valor. Solo en ese caso, usan let.Array vs constEs importante comprender que los objetos (incluidos los arreglos y las funciones) asignados a una variable mediante el uso const siguen siendo mutables. El uso de const solo evita la reasignación del identificador de variable.Error:const miArray = []miArray = [\"nuevoElemento\"]Válido:const miArray = []miArray[0] = [\"nuevoElemento\"]console.log(miArray)Métodos basicos Array (push, pop, shift, unshift)El método push() añade uno o más elementos al final de un array y devuelve la nueva longitud del array.const frutas = [\"Banana\"]frutas.push(\"Sandía\")console.log(frutas)El método unshift() agrega uno o más elementos al inicio del array, y devuelve la nueva longitud del array.const frutas = [\"Banana\"]frutas.unshift(\"Sandía\")console.log(frutas)El método pop() elimina el último elemento de un array y lo devuelve. Este método cambia la longitud del array.const frutas = [\"manzana\", \"pera\"]frutas.unshift(\"uva\")const frutaEliminada = frutas.pop()console.log(frutas)console.log(frutaEliminada)El método shift() elimina el primer elemento del array y lo retorna. Este método modifica la longitud del array.const frutas = [\"manzana\", \"pera\"]frutas.unshift(\"uva\")const frutaEliminada = frutas.shift()console.log(frutas)console.log(frutaEliminada)Funciones anónimasEn JavaScript, usualmente no necesitas nombrar tus funciones, especialmente cuando se pasa una función como argumento a otra función. En su lugar, creamos funciones inline (en línea). No necesitamos nombrar estas funciones porque no las reutilizamos en otro lugar. Función declarativa:// declaro la funciónfunction numAleatorioRango(min, max) { return Math.floor(Math.random() * (max - min)) + min}// invoco la funciónconsole.log(numAleatorioRango(1, 11)) Función expresada:Anónima (expresada en una variable):const miNumero = function (min, max) { return Math.floor(Math.random() * (max - min)) + min}console.log(miNumero(1, 11))Diferencia declarativa vs Expresada:console.log(miNumero(1, 11))const miNumero = function (min, max) { return Math.floor(Math.random() * (max - min)) + min} La forma correcta de definir una función varía según el comportamiento que esperemos de la misma: con las funciones declaradas, tenemos la seguridad de que siempre estarán disponibles en tiempo de ejecución. Con las funciones expresadas, tendremos que éstas no son evaluadas hasta que el intérprete no alcance su posición en el código, lo cual puede generar errores en arquitecturas muy anidadas.El hecho de que las funciones declarativas se evalúen antes que las expresiones, pueden producir comportamientos no deseados cuando forman parte de condicionales. Para estos casos, el uso de las funciones expresadas garantiza que éstas formarán parte del flujo general del programa, lo cual puede evitarnos sorpresa en determinados entornos.Arrow functions Arrow functions: Una expresión de función flecha es una alternativa compacta a una expresión de función tradicionalconst miNumeroFlecha = (max) =&gt; { return Math.floor(Math.random() * (max - 1)) + 1}console.log(miNumeroFlecha(11))Reducción:const miNumeroFlecha = max =&gt; Math.floor(Math.random() * (max - 1)) + 1 console.log(miNumeroFlecha(11))Reducción con paréntesis:const miNumeroFlecha = max =&gt; (Math.floor(Math.random() * (max - 1)) + 1) console.log(miNumeroFlecha(11))Más parámetros:const miNumeroFlecha = (min, max) =&gt; Math.floor(Math.random() * (max - min)) + minconsole.log(miNumeroFlecha(1, 11))Parámetros opcionales (también se puede hacer con function):const miNumeroFlecha = (min = 1, max = 10) =&gt; Math.floor(Math.random() * (max - min)) + minconsole.log(miNumeroFlecha()) Limitantes: No tiene sus propios enlaces a this o super y no se debe usar como métodos. No tiene argumentos o palabras clave new.target. No apta para los métodos call, apply y bind, que generalmente se basan en establecer un ámbito o alcance No se puede utilizar como constructor. Arrow &amp; forEach() forEach(): El método forEach() ejecuta la función indicada una vez por cada elemento del array.let frutas = [\"manzana\", \"sandía\", \"pera\"]frutas.forEach(fruta =&gt; console.log(fruta))let frutas = [\"manzana\", \"sandía\", \"pera\"]frutas.forEach((fruta, index, array) =&gt; { console.log(index) console.log(fruta) console.log(array)})" }, { "title": "BackEnd con NodeJS - parte 1", "url": "/posts/backend-nodejs-parte-1/", "categories": "nodeJS", "tags": "javascript, backend, nodeJS, express, JWT, programacion", "date": "2022-08-12 23:00:00 -0600", "snippet": "Stack de tecnologías Node.js Express MongoDBConfiguración inicialnpm init -y Este comando genera el archivo package.json{ \"name\": \"backend-todo-univo\", \"version\": \"1.0.0\", \"description\": \"Pr...", "content": "Stack de tecnologías Node.js Express MongoDBConfiguración inicialnpm init -y Este comando genera el archivo package.json{ \"name\": \"backend-todo-univo\", \"version\": \"1.0.0\", \"description\": \"Proyecto BackEnd TODO UNIVO\", \"main\": \"index.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\" }, \"keywords\": [\"Rest\", \"UNIVO\"], \"author\": \"Jaime Guevara\", \"license\": \"ISC\"} Instalación de dependenciasnpm i bcryptjs cookie-parser cors dotenv express express-validator jsonwebtoken mongoosenpm i -D nodemon Modificar archivo package.json{ \"name\": \"apirest-univo\", \"version\": \"1.0.0\", \"type\": \"module\", \"description\": \"Proyecto API TODO UNIVO\", \"main\": \"index.js\", \"scripts\": { \"dev\": \"nodemon index.js\", \"start\": \"node index.js\" }, \"keywords\": [ \"Rest\", \"UNIVO\" ], \"author\": \"Jaime Guevara\", \"license\": \"ISC\", \"dependencies\": { \"bcryptjs\": \"^2.4.3\", \"cookie-parser\": \"^1.4.6\", \"cors\": \"^2.8.5\", \"dotenv\": \"^16.0.1\", \"express\": \"^4.18.1\", \"express-validator\": \"^6.14.2\", \"jsonwebtoken\": \"^8.5.1\", \"mongoose\": \"^6.5.2\" }, \"devDependencies\": { \"nodemon\": \"^2.0.19\" }} Crear archivo .gitignorenode_modules.env Archivo index.jsimport express from \"express\"const app = express()app.listen(3000, () =&gt; console.log(\"🔥🔥🔥 servidor disponible en: http://localhost:3000\")) Ejecutar servidor con: ⁠npm run dev Crear/verificar la siguiente estructura de archivos y directoriosEstructura de archivosBase de datos MongoDB Crear base de datos en mongo.db creando cuenta en https://www.mongodb.com/ donde se crea un usuario y se conecta a la base de datos con la opción Connect your applicationMongoDB Copiar la URI, después se modificara con el usuario y password generadoMongoDBVariables de entorno y Moongoose Modificar archivo ⁠.env  sustituyendo sus credencialesDB_URI=mongodb+srv://&lt;usuario&gt;:&lt;password&gt;@cluster0.3kuar1l.mongodb.net/todo_v1 Crear archivo ⁠database/connect.js import mongoose from \"mongoose\"try { await mongoose.connect(process.env.DB_URI) console.log(\"Conectado a la base de datos 😎\")} catch (error) { console.log(\"Error de conexion a mongoDB\" + error)} Modificar ⁠index.jsimport 'dotenv/config'import './database/connect.js'import express from \"express\"const app = express()const PORT = process.env.PORT || 3000;app.listen(PORT, () =&gt; console.log(\"🔥🔥🔥 servidor disponible en: http://localhost:\" + PORT))Schema &amp; Models Schema: Con Mongoose, todo se deriva de un esquema. Cada esquema se asigna a una colección MongoDB y define la forma de los documentos dentro de esa colección. Para usar nuestra definición de esquema, necesitamos convertirla a un modelo con el que podamos trabajar Crear archivo ⁠models/user.js import mongoose from \"mongoose\"const userSchema = new mongoose.Schema({ email: { type: String, required: true, trim: true, unique: true, lowercase: true, index: { unique: true }, }, password: { type: String, required: true, },});export const User = mongoose.model(\"User\", userSchema);Routes Crear archivo routes/auth_route.js import express from 'express'const router = express.Router()router.get(\"/login\", (req, res) =&gt; { res.json({ok:\"login\"})})router.post(\"/register\", (req, res) =&gt; { res.json({ok:true})})export default router Modificar ⁠index.jsimport 'dotenv/config'import './database/connect.js'import express from \"express\"import authRoutes from \"./routes/auth_route.js\"const app = express()app.use('/', authRoutes)const PORT = process.env.PORT || 3000;app.listen(PORT, () =&gt; console.log(\"🔥🔥🔥 servidor disponible en: http://localhost:\" + PORT)) Los navegadores solo permiten realizar peticiones GET, para realizar peticiones POST es necesario un programa como POSTMAN o INSOMNIAPostMan Agregamos version a nuestra api modificando archivo ⁠index.jsimport 'dotenv/config'import './database/connect.js'import express from \"express\"import authRoutes from \"./routes/auth_route.js\"const app = express()app.use('/api/v1/auth', authRoutes)const PORT = process.env.PORT || 3000;app.listen(PORT, () =&gt; console.log(\"🔥🔥🔥 servidor disponible en: http://localhost:\" + PORT))Controllers Utilizamos controladores para manejar la lógica de respuesta de las rutas, crear archivo ⁠controllers/auth_controller.js export const register = async (req, res) =&gt; { res.json({ok:true})};export const login = async (req, res) =&gt; { res.json({ok:true})}; Modificar archivo routes/auth_route.js import express from 'express'import { login, register } from '../controllers/auth_controller.js'const router = express.Router()router.get(\"/login\", login)router.post(\"/register\", register)export default routerVerificar envió de datos JSON Modificar ⁠controllers/auth_controller.js export const register = async (req, res) =&gt; { console.log(req.body) res.json({ok:true})};export const login = async (req, res) =&gt; { res.json({ok:true})}; Probar envió de datos formato JSON con POSTMANPostMan En la consola aparecerá undefined, eso es debido a que express no esta configurado para recibir peticiones en JSON, para habilitar esta lectura es necesario agregar un middleware al archivo ⁠index.js  import 'dotenv/config'import './database/connect.js'import express from \"express\"import authRoutes from \"./routes/auth_route.js\"const app = express()app.use(express.json())app.use('/api/v1', authRoutes)const PORT = process.env.PORT || 3000;app.listen(PORT, () =&gt; console.log(\"🔥🔥🔥 servidor disponible en: http://localhost:\" + PORT)) Vista en consola[nodemon] restarting due to changes...[nodemon] starting `node index.js`Conectado a la base de datos 😎🔥🔥🔥 servidor disponible en: http://localhost:3000{ email: 'jr.correo@correo.com', password: '123456' }Validaciones Agregamos validaciones con ExpressValidator, modificamos routes/auth_route.js ya que hay que interceptar la respuesta antes de que llegue al controlador.import express from 'express'import { login, register } from '../controllers/auth_controller.js'import { validatorExpress } from \"../middlewares/validatorExpress.js\";import { body } from \"express-validator\";const router = express.Router()router.post(\"/register\", [ body(\"email\", \"Ingrese un email válido\") .trim() .isEmail() .normalizeEmail(), body(\"password\", \"Contraseña mínimo 6 carácteres\") .trim() .isLength({ min: 6 }) .custom((value, { req }) =&gt; { if (value !== req.body.reEnterPassword) { throw new Error(\"No coinciden las contraseñas\") } return value; }), ], validatorExpress, register)router.post( \"/login\", [ body(\"email\", \"Ingrese un email válido\") .trim() .isEmail() .normalizeEmail(), body(\"password\", \"Contraseña mínimo 6 carácteres\") .trim() .isLength({ min: 6 }), ], validatorExpress, login)export default router Crear archivo middlewares/validatorExpress.jsimport { validationResult } from \"express-validator\"export const validatorExpress = (req, res, next) =&gt; { const errors = validationResult(req) if (!errors.isEmpty()) { return res.status(400).json({ error: errors.array() }) } next()} Probar validaciones con PostmanPostManEncriptación al password y comparación Modificar archivo  models/User.js ⁠  import mongoose from \"mongoose\"import bcrypt from \"bcryptjs\"const userSchema = new mongoose.Schema({ email: { type: String, required: true, trim: true, unique: true, lowercase: true, index: { unique: true }, }, password: { type: String, required: true, },});userSchema.pre(\"save\", async function (next) { const user = this if (!user.isModified(\"password\")) return next() try { const salt = await bcrypt.genSalt(10) user.password = await bcrypt.hash(user.password, salt) next() } catch (error) { console.log(error) throw new Error(\"Error al codificar la contraseña\") }});userSchema.methods.comparePassword = async function (candidatePassword) { return await bcrypt.compare(candidatePassword, this.password)}export const User = mongoose.model(\"User\", userSchema)Register y Login Modificar ⁠controllers/auth_controller.js import { User } from \"../models/User.js\"export const register = async (req, res) =&gt; { const { email, password } = req.body try { let usuario = new User({ email, password }) await usuario.save() return res.status(201).json({ ok: true }) } catch (error) { console.log(error) return res.status(400).json({ error: error.message }) }}export const login = async (req, res) =&gt; { try { const { email, password } = req.body let usuario = await User.findOne({ email }); if (!usuario) return res.status(403).json({ error: \"No existe este usuario\" }); const respuestaPassword = await usuario.comparePassword(password); if (!respuestaPassword) return res.status(403).json({ error: \"Contraseña incorrecta\" }); return res.status(201).json({ ok: true }) } catch (error) { console.log(error) return res.status(403).json({ error: error.message }) }}JWT Introducción a JWT Generar JWT para el login y register, modificar archivo  .env  DB_URI=mongodb+srv://&lt;usuario&gt;:&lt;password&gt;@cluster0.3kuar1l.mongodb.net/todo_v1JWT_SECRET=SflKkkRJSMeKKF2QT4fwpMeJf36POk6yJV_a3dAA5c Modificar ⁠controllers/auth_controller.js import { User } from \"../models/User.js\"import jwt from \"jsonwebtoken\"export const register = async (req, res) =&gt; { const { email, password } = req.body try { let usuario = new User({ email, password }) await usuario.save() return res.status(201).json({ ok: true }) } catch (error) { console.log(error) return res.status(400).json({ error: error.message }) }}export const login = async (req, res) =&gt; { try { const { email, password } = req.body let user = await User.findOne({ email }) if (!user) return res.status(403).json({ error: \"No existe este usuario\" }) const respuestaPassword = await user.comparePassword(password) if (!respuestaPassword) return res.status(403).json({ error: \"Contraseña incorrecta\" }) // JWT const token = jwt.sign({uid: user._id}, process.env.JWT_SECRET) return res.json({ token }) return res.status(201).json({ ok: true }) } catch (error) { console.log(error) return res.status(403).json({ error: error.message }) }}" }, { "title": "Fundamentos JavaScript - parte 2", "url": "/posts/fundamentos-js-parte-2/", "categories": "javascript", "tags": "javascript, fundamentos, programacion", "date": "2022-07-30 23:00:00 -0600", "snippet": "Estructuras de controlEn lenguajes de programación, las estructuras de control permiten modificar el flujo de ejecución de las instrucciones de un programa.Condicionales if/else (Si ocurre algo, h...", "content": "Estructuras de controlEn lenguajes de programación, las estructuras de control permiten modificar el flujo de ejecución de las instrucciones de un programa.Condicionales if/else (Si ocurre algo, haz esto, sino, haz lo otro…) ?: operador ternario (Operador ternario: Equivalente a If/else , método abreviado.) switch (Estructura para casos específicos: Similar a varios If/else anidados.)Repetitivas o iterativas while do… while forif… elseEjecuta una sentencia si una condición especificada es evaluada como verdadera. Si la condición es evaluada como falsa, otra sentencia puede ser ejecutada.if (condicion) { // bloque verdadero} else { // bloque falso}let textJavascript = prompt(\"Escriba 'javascript'\")if (textJavascript === \"javascript\") { console.log(\"Lo escribiste bien\")} else { console.log(\"Lo escribiste mal\")}let numUsuario = prompt(\"Ingrese numero del 1 al 10\")console.log(numUsuario + \" Es: \" + typeof numUsuario)console.log(parseInt(numUsuario))if (parseInt(numUsuario) &lt;= 10) { // Sentencia true console.log(\"Numero dentro del rango 1 a 10\")} else { // Sentencia false console.log(\"Numero fuera de rango\")}//condicion ? exprVerdadero : exprFalsoconst edad = 26const bebida = edad &gt;= 21 ? \"Cerveza 🍺 \" : \"Juice 🧃\"console.log(bebida)function getCobro(esVIP) { return (esVIP ? '$2.00' : '$10.00')}console.log(getCobro(true))console.log(getCobro(false))console.log(getCobro(null))SwitchLa declaración **switch** evalúa una expresión, comparando el valor de esa expresión con una instancia **case**, y ejecuta declaraciones asociadas a ese case, así como las declaraciones en los case que siguen.let fruta = prompt(\"Escriba una fruta\")switch (fruta) { case 'Naranjas': console.log('El kilogramo de naranjas cuesta $0.59.') break case 'Manzanas': console.log('El kilogramo de manzanas cuesta $0.32.') break case 'Platanos': console.log('El kilogramo de platanos cuesta $0.48.') break; case 'Cerezas': console.log('El kilogramo de cerezas cuesta $3.00.') break case 'Mangos': case 'Papayas': console.log('El kilogramo de mangos y papayas cuesta $2.79.') break default: console.log('Lo lamentamos, por el momento no disponemos de ' + expr + '.')}whileCrea un bucle que ejecuta una sentencia especificada mientras cierta condición se evalúe como verdadera. Dicha condición es evaluada antes de ejecutar la sentencia.let numero = 0while (numero &lt;= 10) { console.log(numero) numero++ //numero = numero + 1;}console.log(\"FIN: \" + numero)do… whileLa sentencia (hacer mientras) crea un bucle que ejecuta una sentencia especificada, hasta que la condición de comprobación se evalúa como falsa. La condición se evalúa después de ejecutar la sentencia, dando como resultado que la sentencia especificada se ejecute al menos una vez.let resultado = ''let i = 0do { i = i + 1 resultado = resultado + i} while (i &lt; 5)console.log(result)forCrea un bucle que consiste en tres expresiones opcionales, encerradas en paréntesis y separadas por puntos y comas, seguidas de una sentencia ejecutada en un bucle.for (let i = 0; i &lt; 5; i++) { console.log(\"El numero es \" + i)}ArrayLos arrays son objetos similares a una lista cuyo prototipo proporciona métodos para efectuar operaciones de recorrido y de mutación. Tanto la longitud como el tipo de los elementos de un array son variables.let frutas = [\"manzana\", \"platano\", \"pera\"]console.log(frutas)console.log(frutas.length)console.log(frutas[0])console.log(frutas[1])console.log(frutas[2])console.log(frutas[3])console.log(typeof frutas)for (let i = 0; i &lt; frutas.length; i++) { console.log(frutas[i])}for ofLa sentencia for…of ejecuta un bloque de código para cada elemento de un objeto iterable, como lo son: String, Array, objetos similares a array (por ejemplo, arguments or NodeList), TypedArray, Map, Set e iterables definidos por el usuario.for (let fruta of frutas) { console.log(fruta);}for inEl bucle for…in iterará sobre todas las propiedades de un objeto. Más tecnicamente, iterará sobre cualquier propiedad en el objeto que haya sido internamente definida con su propiedad [[Enumerable]] configurada como true.for (let fruta in frutas) { console.log(fruta);}functionLas funciones son uno de los bloques de construcción fundamentales en JavaScript. Una función en JavaScript es similar a un procedimiento — un conjunto de instrucciones que realiza una tarea o calcula un valor, pero para que un procedimiento califique como función, debe tomar alguna entrada y devolver una salida donde hay alguna relación obvia entre la entrada y la salida.Características: El nombre de la función. Una lista de parámetros de la función, entre paréntesis y separados por comas. Las declaraciones de JavaScript que definen la función, encerradas entre llaves, { ... }.function saludar() { console.log(\"Bienvenido!\");}saludar();saludar();function saludar() { console.log(\"Bienvenido!\");} Hoisting una estricta definición de hoisting sugiere que las declaraciones de variables y funciones son físicamente movidas al comienzo del código, pero esto no es lo que ocurre en realidad. Lo que sucede es que las declaraciones de variables y funciones son asignadas en memoria durante la fase de compilación, pero quedan exactamente en dónde las has escrito en el código.Funciones con argumentos/parámetros:function saludar(nombreUsuario) { console.log(\"Bienvenido! \" + nombreUsuario);}saludar(\"Ignacio\");Funciones con retorno:function saludar(nombreUsuario) { return \"Bienvenido \" + nombreUsuario;}console.log(saludar(\"Ignacio\"));Ejemplo sumar:function sumar(n1, n2) { return parseInt(n1) + parseInt(n2);}let numeroUno = prompt(\"Ingrese primer número\");let numeroDos = prompt(\"Ingrese segundo número\");let resultado = sumar(numeroUno, numeroDos);console.log(\"El total es: \" + resultado);ReutilizablesUna característica fundamental de las funciones es que se pueden reutilizar.function sumar(n1, n2) { return n1 + n2;}let resultadoUno = sumar(10, 20);let resultadoDos = sumar(50, 60);let resultadoTres = sumar(100, 30);console.log(\"El total uno es: \" + resultadoUno);console.log(\"El total dos es: \" + resultadoDos);console.log(\"El total tres es: \" + resultadoTres);" }, { "title": "Fundamentos JavaScript - parte 1", "url": "/posts/fundamentos-js-parte-1/", "categories": "javascript", "tags": "javascript, fundamentos, programacion", "date": "2022-07-28 23:00:00 -0600", "snippet": "JavaScriptJavaScript (JS) es un lenguaje de programación ligero, interpretado, o compilado justo-a-tiempo (just-in-time) con funciones de primera clase. Si bien es más conocido como un lenguaje de ...", "content": "JavaScriptJavaScript (JS) es un lenguaje de programación ligero, interpretado, o compilado justo-a-tiempo (just-in-time) con funciones de primera clase. Si bien es más conocido como un lenguaje de scripting (secuencias de comandos) para páginas web, y es usado en muchos entornos fuera del navegador, tal como Node.js, Apache CouchDB y Adobe Acrobat JavaScript es un lenguaje de programación basada en prototipos, multiparadigma, de un solo hilo, dinámico, con soporte para programación orientada a objetos, imperativa y declarativa (por ejemplo programación funcional).El estándar para JavaScript es ECMAScript (ECMA-262) y la especificación de la API para la Internacionalización de ECMAScript (ECMA-402). No confundas JavaScript con el lenguaje de programación Java. Ambos “Java” y “JavaScript” son marcas o marcas registradas de Oracle en los Estados Unidos y otros países, Sin embargo, los dos lenguajes de programación tienen sintaxis, semántica y usos muy diferentes.JavaScript fue desarrollado originalmente por Brendan Eich de Netscape  con el nombre de Mocha, el cual fue renombrado posteriormente a LiveScript, para finalmente quedar como JavaScript. HTML: es el lenguaje de marcado que usamos para estructurar y dar significado a nuestro contenido web, por ejemplo, definiendo párrafos, encabezados y tablas de datos, o insertando imágenes y videos en la página. CSS: es un lenguaje de reglas de estilo que usamos para aplicar estilo a nuestro contenido HTML, por ejemplo, establecer colores de fondo y tipos de letra, y distribuir nuestro contenido en múltiples columnas. JS: es un lenguaje de secuencias de comandos que te permite crear contenido de actualización dinámica, controlar multimedia, animar imágenes y prácticamente todo lo demás. (Está bien, no todo, pero es sorprendente lo que puedes lograr con unas pocas líneas de código JavaScript).HTML+CSS+JSAgregando JavaScript1 - En el head o cabecera de un archivo html con las etiquetas &lt;script&gt; &lt;/script&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;JS Basic&lt;/title&gt; &lt;script&gt; alert(\"Alerta con JavaScript 🎉 🎆 🎊\"); &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Fundamentos de JS&lt;/h1&gt; &lt;/body&gt;&lt;/html&gt;2 - Mezclado con html lo cual es una mala practica por lo que hay que evitarlo. 🚫🚫🚫&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;JS Basic&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Fundamentos de JS&lt;/h1&gt; &lt;button onclick=\"alerta()\"&gt;Click me!&lt;/button&gt; &lt;script&gt; function alerta() { alert(\"Alerta con JavaScript 🎉 🎆 🎊\"); } &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;3 - En un archivo externoindex.html&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;JS Basic&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Fundamentos de JS&lt;/h1&gt; &lt;script src=\"src/script.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;script.jsalert(\"Alerta con JavaScript 🎉 🎆 🎊\")Comentarios// soy un comentario de una linea/* Yo también soy un comentario en bloque   o varias lineas*/Palabras reservadasPalabras clave reservadas a partir de ECMAScript 2015 break case catch class const continue debugger default delete do else export extends finally for function if import in instanceof new return super switch this throw try typeof var void while with yieldFuturas palabras clave reservadasLas siguientes están reservadas como palabras clave futuras por la especificación ECMAScript. No tienen ninguna funcionalidad especial en la actualidad, pero es posible que lo hagan en el futuro, por lo que no se pueden utilizar como identificadores.Estas siempre están reservadas: enumLas siguientes solo están reservadas cuando se encuentran en código de modo estricto: implements interface let package private protected public static yieldLas siguientes solo están reservadas cuando se encuentran en código de módulo: awaitFuturas palabras clave reservadas en estándares más antiguosLas siguientes están reservadas como palabras clave futuras según las especificaciones de ECMAScript anteriores (ECMAScript 1 a 3). abstract boolean byte char double final float goto int long native short synchronized throws transient volatileAdemás, los literales null, true y false no se pueden utilizar como identificadores en ECMAScript.Orden de ejecuciónCuando el navegador encuentra un bloque de JavaScript, generalmente lo ejecuta en orden, de arriba a abajo. Esto significa que debes tener cuidado con el orden en el que colocas las cosas.alert(\"primero\")alert(\"segundo\")alert(\"tercero\") ⚠ CUIDADO!!!!JavaScript distingue entre mayúsculas y minúsculas y es muy exigente, por lo que debes ingresar la sintaxis exactamente como se muestra; de lo contrario, es posible que no funcione.ConsolaSi abrimos el inspector de elementos, podrás ver una pestaña de consola. La consola del navegador es una herramienta que nos ayuda a depurar nuestras páginas, facilitando nuestro trabajo diario.console.log(\"Saludos desde la consola 👌\")Tipos de datosEl último estándar ECMAScript define nueve tipos: Seis tipos de datos primitivos, controlados por el operador typeof Undefined: typeof instance === \"undefined\" Boolean: typeof instance === \"boolean\" Number: typeof instance === \"number\" String: typeof instance === \"string\" BigInt: typeof instance === \"bigint\" Symbol: typeof instance === \"symbol\" Null: typeof instance === \"object\". Tipo primitivo especial que tiene un uso adicional para su valor: si el objeto no se hereda, se muestra null; Object: typeof instance === \"object\". Tipo estructural especial que no es de datos pero para cualquier instancia de objeto construido que también se utiliza como estructuras de datos: new Object, new Array, new Map, new Set, new WeakMap, new WeakSet, new Date y casi todo lo hecho con la palabra clave new; Function: una estructura sin datos, aunque también responde al operador typeof: typeof instance === \"function\". Esta simplemente es una forma abreviada para funciones, aunque cada constructor de funciones se deriva del constructor Object.Tipos de datos más basicos String: se utiliza para representar datos textuales. Number: valores numéricos. Boolean: representa una entidad lógica y puede tener dos valores: true y false.console.log(\"un valor de tipo texto o string\")console.log(20)console.log(\"20\")console.log(1.2)console.log(1, 62) //funcion recibiendo parametrosconsole.log(1 + 1)console.log(true)console.log(false)VariablesUna variable es un espacio de memoria el cual nos servirá para almacenar un tipo de dato con un valor correspondiente.JavaScript tiene tres tipos de declaraciones de variables. var Declara una variable, opcionalmente la inicia a un valor.  let Declara una variable local con ámbito de bloque, opcionalmente la inicia a un valor.  const Declara un nombre de constante de solo lectura y ámbito de bloque. Asignación En JS el signo = se conoce como Operador de asignación simple (permite almacenar un valor a una variable). Se evalúa la expresión de la derecha y luego se le asigna el resultado a la variable de la izquierda. A esto se le llama declarar la variable con un valor inicial.let x = 10let y = falselet z = xlet n = \"Carlitos\"let a = 10let b = 20let resultado = a * bconsole.log(resultado)Reglas para el nombre de variables: No utilizar espacios, en su lugar reemplazar con _ o camelCase 🐫 Utilizar lengua inglesa, sin ñ ni tildes (en teoría se puede pero es una mala práctica) Evitar signos extraños como @ # [ ] + { } - etc. El primer carácter no puede ser un número var 2res = 'valor' Se puede utilizar el signo $ ej: var $anio = 2022;ConcatenaciónConcatenación es el proceso de anexar una cadena al final de otra cadena. Las cadenas se concatenan con el operador +var a = \"Hola, \"var b = \"como estas?\"var union = a + bconsole.log(union)//variantesconsole.log(a + b)console.log(\"Hola, \" + \"como estas?\")var nombreUsuario = \"James\"var edadUsuario = \"40\"console.log(\"Mi nombre es: \" + nombreUsuario + \" y mi edad es: \" + edadUsuario)var num1 = 100var num2 = 200console.log(num1 + num2)Prompt()Genera un dialogo para el ingreso de datalet numeroUno = prompt(\"Ingresa el primero número\")let numeroDos = prompt(\"Ingresa el segundo número\")let resultado = numeroUno + numeroDosconsole.log(resultado) typeof El operador typeof devuelve una cadena que indica el tipo del operando sin evaluarlo parseInt Convierte (parsea) un argumento de tipo cadena y devuelve un entero de la base especificada.let numeroUno = prompt(\"Ingresa el primero número\")let numeroDos = prompt(\"Ingresa el segundo número\")console.log(typeof numeroUno)let resultado = parseInt(numeroUno) + parseInt(numeroDos)console.log(resultado)Operadores AritméticosEn programación y matemáticas, los operadores aritméticos son aquellos que manipulan los datos de tipo numérico, es decir, permiten la realización de operaciones matemáticas (sumas, restas, multiplicaciones, etc.).Adición: Suma dos números juntos.let resultado = 1 + 1console.log(resultado)Resta: Resta el numero de la derecha del de la izquierda.let resultado = 2 - 1console.log(resultado)Multiplicación: Multiplica dos números juntos.let resultado = 5 * 20console.log(resultado)División: Divide el número de la izquierda por el de la derecha.let resultado = 20 / 5console.log(resultado)Sobrante (también llamado módulo): Retorna el restante después de dividir el número de la izquierda en porciones enteras del de la derecha.let resultado = 8 % 3console.log(resultado)let resultado = 2 * (100 / 5) + 10console.log(resultado)Operadores RelacionalesLos operadores relacionales definidos por JavaScript son idénticos a los que definen las matemáticas: mayor que &gt;, menor que &lt;, mayor o igual &gt;=, menor o igual &lt;=, igual que === y distinto de !==.Mientras que al == se le considera igualdad débil o abstracta, al === se le conoce como igualdad estricta, fuerte o también se le llama identidad.La diferencia es que mientras que con el == antes de hacer la comparación se convierten ambos datos a un tipo común.Con === ninguno de estos valores se convierte de manera implícita antes de ser comparado. Por eso aunque el valor del dato sea igual, si el tipo de dato no coincide el operador responde que no son iguales.let resultado = 20 &gt; 10console.log(resultado)let resultado = 20 &lt; 10console.log(resultado)let resultado = 20 === 10console.log(resultado)let resultado = 20 == \"20\"console.log(resultado)let resultado = 20 !== 10console.log(resultado)let resultado = 10 != \"10\"console.log(resultado)Operadores lógicosLos operadores lógicos se usan para combinar dos valores Booleanos y devolver un resultado verdadero, falso o nulo. Los operadores lógicos también se denominan operadores Booleanos. &amp;&amp; : Si los dos son verdaderos devuelve verdadero. || : Con que uno sea verdadero devolverá verdadero. ! : Negaciónlet resultado = true &amp;&amp; trueconsole.log(resultado)let resultado = 20 &gt; 10 &amp;&amp; 10 &lt; 20console.log(resultado)let resultado = true &amp;&amp; true &amp;&amp; falseconsole.log(resultado)let resultado = true || falseconsole.log(resultado)let resultado = true || false || falseconsole.log(resultado)let resultado = !falseconsole.log(resultado)" }, { "title": "Aplicacion TODO con VUE + PINIA", "url": "/posts/vue-todo-pinia/", "categories": "vue", "tags": "vue, frontend, programacion", "date": "2022-07-24 00:00:00 -0600", "snippet": "PINIAPinia comenzó como un experimento para rediseñar cómo se vería una tienda para Vue con la API de composición alrededor de noviembre de 2019. Desde entonces, los principios iniciales siguen sie...", "content": "PINIAPinia comenzó como un experimento para rediseñar cómo se vería una tienda para Vue con la API de composición alrededor de noviembre de 2019. Desde entonces, los principios iniciales siguen siendo los mismos, pero Pinia funciona tanto para Vue 2 como para Vue 3 y no requiere que usted para usar la API de composición. La API es la misma para ambos excepto para la instalación y SSR, y estos documentos están dirigidos a Vue 3 con notas sobre Vue 2 siempre que sea necesario para que los usuarios de Vue 2 y Vue 3 puedan leerlos. Sitio oficialPINIA (VUEX 5)¿Por qué debería usar Pinia?Pinia es una biblioteca de tiendas para Vue, le permite compartir un estado entre componentes/páginas. Si está familiarizado con la API de composición, es posible que esté pensando que ya puede compartir un estado global con una exportación simple const state = reactive({}). Esto es cierto para las aplicaciones de una sola página, pero expone su aplicación a vulnerabilidades de seguridad si se representa en el lado del servidor. Pero incluso en aplicaciones pequeñas de una sola página, obtienes mucho del uso de Pinia: Soporte de herramientas de desarrollo Una línea de tiempo para rastrear acciones, mutaciones. Las tiendas aparecen en los componentes donde se utilizan Viaje en el tiempo y depuración más fácil Reemplazo de módulo caliente Modifica tus tiendas sin recargar tu página Mantener cualquier estado existente mientras se desarrolla Complementos: amplíe las funciones de Pinia con complementos Compatibilidad adecuada con TypeScript o autocompletado para usuarios de JS-Soporte de representación del lado del servidorCreacion de Proyecto Crear Proyecto con Vitenpm init vue@latestCLI de Vue Limpiar App.vue y borrar componente HelloWorld.vue&lt;template&gt;Hello World!&lt;/template&gt;&lt;script&gt;export default { name: 'App',}&lt;/script&gt; Agregar CDN de BootStrap y de Font Awesome a index.html Font Awesome BootStrap &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;link rel=\"icon\" href=\"/favicon.ico\" /&gt; &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css\" integrity=\"sha512-KfkfwYDsLkIlwQp6LFnl8zNdLGxu9YAA1QvwINks4PhcElQSvqcyVLLD9aMhXd13uQjoXtEKNosOWaZqXgel0g==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" /&gt; &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor\" crossorigin=\"anonymous\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt; &lt;title&gt;Vite App&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"app\"&gt;&lt;/div&gt; &lt;script type=\"module\" src=\"/src/main.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;Modificar App.vue&lt;template&gt; &lt;div class=\"container\"&gt; &lt;todo-app /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import TodoApp from './components/TodoApp.vue'export default { components: { TodoApp }, name: 'App',}&lt;/script&gt;&lt;style&gt;body { background-image: url(./assets/bg-desktop-dark.jpg); background-repeat: no-repeat; background-size: 100% 200px; background-color:#222222}.container { margin-top: 70px; max-width: 700px;}&lt;/style&gt;Modificar main.jsimport { createApp } from 'vue'import { createPinia } from 'pinia'import App from './App.vue'//import './assets/main.css'const app = createApp(App)app.use(createPinia())app.mount('#app')Crear Store Buscar dentro de src una carpeta llamada stores y dentro crear un archivo TodoStore.jsimport { defineStore } from 'pinia'export const useTodoStore = defineStore({ id: 'todoStore', state: () =&gt; ({ titulo: 'ToDo con PINIA', todoList: [], estado: 'all' }), getters: { todosGetter(state) { if (state.estado === 'all') { return state.todoList } if (state.estado === 'pendientes') { return state.todoList.filter(item =&gt; item.estado === false) } if (state.estado === 'completados') { return state.todoList.filter(item =&gt; item.estado === true) } }, estados(state) { return state.estado }, contarPendientes(state) { return state.todoList.filter(item =&gt; item.estado === false).length } }, actions: { agregarTodoAction(todo) { this.todoList.push(todo) }, borrarAction(id) { this.todoList = this.todosGetter.filter(item =&gt; item.id !== id) }, completadoAction(id) { this.todoList = this.todosGetter.map(item =&gt; { if (item.id === id) { item.estado = !item.estado } return item }) }, eliminarCompletadosAction() { this.todoList = this.todosGetter.filter(item =&gt; item.estado === false) }, filtroAction(valor) { this.estado = valor } }})Componente TodoApp.vue&lt;template&gt; &lt;h1&gt;{ { todoStore.titulo } }&lt;/h1&gt; &lt;todo-formulario /&gt; &lt;todo-listado /&gt;&lt;/template&gt;&lt;script&gt;import { useTodoStore } from '../stores/TodoStore'import TodoFormulario from './TodoFormulario.vue'import TodoListado from './TodoListado.vue'export default { components: { TodoFormulario, TodoListado }, setup() { const todoStore = useTodoStore() todoStore.$subscribe((mutation, state) =&gt; { localStorage.setItem('pinia', JSON.stringify(state.todoList)); }); if (localStorage.getItem('pinia')) { todoStore.todoList = JSON.parse(localStorage.getItem('pinia')); } return { todoStore } }}&lt;/script&gt;&lt;style&gt;h1 { color: #ffffff;}&lt;/style&gt;Componente TodoFormulario.vue&lt;template&gt; &lt;form @submit.prevent=\"agregarToDo\"&gt; &lt;input type=\"text\" class=\"form-control my-3\" placeholder=\"Ingresar ToDo\" v-model.trim=\"texto\"&gt; &lt;/form&gt;&lt;/template&gt;&lt;script&gt;import { ref } from '@vue/runtime-core'import { useTodoStore } from '../stores/TodoStore'export default { setup(){ const todoStore = useTodoStore() const texto = ref('') const agregarToDo = () =&gt; { if(texto.value === ''){ console.log('vacio') return } const todo = { descripcion: texto.value, estado: false, id: Date.now() } todoStore.agregarTodoAction(todo) texto.value = '' } return { agregarToDo, texto } }}&lt;/script&gt;&lt;style&gt;input[type=\"text\"] { font-family: sans-serif; font-size: 18px; font-weight: 400; line-height: 12px; color: #d8d8d8; border: none; flex-grow: 1; background-color: #25273d; box-sizing: border-box; height: 48px;}input[type=\"text\"]:focus { outline: none; color: #d8d8d8; background-color: #25273d;}&lt;/style&gt;Componente TodoListado.vue&lt;template&gt; &lt;ul class=\"list-group\"&gt; &lt;todo-item v-for=\"todo in todos\" :key=\"todo.id\" :todo=\"todo\" /&gt; &lt;li v-if=\"todos.length == 0\" class=\"list-group-item\"&gt; No hay ToDos &lt;/li&gt; &lt;todo-footer v-if=\"todos.length !== 0\" /&gt; &lt;/ul&gt; &lt;todo-filtro /&gt;&lt;/template&gt;&lt;script&gt;import { computed } from '@vue/runtime-core'import TodoItem from './TodoItem.vue'import TodoFooter from './TodoFooter.vue'import TodoFiltro from './TodoFiltro.vue'import { useTodoStore } from '../stores/TodoStore'export default { components: { TodoItem, TodoFooter, TodoFiltro }, setup() { const todoStore = useTodoStore() const todos = computed(() =&gt; todoStore.todosGetter) return { todos } }}&lt;/script&gt;&lt;style&gt;&lt;/style&gt;Componente TodoItem.vue&lt;template&gt; &lt;li class=\"list-group-item d-flex justify-content-between\"&gt; &lt;span role=\"button\" @click=\"completado(todo.id)\" :class=\"{'tachado': todo.estado}\"&gt; { { todo.descripcion } } &lt;/span&gt; &lt;span role=\"button\" @click=\"borrar(todo.id)\"&gt; &lt;i class=\"fas fa-times\"&gt;&lt;/i&gt; &lt;/span&gt; &lt;/li&gt;&lt;/template&gt;&lt;script&gt;import { useTodoStore } from '../stores/TodoStore'export default { props: { todo: { type: Object, required: true } }, setup(){ const todoStore = useTodoStore() const borrar = id =&gt; { todoStore.borrarAction(id) } const completado = id =&gt; { todoStore.completadoAction(id) } return { borrar, completado } }}&lt;/script&gt;&lt;style&gt;.tachado { text-decoration: line-through;}.list-group-item { min-width: 300px; width: 100%; background-color: #25273d; border-radius: 5px; color: #d8d8d8;}.fa-times { color: red;}&lt;/style&gt;Componente TodoFooter.vue Crear componente TodoFooter.vue&lt;template&gt; &lt;li class=\"list-group-item d-flex justify-content-between\"&gt; &lt;span&gt; { { contarPendientes } } Pendientes &lt;/span&gt; &lt;span role=\"button\" @click=\"eliminarCompletados\"&gt; Eliminar completados &lt;/span&gt; &lt;/li&gt; &lt;/template&gt;&lt;script&gt;import { computed } from '@vue/runtime-core'import { useTodoStore } from '../stores/TodoStore'export default { setup(){ const todoStore = useTodoStore() const contarPendientes = computed(() =&gt; todoStore.contarPendientes) const eliminarCompletados = () =&gt; { todoStore.eliminarCompletadosAction() } return { contarPendientes, eliminarCompletados } }}&lt;/script&gt;&lt;style&gt;&lt;/style&gt;Componente TodoFiltro.vue&lt;template&gt; &lt;div class=\"btn-group mt-3 d-flex\" role=\"group\" aria-label=\"Filtro\"&gt; &lt;button type=\"button\" class=\"btn\" @click=\"filtro('pendientes')\" :class=\"estado === 'pendientes' ? 'btn-success' : 'btn-dark'\" &gt;Pendientes&lt;/button&gt; &lt;button type=\"button\" class=\"btn\" @click=\"filtro('all')\" :class=\"estado === 'all' ? 'btn-success' : 'btn-dark'\" &gt;Todos&lt;/button&gt; &lt;button type=\"button\" class=\"btn\" @click=\"filtro('completados')\" :class=\"estado === 'completados' ? 'btn-success' : 'btn-dark'\" &gt;Completados&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import { computed, inject } from '@vue/runtime-core';import { useTodoStore } from '../stores/TodoStore'export default { setup(){ const todoStore = useTodoStore() const estado = computed(() =&gt; todoStore.estados) const filtro = (valor) =&gt; { todoStore.filtroAction(valor) } return { filtro, estado} }}&lt;/script&gt;&lt;style&gt;&lt;/style&gt; Verificar la app en el navegador Aplicacion de Vue en el navegador Finalmente ejecutamos el comando npm run build. La aplicacion quedara lista para ser distribuida en la carpeta dist del proyecto npm run dev" }, { "title": "Aplicacion TODO con VUE + VUEX", "url": "/posts/vue-todo-vuex/", "categories": "vue", "tags": "vue, frontend, programacion", "date": "2022-07-17 07:00:00 -0600", "snippet": "VUEX 4.0Vuex es un patrón de gestión de estado + biblioteca para aplicaciones Vue.js. Sirve como un almacén centralizado para todos los componentes de una aplicación, con reglas que garantizan que ...", "content": "VUEX 4.0Vuex es un patrón de gestión de estado + biblioteca para aplicaciones Vue.js. Sirve como un almacén centralizado para todos los componentes de una aplicación, con reglas que garantizan que el estado solo se puede modificar de forma predecible. Sitio oficialAl definir y separar los conceptos involucrados en la administración del estado y hacer cumplir las reglas que mantienen la independencia entre las vistas y los estados, le damos a nuestro código más estructura y mantenibilidad.Esta es la idea básica detrás de Vuex, inspirada en Flux, Redux y The Elm Architecture. A diferencia de los otros patrones, Vuex también es una implementación de biblioteca diseñada específicamente para Vue.js para aprovechar su sistema de reactividad granular para actualizaciones eficientes.Arquitectura de VUEX¿Cuándo debo usarlo?Vuex nos ayuda a lidiar con la administración de estado compartido con el costo de más conceptos y repeticiones. Es una compensación entre la productividad a corto y largo plazo.Si nunca ha construido un SPA a gran escala y salta directamente a Vuex, puede parecer detallado y desalentador. Eso es perfectamente normal: si su aplicación es simple, lo más probable es que esté bien sin Vuex. Un patrón de tienda simple puede ser todo lo que necesita. Pero si está construyendo un SPA de mediana a gran escala, es probable que se haya encontrado con situaciones que le hagan pensar en cómo manejar mejor el estado fuera de sus componentes de Vue, y Vuex será el próximo paso natural para usted.Conceptos principalesStateVuex utiliza un único árbol de estado, es decir, este único objeto contiene todo el estado de su aplicación y sirve como la “única fuente de verdad”. Esto también significa que, por lo general, solo tendrá una tienda para cada aplicación. Un solo árbol de estado facilita la ubicación de una parte específica del estado y nos permite tomar instantáneas del estado actual de la aplicación para fines de depuración.El árbol de estado único no entra en conflicto con la modularidad; en capítulos posteriores, discutiremos cómo dividir su estado y mutaciones en submódulos.Los datos que almacena en Vuex siguen las mismas reglas que los datos en una instancia de Vue, es decir, el objeto de estado debe ser sencillo.GetterUn getter es usado para obtener valores del estado de manera directa. Además este se vuelve a enviar cuando el estado cambia de valor. Es como un computed pero para Vuex.MutationsLa única forma de cambiar de estado en una tienda Vuex es cometiendo una mutación. Las mutaciones de Vuex son muy similares a los eventos: cada mutación tiene un tipo de cadena y un controlador. La función de controlador es donde realizamos modificaciones de estado reales, y recibirá el estado como primer argumentoActionsLos actions son métodos que realizan mutaciones, generalmente son usados para ejecutar operaciones asíncronas, de tal manera que cuando los datos llegan desde el API, el action se encarga de llamar a una mutación para que este cambie o actualice el state.Creacion de Proyecto Crear Proyecto con Vue CLI o UICLI de Vue Limpiar App.vue y borrar componente HelloWorld.vue&lt;template&gt;Hello World!&lt;/template&gt;&lt;script&gt;export default { name: 'App',}&lt;/script&gt; Agregar CDN de BootStrap y de Font Awesome a public/index.vue Font Awesome BootStrap &lt;!DOCTYPE html&gt;&lt;html lang=\"\"&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"&gt; &lt;link rel=\"icon\" href=\"&lt;%= BASE_URL %&gt;favicon.ico\"&gt; &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css\" integrity=\"sha512-KfkfwYDsLkIlwQp6LFnl8zNdLGxu9YAA1QvwINks4PhcElQSvqcyVLLD9aMhXd13uQjoXtEKNosOWaZqXgel0g==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" /&gt; &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor\" crossorigin=\"anonymous\"&gt; &lt;title&gt; &lt;%= htmlWebpackPlugin.options.title %&gt; &lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;noscript&gt; &lt;strong&gt;We're sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn't work properly without JavaScript enabled. Please enable it to continue.&lt;/strong&gt; &lt;/noscript&gt; &lt;div id=\"app\"&gt;&lt;/div&gt; &lt;!-- built files will be auto injected --&gt;&lt;/body&gt;&lt;/html&gt;## Modificar App.vue &lt;template&gt; &lt;div class=\"container\"&gt; &lt;todo-app /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import TodoApp from './components/TodoApp.vue'export default { beforeCreate() { this.$store.commit('iniciarStore'); }, components: { TodoApp }, name: 'App',}&lt;/script&gt;&lt;style&gt;body { font-family: Avenir, Helvetica, Arial, sans-serif; background-image: url(./assets/bg-desktop-dark.jpg); background-repeat: no-repeat; background-size: 100% 200px; background-color: #222222}.container { margin-top: 70px; max-width: 700px;}&lt;/style&gt;Modificar main.jsimport { createApp } from 'vue'import App from './App.vue'import store from './store'createApp(App).use(store).mount('#app')store.subscribe((mutation, state) =&gt; {\t// Store the state object as a JSON string\tlocalStorage.setItem('storeD', JSON.stringify(state.todos));})Crear Store Crear dentro de src una carpeta store y dentro de el un archivo index.jsimport { createStore } from 'vuex'export default createStore({ state: { //toda aquella data que sea de uso global todos: [], estado: 'all' }, getters: { // computed para la store contarPendientes(state) { return state.todos.filter(item =&gt; item.estado === false).length }, todos(state) { if (state.estado === 'all') { return state.todos } if (state.estado === 'pendientes') { return state.todos.filter(item =&gt; item.estado === false) } if (state.estado === 'completados') { return state.todos.filter(item =&gt; item.estado === true) } }, estados(state) { return state.estado }, }, mutations: { //modifican el state iniciarStore(state) { // Check if the ID exists if (localStorage.getItem('storeD')) { // Replace the state object with the stored item state.todos = JSON.parse(localStorage.getItem('storeD')) } }, agregarTodoMutation(state, todo) { state.todos.push(todo) }, borrarMutation(state, id) { state.todos = state.todos.filter(item =&gt; item.id !== id) }, completadoMutation(state, id) { state.todos = state.todos.map(item =&gt; { if (item.id === id) { item.estado = !item.estado } return item }) }, eliminarCompletadosMutation(state) { state.todos = state.todos.filter(item =&gt; item.estado === false) }, filtroMutation(state, valor) { state.estado = valor } }, actions: { //En lugar de mutar el state, actions ejecutan mutations. //Actions pueden contener operaciones asincronas arbitrarioas. /* agregarTodo({commit}, todo) { commit('agregarTodo', todo) } */ agregarTodoAction(context, todo) { context.commit('agregarTodoMutation', todo) }, borrarAction(context, id) { context.commit('borrarMutation', id) }, completadoAction(context, id) { context.commit('completadoMutation', id) }, eliminarCompletadosAction(context) { context.commit('eliminarCompletadosMutation') }, filtroAction(context, valor) { context.commit('filtroMutation', valor) } }, modules: { }})Componente TodoApp.vue&lt;template&gt; &lt;h1&gt;ToDos&lt;/h1&gt; &lt;todo-formulario /&gt; &lt;todo-listado /&gt;&lt;/template&gt;&lt;script&gt;import { computed, watchEffect } from 'vue'import { useStore } from 'vuex'import TodoFormulario from './TodoFormulario.vue'import TodoListado from './TodoListado.vue'export default { components: { TodoFormulario, TodoListado }, setup() { //const estado = computed(() =&gt; store.getters.estados) const store = useStore() /*if (localStorage.getItem('todosStore')) { store.state.todos = JSON.parse(localStorage.getItem('todosStore')) } watchEffect(() =&gt; { localStorage.setItem('todosStore', JSON.stringify(store.state.todos)) })*/ //return { estado } }}&lt;/script&gt;&lt;style&gt;h1 { font-family: Avenir, Helvetica, Arial, sans-serif; color: #ffffff;}&lt;/style&gt;Componente TodoFormulario.vue&lt;template&gt; &lt;form @submit.prevent=\"agregarToDo\"&gt; &lt;input type=\"text\" class=\"form-control my-3\" placeholder=\"Ingresar ToDo\" v-model.trim=\"texto\"&gt; &lt;/form&gt;&lt;/template&gt;&lt;script&gt;import { ref } from '@vue/runtime-core'import { useStore } from 'vuex'export default { setup() { const store = useStore() const texto = ref('') const agregarToDo = () =&gt; { if (texto.value === '') { console.log('vacio') return } const todo = { descripcion: texto.value, estado: false, id: Date.now() } //utilizando mutation //store.commit(\"agregarTodoMutation\", todo) //utilizando action store.dispatch(\"agregarTodoAction\", todo) texto.value = '' } return { agregarToDo, texto } }}&lt;/script&gt;&lt;style&gt;input[type=\"text\"] { font-family: Avenir, Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400; line-height: 12px; color: #d8d8d8; border: none; flex-grow: 1; background-color: #25273d; box-sizing: border-box; height: 48px;}input[type=\"text\"]:focus { outline: none; color: #d8d8d8; background-color: #25273d;}&lt;/style&gt;Componente TodoListado.vue&lt;template&gt; &lt;ul class=\"list-group\"&gt; &lt;todo-item v-for=\"todo in todos\" :key=\"todo.id\" :todo=\"todo\" /&gt; &lt;li v-if=\"todos.length == 0\" class=\"list-group-item\"&gt; No hay ToDos &lt;/li&gt; &lt;todo-footer v-if=\"todos.length\" /&gt; &lt;/ul&gt; &lt;todo-filtro /&gt;&lt;/template&gt;&lt;script&gt;import { computed, inject, provide, ref } from '@vue/runtime-core'import { useStore } from 'vuex'import TodoItem from './TodoItem.vue'import TodoFooter from './TodoFooter.vue'import TodoFiltro from './TodoFiltro.vue'export default { components: { TodoItem, TodoFooter, TodoFiltro }, setup() { const store = useStore() const todos = computed(() =&gt; store.getters.todos) return { todos } }}&lt;/script&gt;&lt;style&gt;.list-group-item { font-family: Avenir, Helvetica, Arial, sans-serif;}&lt;/style&gt;Componente TodoItem.vue&lt;template&gt; &lt;li class=\"list-group-item d-flex justify-content-between\"&gt; &lt;span role=\"button\" @click=\"completado(todo.id)\" :class=\"{ 'tachado': todo.estado }\"&gt; &lt;/span&gt; &lt;span role=\"button\" @click=\"borrar(todo.id)\"&gt; &lt;i class=\"fas fa-times\"&gt;&lt;/i&gt; &lt;/span&gt; &lt;/li&gt;&lt;/template&gt;&lt;script&gt;import { useStore } from 'vuex'export default { props: { todo: { type: Object, required: true } }, setup() { const store = useStore() const borrar = id =&gt; { store.dispatch(\"borrarAction\", id) } const completado = id =&gt; { store.dispatch(\"completadoAction\", id) } return { borrar, completado } }}&lt;/script&gt;&lt;style&gt;.tachado { text-decoration: line-through;}.list-group-item { min-width: 300px; width: 100%; background-color: #25273d; border-radius: 5px; color: #d8d8d8;}.fa-times { color: red;}&lt;/style&gt;Componente TodoFooter.vue Crear componente TodoFooter.vue&lt;template&gt; &lt;li class=\"list-group-item d-flex justify-content-between\"&gt; &lt;span role=\"button\"&gt; Pendientes &lt;/span&gt; &lt;span role=\"button\" @click=\"eliminarCompletados\"&gt; Eliminar completados &lt;/span&gt; &lt;/li&gt;&lt;/template&gt;&lt;script&gt;import { computed } from '@vue/runtime-core'import { useStore } from 'vuex'export default { setup() { const store = useStore() const contarPendientes = computed(() =&gt; store.getters.contarPendientes) const eliminarCompletados = () =&gt; { store.dispatch(\"eliminarCompletadosAction\") } return { contarPendientes, eliminarCompletados } }}&lt;/script&gt;&lt;style&gt;&lt;/style&gt;Componente TodoFiltro.vue Se crea un nuevo componente llamado TodoFiltro.vue&lt;template&gt; &lt;div class=\"btn-group mt-3 d-flex\" role=\"group\" aria-label=\"Filtro\"&gt; &lt;button type=\"button\" class=\"btn\" @click=\"filtro('pendientes')\" :class=\"estado === 'pendientes' ? 'btn-success' : 'btn-dark'\" &gt;Pendientes&lt;/button&gt; &lt;button type=\"button\" class=\"btn\" @click=\"filtro('all')\" :class=\"estado === 'all' ? 'btn-success' : 'btn-dark'\" &gt;Todos&lt;/button&gt; &lt;button type=\"button\" class=\"btn\" @click=\"filtro('completados')\" :class=\"estado === 'completados' ? 'btn-success' : 'btn-dark'\" &gt;Completados&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import store from '@/store';import { computed } from '@vue/runtime-core';export default { setup() { //const estado = computed(() =&gt; store.state.estado) const estado = computed(() =&gt; store.getters.estados) const filtro = (valor) =&gt; { store.dispatch(\"filtroAction\", valor) } return { filtro, estado }; },};&lt;/script&gt;&lt;style&gt;&lt;/style&gt; Verificar la app en el navegador Aplicacion de Vue en el navegador Finalmente ejecutamos el comando npm run build. La aplicacion quedara lista para ser distribuida en la carpeta dist del proyecto npm run build" }, { "title": "Aplicacion TODO con VUE", "url": "/posts/vue-todo-composition-api/", "categories": "vue", "tags": "vue, frontend, programacion", "date": "2022-07-08 19:00:00 -0600", "snippet": "Plugins y extensiones recomendadas Instalar plugins y extensiones de Visual Studio Code Vue.js devtools Split HTML Attributes (Vue, React, Angular) Vetur Vue Language Featu...", "content": "Plugins y extensiones recomendadas Instalar plugins y extensiones de Visual Studio Code Vue.js devtools Split HTML Attributes (Vue, React, Angular) Vetur Vue Language Features (Volar) Vue VSCode Snippets vscode-pets 🐾 Creacion de Proyecto Crear Proyecto con Vue CLI o UI CLI de VueCLI de Vue Limpiar App.vue y borrar componente HelloWorld.vue&lt;template&gt;Hello World!&lt;/template&gt;&lt;script&gt;export default { name: 'App',}&lt;/script&gt; Agregar CDN de BootStrap y de Font Awesome a public/index.vue Font Awesome BootStrap &lt;!DOCTYPE html&gt;&lt;html lang=\"\"&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"&gt; &lt;link rel=\"icon\" href=\"&lt;%= BASE_URL %&gt;favicon.ico\"&gt; &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css\" integrity=\"sha512-KfkfwYDsLkIlwQp6LFnl8zNdLGxu9YAA1QvwINks4PhcElQSvqcyVLLD9aMhXd13uQjoXtEKNosOWaZqXgel0g==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" /&gt; &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor\" crossorigin=\"anonymous\"&gt; &lt;title&gt; &lt;%= htmlWebpackPlugin.options.title %&gt; &lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;noscript&gt; &lt;strong&gt;We're sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn't work properly without JavaScript enabled. Please enable it to continue.&lt;/strong&gt; &lt;/noscript&gt; &lt;div id=\"app\"&gt;&lt;/div&gt; &lt;!-- built files will be auto injected --&gt;&lt;/body&gt;&lt;/html&gt;Componente TodoApp.vue Crear componentes TodoApp.vue (componente principal)&lt;template&gt; &lt;h1&gt;ToDos&lt;/h1&gt;&lt;/template&gt;&lt;script&gt;export default {}&lt;/script&gt; Llamar componente TodoApp.vue a App.vue. Agregar div con class container&lt;template&gt;&lt;div class=\"container\"&gt; &lt;todo-app /&gt;&lt;/div&gt; &lt;/template&gt;&lt;script&gt;import TodoApp from './components/TodoApp.vue'export default { components: { TodoApp }, name: 'App',}&lt;/script&gt; Revisar App en navegadorAplicacion de Vue en el navegadorComponente TodoFormulario.vue Crear Componente TodoFormulario.vue&lt;template&gt; &lt;form&gt; &lt;input type=\"text\" class=\"form-control my-3\" placeholder=\"Ingresar ToDo\"&gt; &lt;/form&gt;&lt;/template&gt;&lt;script&gt;export default {}&lt;/script&gt; Importar componente TodFormulario.vue a Todoapp-vue&lt;template&gt; &lt;h1&gt;ToDos&lt;/h1&gt; &lt;todo-formulario /&gt;&lt;/template&gt;&lt;script&gt;import TodoFormulario from './TodoFormulario.vue'export default { components: { TodoFormulario },}&lt;/script&gt; Revisar App en el navegadorAplicacion de Vue en el navegador Utilizando composition API crearemos un arreglo en el componente padre TodoApp que podra ser accedido por sus componentes hijos. Creando una constante ref y enviandola a traves de un provide.Vue RefVue Provide-Inject&lt;template&gt; &lt;h1&gt;ToDos&lt;/h1&gt; &lt;todo-formulario /&gt;&lt;/template&gt;&lt;script&gt;import { provide, ref } from 'vue'import TodoFormulario from './TodoFormulario.vue'export default { components: { TodoFormulario }, setup(){ const todos = ref([]) provide('todos', todos) }}&lt;/script&gt; Se configura TodoFormulario.vue para recibir data del padre a traves de inject&lt;template&gt; &lt;form&gt; &lt;input type=\"text\" class=\"form-control my-3\" placeholder=\"Ingresar ToDo\"&gt; &lt;/form&gt;&lt;/template&gt;&lt;script&gt;import { inject } from '@vue/runtime-core'export default { setup(){ const todos = inject('todos') console.log(todos.value) }}&lt;/script&gt; Inspeccionar consola en el navegador y ver tambien Vuetools Crear funcion agregarToDo en TodoFormulario.vue y vincularlo con el template, verificar funcionamiento en consola del navegador &lt;template&gt; &lt;form @submit.prevent=\"agregarToDo\"&gt; &lt;input type=\"text\" class=\"form-control my-3\" placeholder=\"Ingresar ToDo\"&gt; &lt;/form&gt;&lt;/template&gt;&lt;script&gt;import { inject } from '@vue/runtime-core'export default { setup(){ const todos = inject('todos') const agregarToDo = () =&gt; { console.log('agregaste un TODO') } return{agregarToDo} }}&lt;/script&gt; Agregar en TodoFormulario.vue un v-model para enviar datos del input a la funcion agregarToDo&lt;template&gt; &lt;form @submit.prevent=\"agregarToDo\"&gt; &lt;input type=\"text\" class=\"form-control my-3\" placeholder=\"Ingresar ToDo\" v-model=\"texto\"&gt; &lt;/form&gt;&lt;/template&gt;&lt;script&gt;import { inject, ref } from '@vue/runtime-core'export default { setup(){ const todos = inject('todos') const texto = ref('') const agregarToDo = () =&gt; { console.log(texto.value) } return{agregarToDo, texto} }}&lt;/script&gt; Construir objeto todo (singular) que contenga los datos a utilizar: id, texto, estado.&lt;template&gt; &lt;form @submit.prevent=\"agregarToDo\"&gt; &lt;input type=\"text\" class=\"form-control my-3\" placeholder=\"Ingresar ToDo\" v-model=\"texto\"&gt; &lt;/form&gt;&lt;/template&gt;&lt;script&gt;import { inject, ref } from '@vue/runtime-core'export default { setup(){ const todos = inject('todos') const texto = ref('') const agregarToDo = () =&gt; { const todo = { descripcion: texto.value, estado: false, id: Date.now() } console.log(todo) } return{agregarToDo, texto} }}&lt;/script&gt; Se crean validaciones para texto, vacio y tambien se limpia el texto del formulario&lt;template&gt; &lt;form @submit.prevent=\"agregarToDo\"&gt; &lt;input type=\"text\" class=\"form-control my-3\" placeholder=\"Ingresar ToDo\" v-model.trim=\"texto\"&gt; &lt;/form&gt;&lt;/template&gt;&lt;script&gt;import { inject, ref } from '@vue/runtime-core'export default { setup(){ const todos = inject('todos') const texto = ref('') const agregarToDo = () =&gt; { if(texto.value === ''){ console.log('vacio') return } const todo = { descripcion: texto.value, estado: false, id: Date.now() } texto.value = '' console.log(todo) } return{agregarToDo, texto} }}&lt;/script&gt; A traves del metodo push empujamos o enviamos el objeto todo al arreglo todos que se almacenara en el componente padre TodoApp.vue&lt;template&gt; &lt;form @submit.prevent=\"agregarToDo\"&gt; &lt;input type=\"text\" class=\"form-control my-3\" placeholder=\"Ingresar ToDo\" v-model.trim=\"texto\"&gt; &lt;/form&gt;&lt;/template&gt;&lt;script&gt;import { inject, ref } from '@vue/runtime-core'export default { setup(){ const todos = inject('todos') const texto = ref('') const agregarToDo = () =&gt; { if(texto.value === ''){ console.log('vacio') return } const todo = { descripcion: texto.value, estado: false, id: Date.now() } todos.value.push(todo) console.log(todos.value) texto.value = '' //console.log(todo) } return{agregarToDo, texto} }}&lt;/script&gt; Verificar arreglo en la consola del navegador Agregar watchEffect a TodoApp.vue para esperar el retorno de los todo individuales. Comentar console.log(todo.value) de TodoFormulario.vue&lt;template&gt; &lt;h1&gt;ToDos&lt;/h1&gt; &lt;todo-formulario /&gt;&lt;/template&gt;&lt;script&gt;import { provide, ref, watchEffect } from 'vue'import TodoFormulario from './TodoFormulario.vue'export default { components: { TodoFormulario }, setup(){ const todos = ref([]) provide('todos', todos) watchEffect(() =&gt; { console.log(todos.value.length) console.log(todos.value) }) }}&lt;/script&gt;Componente TodoListado.vue Crear componente TodoListado.vue, que mostrara el contenido del arreglo con los todos e importarlo a TodoApp.vue&lt;template&gt; Listado de TODOS&lt;/template&gt;&lt;script&gt;export default {}&lt;/script&gt;&lt;template&gt; &lt;h1&gt;ToDos&lt;/h1&gt; &lt;todo-formulario /&gt; &lt;todo-listado /&gt;&lt;/template&gt;&lt;script&gt;import { provide, ref, watchEffect } from 'vue'import TodoFormulario from './TodoFormulario.vue'import TodoListado from './TodoListado.vue'export default { components: { TodoFormulario, TodoListado }, setup(){ const todos = ref([]) provide('todos', todos) watchEffect(() =&gt; { console.log(todos.value.length) console.log(todos.value) }) }}&lt;/script&gt; Verificar en el navegador con la consolaComponente TodoItem.vue Modificar TodoListado.vue para contener un list group como el ejemplo de List group BootStrap, donde el ul quedara en TodoListado.vue y el li en un nuevo componente llamado TodoItem.vue (el cual estara dentro de TodoListado)&lt;template&gt; &lt;ul class=\"list-group\"&gt; &lt;todo-item /&gt; &lt;/ul&gt;&lt;/template&gt;&lt;script&gt;import TodoItem from './TodoItem.vue'export default { components: { TodoItem },}&lt;/script&gt;&lt;template&gt; &lt;li class=\"list-group-item\"&gt;Cras justo odio&lt;/li&gt;&lt;/template&gt;&lt;script&gt;export default {}&lt;/script&gt; Recorrer el arreglo todo disponible en el componente padre con un v-for dentro del componente TodoListado.vue. Se manda a traves de un prop el valor del todo a TodoItem.vue. Vue props&lt;template&gt; &lt;ul class=\"list-group\"&gt; &lt;todo-item v-for=\"todo in todos\" :key=\"todo.id\" :todo=\"todo\" /&gt; &lt;/ul&gt;&lt;/template&gt;&lt;script&gt;import { inject } from '@vue/runtime-core'import TodoItem from './TodoItem.vue'export default { components: { TodoItem }, setup(){ const todos = inject('todos') return {todos} }}&lt;/script&gt; Se modifica TodoItem.vue para recibir el prop, agregando estilos para cada item en el listado&lt;template&gt; &lt;li class=\"list-group-item d-flex justify-content-between\"&gt; &lt;span role=\"button\"&gt; { { todo.descripcion } } &lt;/span&gt; &lt;span role=\"button\"&gt; &lt;i class=\"fas fa-times\"&gt;&lt;/i&gt; &lt;/span&gt; &lt;/li&gt;&lt;/template&gt;&lt;script&gt;export default { props: { todo: { type: Object, required: true } }}&lt;/script&gt; Verificar la app en el navegador Aplicacion de Vue en el navegador Agregar funcionabilidad de borrar item utilizar el metodo filter. Filter JS &lt;template&gt; &lt;li class=\"list-group-item d-flex justify-content-between\"&gt; &lt;span role=\"button\"&gt; { { todo.descripcion } } &lt;/span&gt; &lt;span role=\"button\" @click=\"borrar(todo.id)\"&gt; &lt;i class=\"fas fa-times\"&gt;&lt;/i&gt; &lt;/span&gt; &lt;/li&gt;&lt;/template&gt;&lt;script&gt;import { inject } from '@vue/runtime-core'export default { props: { todo: { type: Object, required: true } }, setup() { const todos = inject('todos') const borrar = id =&gt; { todos.value = todos.value.filter(item =&gt; item.id !== id) } return {borrar} }}&lt;/script&gt; Agregar funcionalidad de cambiar estado completado, tachado es true, sin completar es false. Podemos utilizar el metodo map. Map JS&lt;template&gt; &lt;li class=\"list-group-item d-flex justify-content-between\"&gt; &lt;span role=\"button\" @click=\"completado(todo.id)\"&gt; { { todo.descripcion } } &lt;/span&gt; &lt;span role=\"button\" @click=\"borrar(todo.id)\"&gt; &lt;i class=\"fas fa-times\"&gt;&lt;/i&gt; &lt;/span&gt; &lt;/li&gt;&lt;/template&gt;&lt;script&gt;import { inject } from '@vue/runtime-core'export default { props: { todo: { type: Object, required: true } }, setup() { const todos = inject('todos') const borrar = id =&gt; { todos.value = todos.value.filter(item =&gt; item.id !== id) } const completado = id =&gt; { todos.value = todos.value.map(item =&gt; { if(item.id === id){ item.estado = true } return item }) } return { borrar, completado } }}&lt;/script&gt; Agregamos que al cambiar estado tache el texto del item. Ademas modificamos para que cambie entre estado al dar click nuevamente al item.&lt;template&gt; &lt;li class=\"list-group-item d-flex justify-content-between\"&gt; &lt;span role=\"button\" @click=\"completado(todo.id)\" :class=\"{ 'tachado': todo.estado }\"&gt; { { todo.descripcion } } &lt;/span&gt; &lt;span role=\"button\" @click=\"borrar(todo.id)\"&gt; &lt;i class=\"fas fa-times\"&gt;&lt;/i&gt; &lt;/span&gt; &lt;/li&gt;&lt;/template&gt;&lt;script&gt;import { inject } from '@vue/runtime-core'export default { props: { todo: { type: Object, required: true } }, setup() { const todos = inject('todos') const borrar = id =&gt; { todos.value = todos.value.filter(item =&gt; item.id !== id) } const completado = id =&gt; { todos.value = todos.value.map(item =&gt; { if (item.id === id) { /*if (item.estado == false) { item.estado = true } else { item.estado = false }*/ item.estado = !item.estado } return item }) } return { borrar, completado } }}&lt;/script&gt;&lt;style&gt;.tachado { text-decoration: line-through;}&lt;/style&gt;Componente TodoFooter.vue Crear componente TodoFooter.vue&lt;template&gt; &lt;li class=\"list-group-item d-flex justify-content-between\"&gt; &lt;span role=\"button\"&gt; ## Pendientes &lt;/span&gt; &lt;span role=\"button\"&gt; Eliminar completados &lt;/span&gt; &lt;/li&gt;&lt;/template&gt;&lt;script&gt;export default {}&lt;/script&gt; Agregar el componente TodoFooter.vue al componente TodoListado.vue&lt;template&gt; &lt;ul class=\"list-group\"&gt; &lt;todo-item v-for=\"todo in todos\" :key=\"todo.id\" :todo=\"todo\" /&gt; &lt;todo-footer /&gt; &lt;/ul&gt;&lt;/template&gt;&lt;script&gt;import { inject } from '@vue/runtime-core'import TodoItem from './TodoItem.vue'import TodoFooter from './TodoFooter.vue'export default { components: { TodoItem, TodoFooter }, setup(){ const todos = inject('todos') return {todos} }}&lt;/script&gt; Verificar la app en el navegador Aplicacion de Vue en el navegador Agregar funcionalidad para que el footer sea dinamico. Debe mostrarse cuando hay items en la lista y ocultarse cuando no existan. &lt;template&gt; &lt;ul class=\"list-group\"&gt; &lt;todo-item v-for=\"todo in todos\" :key=\"todo.id\" :todo=\"todo\" /&gt; &lt;li v-if=\"todos.length == 0\" class=\"list-group-item\"&gt; No hay ToDos &lt;/li&gt; &lt;todo-footer v-if=\"todos.length !== 0\" /&gt; &lt;/ul&gt;&lt;/template&gt;&lt;script&gt;import { inject } from '@vue/runtime-core'import TodoItem from './TodoItem.vue'import TodoFooter from './TodoFooter.vue'export default { components: { TodoItem, TodoFooter }, setup() { const todos = inject('todos') return { todos } }}&lt;/script&gt; Se implementa en TodoFooter.vue un funcion de tipo computed para el conteo de items pendientes (estado == false)&lt;template&gt; &lt;li class=\"list-group-item d-flex justify-content-between\"&gt; &lt;span role=\"button\"&gt; { { contarPendientes } } Pendientes &lt;/span&gt; &lt;span role=\"button\"&gt; Eliminar completados &lt;/span&gt; &lt;/li&gt;&lt;/template&gt;&lt;script&gt;import { computed, inject } from '@vue/runtime-core'export default { setup(){ const todos = inject('todos') const contarPendientes = computed(() =&gt; { return todos.value.filter(item =&gt; item.estado === false).length }) return { contarPendientes } }}&lt;/script&gt; Se implementa en TodoFooter.vue un funcion para Eliminar items completados (estado == true) pero al utilizar filter le solicitamos crear un nuevo array solo con los elementos pendientes o que esten en false.&lt;template&gt; &lt;li class=\"list-group-item d-flex justify-content-between\"&gt; &lt;span role=\"button\"&gt; { { contarPendientes } } Pendientes &lt;/span&gt; &lt;span role=\"button\" @click=\"eliminarCompletados\"&gt; Eliminar completados &lt;/span&gt; &lt;/li&gt;&lt;/template&gt;&lt;script&gt;import { computed, inject } from '@vue/runtime-core'export default { setup() { const todos = inject('todos') const contarPendientes = computed(() =&gt; { return todos.value.filter(item =&gt; item.estado === false).length }) const eliminarCompletados = () =&gt; { todos.value = todos.value.filter(item =&gt; item.estado === false) } return { contarPendientes, eliminarCompletados } }}&lt;/script&gt;Componente TodoFiltro.vue Se crea un nuevo componente llamado TodoFiltro.vue&lt;template&gt; &lt;div class=\"btn-group mt-3 d-flex\" role=\"group\" aria-label=\"Filtro\"&gt; &lt;button type=\"button\" class=\"btn\"&gt;Pendientes&lt;/button&gt; &lt;button type=\"button\" class=\"btn\"&gt;Todos&lt;/button&gt; &lt;button type=\"button\" class=\"btn\"&gt;Completados&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {};&lt;/script&gt; Este nuevo componente se utilizara dentro de TodoListado.vue&lt;template&gt; &lt;ul class=\"list-group\"&gt; &lt;todo-item v-for=\"todo in todos\" :key=\"todo.id\" :todo=\"todo\" /&gt; &lt;li v-if=\"todos.length == 0\" class=\"list-group-item\"&gt; No hay ToDos &lt;/li&gt; &lt;todo-footer v-if=\"todos.length !== 0\" /&gt; &lt;/ul&gt; &lt;todo-filtro /&gt;&lt;/template&gt;&lt;script&gt;import { inject } from '@vue/runtime-core'import TodoItem from './TodoItem.vue'import TodoFooter from './TodoFooter.vue'import TodoFiltro from './TodoFiltro.vue'export default { components: { TodoItem, TodoFooter, TodoFiltro }, setup() { const todos = inject('todos') return { todos } }}&lt;/script&gt; Verificar la app en el navegador Aplicacion de Vue en el navegador En el componente TodoListado.vue creamos una constante que enviaremos por ref al componente TodoFiltro. Dicha referencia nos servira para recorrer el arreglo y poder enviar variables de estado al filtro &lt;template&gt; &lt;ul class=\"list-group\"&gt; &lt;todo-item v-for=\"todo in todos\" :key=\"todo.id\" :todo=\"todo\" /&gt; &lt;li v-if=\"todos.length == 0\" class=\"list-group-item\"&gt; No hay ToDos &lt;/li&gt; &lt;todo-footer v-if=\"todos.length\" /&gt; &lt;/ul&gt; &lt;todo-filtro /&gt;&lt;/template&gt;&lt;script&gt;import { computed, inject, provide, ref } from '@vue/runtime-core'import TodoItem from './TodoItem.vue'import TodoFooter from './TodoFooter.vue'import TodoFiltro from './TodoFiltro.vue'export default { components: { TodoItem, TodoFooter, TodoFiltro }, setup() { const todosApp = inject('todos') const estado = ref('all') const todos = computed(() =&gt; { if(estado.value === 'all'){ return todosApp.value } if(estado.value === 'pendientes'){ return todosApp.value.filter(item =&gt; item.estado === false) } if(estado.value === 'completados'){ return todosApp.value.filter(item =&gt; item.estado === true) } }) provide('estado', estado) return { todos } }}&lt;/script&gt; Modificamos el componente TodoFiltro para que pueda acceder a los estados y poder filtrar adecuadamente con los botones de filtro&lt;template&gt; &lt;div class=\"btn-group mt-3 d-flex\" role=\"group\" aria-label=\"Filtro\"&gt; &lt;button type=\"button\" class=\"btn\" @click=\"filtro('pendientes')\" :class=\"estado === 'pendientes' ? 'btn-success' : 'btn-dark'\" &gt;Pendientes&lt;/button&gt; &lt;button type=\"button\" class=\"btn\" @click=\"filtro('all')\" :class=\"estado === 'all' ? 'btn-success' : 'btn-dark'\" &gt;Todos&lt;/button&gt; &lt;button type=\"button\" class=\"btn\" @click=\"filtro('completados')\" :class=\"estado === 'completados' ? 'btn-success' : 'btn-dark'\" &gt;Completados&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import { inject } from \"vue\";export default { setup() { const estado = inject(\"estado\"); const filtro = (valor) =&gt; { estado.value = valor; }; return { filtro, estado }; },};&lt;/script&gt; Finalmente utilizamos LocalStorage para guardar la data en el navegador. Pro lo que editamos el componente TodoApp.vue&lt;template&gt; &lt;h1&gt;ToDos&lt;/h1&gt; &lt;todo-formulario /&gt; &lt;todo-listado /&gt;&lt;/template&gt;&lt;script&gt;import { provide, ref, watchEffect } from 'vue'import TodoFormulario from './TodoFormulario.vue'import TodoListado from './TodoListado.vue'export default { components: { TodoFormulario, TodoListado }, setup() { const todos = ref([]) provide('todos', todos) if (localStorage.getItem('todos')) { todos.value = JSON.parse(localStorage.getItem('todos')) } watchEffect(() =&gt; { localStorage.setItem('todos', JSON.stringify(todos.value)) //console.log(todos.value.length) //console.log(todos.value) }) }}&lt;/script&gt;Estilos CSS App.vue CSS&lt;style&gt;body { background-image: url(./assets/bg-desktop-dark.jpg); background-repeat: no-repeat; background-size: 100% 200px; background-color: #222222}.container { margin-top: 70px; max-width: 700px;}&lt;/style&gt; TodoApp.vue CSS&lt;style&gt;h1 { color: #ffffff;}&lt;/style&gt; TodoFormulario.vue CSS&lt;style&gt;input[type=\"text\"] { font-family: sans-serif; font-size: 18px; font-weight: 400; line-height: 12px; color: #d8d8d8; border: none; flex-grow: 1; background-color: #25273d; box-sizing: border-box; height: 48px;}input[type=\"text\"]:focus { outline: none; color: #d8d8d8; background-color: #25273d;}&lt;/style&gt; TodoItem.vue CSS&lt;style&gt;.tachado { text-decoration: line-through;}.list-group-item { min-width: 300px; width: 100%; background-color: #25273d; border-radius: 5px; color: #d8d8d8;}.fa-times { color: red;}&lt;/style&gt; Verificar la app en el navegador Aplicacion de Vue en el navegador Finalmente ejecutamos el comando npm run build. La aplicacion quedara lista para ser distribuida en la carpeta dist del proyecto npm run build" }, { "title": "VUE CLI/UI Creación de Proyectos", "url": "/posts/vue-cli-ui/", "categories": "vue", "tags": "vue, frontend, programacion", "date": "2022-07-04 16:00:00 -0600", "snippet": "Creacion con CLIInstalar NPM y NODE a traves de nodejs.org el instalador incluye la ultima version estable de NPM, versiones disponibles para Windows, macOs y Linux. Instalar la linea de comandos ...", "content": "Creacion con CLIInstalar NPM y NODE a traves de nodejs.org el instalador incluye la ultima version estable de NPM, versiones disponibles para Windows, macOs y Linux. Instalar la linea de comandos (CLI) de Vue, preferiblemente de manera global.npm install -g @vue/cli Ubicar una carpeta donde se quiera crear el proyecto y tilizar el siguiente comandovue create vue-proyecto-cli Apareceran las siguientes opciones que nos permitiran elegir un preset pre-configurado para el proyecto.Menu de Opciones Vue CLI 1 Si se quiere personalizar la configuracion inicial del proyecto seleccionar Manually select features y seleccionar usando el menu.Menu de Opciones manual Vue CLI Ejecutar el proyecto con los iguientes comandos. cd vue-proyecto-cli npm run serve El ultimo comando creara un servidor para probar nuestra aplicacion de VueServidor ejecutandoseAplicacion de Vue en el navegadorCreacion con UI El siguiente comando nos permite crear un proyecto a traves de una interfaz grafica, la cual cargara en el navegador.vue ui En la pantalla del navegador se selecciona Create a new project hereMenu de Opciones Vue UI Se escribe el nombre del proyectoMenu de Opciones Vue UI 2 Se selecciona un preset preconfigurado o se selecciona la opcion de configuracion ManualMenu de Opciones Vue UI 3 Seleccionar las opciones a utilizarMenu de Opciones Vue UI 4 Seleccionar configuracionMenu de Opciones Vue UI 5 Al finalizar se muestra la pantalla de dashboard del proyecto, puede instalarse plugins y ejecutar tareas con el menu de la izquierda.Menu de Opciones Vue UI 6 Para ejecutar el proyecto, es necesario usar la opcion de tareas, y se selecciona la tarea serve, la cual ejecuta un servidor despues de presionar el boton run task .Menu de Opciones Vue UI 7Aplicacion de Vue en el navegador" }, { "title": "GitHub Actions", "url": "/posts/github-actions/", "categories": "CI/CD", "tags": "github, CI/CD, calidad de software, programacion", "date": "2022-06-10 19:00:00 -0600", "snippet": "ResumenGitHub Actions es una plataforma de integración y despliegue continuos (IC/DC) que te permite automatizar tu mapa de compilación, pruebas y despliegue. Puedes crear flujos de trabajo y crear...", "content": "ResumenGitHub Actions es una plataforma de integración y despliegue continuos (IC/DC) que te permite automatizar tu mapa de compilación, pruebas y despliegue. Puedes crear flujos de trabajo y crear y probar cada solicitud de cambios en tu repositorio o desplegar solicitudes de cambios fusionadas a producción.GitHub Actions va más allá de solo DevOps y te permite ejecutar flujos de trabajo cuando otros eventos suceden en tu repositorio. Por ejemplo, puedes ejecutar un flujo de trabajo para que agregue automáticamente las etiquetas adecuadas cada que alguien cree una propuesta nueva en tu repositorio.GitHub proporciona máquinas virtuales Linux, Windows y macOS para que ejecutes tus flujos de trabajo o puedes hospedar tus propios ejecutores auto-hospedados en tu propio centro de datos o infraestructura en la nube.Los componentes de las GitHub ActionsPuedes configurar un flujo de trabajo de GitHub Actions para que se active cuando ocurre un evento en tu repositorio, tal como la apertura de una solicitud de cambios o la creación de una propuesta. Tu flujo de trabajo contiene uno o más jobs, los cuales pueden ejecutarse en orden secuencial o en paralelo. Cada job se ejecutará dentro del ejecutor de su propia máquina virtual o dentro de un contenedor y tendrá uno o más pasos que ya sea puedan ejecutar un script que definas o que ejecuten una acción, la cual es una extensión reutilizable que puede simplificar tu flujo de trabajo.Componentes de GituHub ActionsFlujos de trabajoUn flujo de trabajo es un proceso automatizado configurable que ejecutará uno o más jobs. Los flujos de trabajo se definen mediante un archivo de YAML que se verifica en tu repositorio y se ejecutará cuando lo active un evento dentro de este o puede activarse manualmente o en una programación definida.Los flujos de trabajo se definen en el directorio .github/workflows en un repositorio, y un repositorio puede tener varios flujos de trabajo, cada uno de los cuales puede realizar un conjunto diferente de tareas. Por ejemplo, puedes tener un flujo de trabajo para crear y probar las solicitudes de cambio, otro para desplegar tu aplicación cada que se cree un lanzamiento y todavía otro más que añadir una etiqueta cada que alguien abra una propuesta nueva.EventosUn evento es una actividad específica en un repositorio, la cual activa una ejecución de flujo de trabajo. Por ejemplo, la actividad puede originarse desde GitHub cuando alguien crea una solicitud de cambios, abre una propuesta o sube una confirmación a un repositorio. También puedes activar una ejecución de flujo de trabajo de acuerdo con una programación si la publicas en una API de REST o si lo haces manualmente.Para encontrar una lista de eventos completa que puede utilizarse para activar flujos de trabajo, consulta los Eventos que activan flujos de trabajo.JobsUn job es un conjunto de pasos en un flujo de trabajo, los cuales se ejecutan en el mismo ejecutor. Cada paso es ya sea un script de shell o una acción que se ejecutarán. Los pasos se ejecutarán en orden y serán dependientes uno del otro. Ya que cada paso se ejecuta en el mismo ejecutor, puedes compartir datos de un paso a otro. Por ejemplo, puedes tener un paso que compile tu aplicación, seguido de otro que pruebe la aplicación que se compiló.Puedes configurar las dependencias de un job con otros jobs; predeterminadamente, los jobs no tienen dependencias y se ejecutan en paralelo entre ellos. Cuando un job lleva una dependencia a otro job, este esperará a que el job dependiente se complete antes de que pueda ejecutarse. Por ejemplo, puedes tener jobs de compilación múltiple para arquitecturas diferentes que no tengan dependencias y un job de empaquetado que sea dependiente de estos jobs. Los jobs de compilación se ejecutarán en paralelo y, cuando se hayan completado con éxito, se ejecutará el job de empaquetado.ActionsUna acción es una aplicación personalizada para la plataforma de GitHub Actions que realiza una tarea compleja pero que se repite frecuentemente. Utiliza una acción para ayudarte a reducir la cantidad de código repetitivo que escribes en tus archivos de flujo de trabajo. Una acción puede extraer tu repositorio de git desde GitHub, configurar la cadena de herramientas correcta para tu ambiente de compilación o configurar la autenticación en tu proveedor de servicios en la nube.Puedes escribir tus propias acciones o puedes encontrar acciones para utilizar en tus flujos de trabajo dentro de GitHub Marketplace.Fuente: Entender las GitHub ActionsUso practico de Github ActionsA continuacion utilizaremos Githubs Action para crea un flujo de despligue de archivos a un servidor compartido. Para esto sera necesario contar con una cuenta ftp a dicho servidor. Acceder a FTP Deploy Crear una estructura de archivos como la imagen Estructura de archivos index.html&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;GitHub Actions&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Hello World!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; master.yaml on: push: branches: - mastername: 🚀 Desplegar on push masterjobs: web-deploy: name: 🎉 Deploy runs-on: ubuntu-latest steps: - name: 🚚 Obtener ultimas actualizaciones de codigo uses: actions/checkout@v2 - name: 📂 Sincronizar archivos uses: SamKirkland/FTP-Deploy-Action@4.3.0 with: server: $ username: $ password: $ protocol: ftps server-dir: /public_html/ pruebas.yaml on: push: branches: - pruebasname: 🚀 Desplegar on push pruebasjobs: web-deploy: name: 🎉 Deploy runs-on: ubuntu-latest steps: - name: 🚚 Obtener ultimas actualizaciones de codigo uses: actions/checkout@v2 - name: 📂 Sincronizar archivos uses: SamKirkland/FTP-Deploy-Action@4.3.0 with: server: $ username: $ password: $ protocol: ftps server-dir: /public_html/pruebas.jrcoding.net/ Crear un repositorio en GitHub y despues configurarlo para replicar el proyecto localgit initgit add .git commit -m \"primer commit\"git remote add origin https://github.com/jrguevara/site.gitgit push origin master Verificar actions en GithubActions GitHub Ingresar Secrets en el repositorio de githubSecrets GitHub FTP_SERVER: ftp.sitio.com FTP_USERNAME: username FTP_PASSWORD: password*Volver a actions y Re-run Jobs Proseguir con la creacion de ramas en githubgit branch pruebascheckout mastergit branch actualizacionescheckout actualizaciones Modificar parte del index.html mientras se esta en la rama actualizaciones Proseguir a añadir los cambios y hacer commit y push de la rama actualizacionesgit add .git commit -m \"nueva actualizacion\"git push origin actualizaciones Verificar que las acciones no se ejecutan ya que solo funcionan para master y pruebas Cambiar a rama pruebas, fusionar con actualizaciones y push la rama pruebasgit checkout pruebasgit merge actualizacionesgit push origin pruebas Verificar que la accion para despliegue en pruebas funciona correctamente Finalmente cambiar a la rama master, fusionar con pruebas y push la rama mastergit checkout mastergit merge pruebasgit push origin master" }, { "title": "Documentación en Yii2", "url": "/posts/yii2-documentacion/", "categories": "yii2", "tags": "documentacion, yii2, calidad de software, programacion", "date": "2022-06-09 02:00:00 -0600", "snippet": "Documentación de SoftwareLa documentación es uno de los aspectos más importantes y subestimados de cualquier biblioteca o proyecto de código abierto. Si está escribiendo código que será utilizado p...", "content": "Documentación de SoftwareLa documentación es uno de los aspectos más importantes y subestimados de cualquier biblioteca o proyecto de código abierto. Si está escribiendo código que será utilizado por alguien que no sea usted mismo, debe documentarse.Los diferentes componentes de la documentaciónCada componente tiene un papel único que desempeñar y se requiere en diferentes etapas del uso diario de la biblioteca. En esta guia nos cenraremos en la Documentación de API.Componentes de documentación de softwareDocumentación APILa documentación de la API contiene la descripción de las funciones, métodos y componentes individuales de su biblioteca. Es la fuente final de verdad cuando se trata de descifrar cómo funciona su biblioteca.Si bien los tutoriales y ejemplos bien escritos cubren la mayoría de los casos de uso, realmente no puede cubrir todas las situaciones para las que las personas usarán su biblioteca. Luego, sus usuarios consultarán la documentación de su API para ayudarlos a resolverlo.Aquí hay algunas reglas a seguir al escribir la documentación de la API: Si una función, clase o variable se expone públicamente, debe documentarse. La documentación debe contener una breve descripción del componente y mencionar cualquier caso límite que pueda ocurrir.Video: Documentación en ProgramaciónVideo: Software Planning and Technical DocumentationDocumentación Técnica en Yii2 Instalar yii2-apidoc via Terminalcomposer require --prefer-dist yiisoft/yii2-apidoc --with-all-dependencies./vendor/bin/apidoc api \"controllers, models, modules\" documentation Colocar un bloque de comentarios en la parte superior de cada archivo que contenga un modelo o controlador:/** * @link http://jrcoding.net * @copyright Copyright (c) 2022 jrCoding * @license https://www.yiiframework.com/license/ */ Colocar un bloque de comentarios sobre cada controlador o definición de modelo:/** * PacientesController implementa las operaciones CRUD para el modelo TblPacientes. * @author Jaime Guevara &lt;jr.guevara@outlook.com&gt; * @since 0.1 */class PacientesController extends Controller{ Bloque de comentario para acciones/*** Lista todos los paciente en el modelo TblPacientes.* @return string que renderiza vista index*/ public function actionIndex(){ $searchModel = new PacientesSearch(); $dataProvider = $searchModel-&gt;search($this-&gt;request-&gt;queryParams); return $this-&gt;render('index', [ 'searchModel' =&gt; $searchModel, 'dataProvider' =&gt; $dataProvider, ]);} Comentarios para funciones especificas/*** Genera Codigo para ser utilizado en registro de Representantes actionCreate* @return string*/function CreateCode(){ $paciente = TblPacientes::find()-&gt;orderBy(['id_paciente' =&gt; SORT_DESC])-&gt;one(); if (empty($paciente-&gt;cod_paciente)) $codigo = 0; else $codigo = $paciente-&gt;cod_paciente; $int = intval(preg_replace('/[^0-9]+/', '', $codigo), 10); $id = $int + 1; $numero = $id; $tmp = \"\"; if ($id &lt; 10) { $tmp .= \"000\"; $tmp .= $id; } elseif ($id &gt;= 10 &amp;&amp; $id &lt; 100) { $tmp .= \"00\"; $tmp .= $id; } elseif ($id &gt;= 100 &amp;&amp; $id &lt; 1000) { $tmp .= \"0\"; $tmp .= $id; } else { $tmp .= $id; } $result = str_replace($id, $tmp, $numero); return \"PA-\" . $result;}/*** Getter para recuperar data de un solo paciente** @param int $id_paciente captura id de paciente* @return object $paciente con la informacion del paciente* @throws Exception not yet implemented*/public static function getPaciente($id_paciente){ $paciente = TblPacientes::find()-&gt;where(['id_paciente' =&gt; $id_paciente])-&gt;one(); return $paciente;} Utilizar en terminal el siguiente codigo para generar documentacion (crear previamente carpeta documentation en la raiz del proyecto)./vendor/bin/apidoc api \"controllers, models, modules\" documentation Abrir carpeta documentation y abrir archivo index en el navegadorDocumentacion API Yii2Como se puede apreciar, esto es extremadamente útil para compartir una API con programadores de terceros en tiempo real mientras entrega el código. El gran beneficio es que elimina la necesidad de mantener manualmente la documentación de la API por separado.VinculosYii2 Code StylePHPDoc Basic Syntax" } ]
